/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";class t{constructor(e,i,n,r,s="div"){this.parent=e,this.object=i,this.property=n,this._disabled=!1,this._hidden=!1,this.initialValue=this.getValue(),this.domElement=document.createElement("div"),this.domElement.classList.add("controller"),this.domElement.classList.add(r),this.$name=document.createElement("div"),this.$name.classList.add("name"),t.nextNameID=t.nextNameID||0,this.$name.id="lil-gui-name-"+ ++t.nextNameID,this.$widget=document.createElement(s),this.$widget.classList.add("widget"),this.$disable=this.$widget,this.domElement.appendChild(this.$name),this.domElement.appendChild(this.$widget),this.parent.children.push(this),this.parent.controllers.push(this),this.parent.$children.appendChild(this.domElement),this._listenCallback=this._listenCallback.bind(this),this.name(n)}name(t){return this._name=t,this.$name.innerHTML=t,this}onChange(t){return this._onChange=t,this}_callOnChange(){this.parent._callOnChange(this),void 0!==this._onChange&&this._onChange.call(this,this.getValue()),this._changed=!0}onFinishChange(t){return this._onFinishChange=t,this}_callOnFinishChange(){this._changed&&(this.parent._callOnFinishChange(this),void 0!==this._onFinishChange&&this._onFinishChange.call(this,this.getValue())),this._changed=!1}reset(){return this.setValue(this.initialValue),this._callOnFinishChange(),this}enable(t=!0){return this.disable(!t)}disable(t=!0){return t===this._disabled||(this._disabled=t,this.domElement.classList.toggle("disabled",t),this.$disable.toggleAttribute("disabled",t)),this}show(t=!0){return this._hidden=!t,this.domElement.style.display=this._hidden?"none":"",this}hide(){return this.show(!1)}options(t){const e=this.parent.add(this.object,this.property,t);return e.name(this._name),this.destroy(),e}min(t){return this}max(t){return this}step(t){return this}decimals(t){return this}listen(t=!0){return this._listening=t,void 0!==this._listenCallbackID&&(cancelAnimationFrame(this._listenCallbackID),this._listenCallbackID=void 0),this._listening&&this._listenCallback(),this}_listenCallback(){this._listenCallbackID=requestAnimationFrame(this._listenCallback);const t=this.save();t!==this._listenPrevValue&&this.updateDisplay(),this._listenPrevValue=t}getValue(){return this.object[this.property]}setValue(t){return this.object[this.property]=t,this._callOnChange(),this.updateDisplay(),this}updateDisplay(){return this}load(t){return this.setValue(t),this._callOnFinishChange(),this}save(){return this.getValue()}destroy(){this.listen(!1),this.parent.children.splice(this.parent.children.indexOf(this),1),this.parent.controllers.splice(this.parent.controllers.indexOf(this),1),this.parent.$children.removeChild(this.domElement)}}class e extends t{constructor(t,e,i){super(t,e,i,"boolean","label"),this.$input=document.createElement("input"),this.$input.setAttribute("type","checkbox"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$widget.appendChild(this.$input),this.$input.addEventListener("change",(()=>{this.setValue(this.$input.checked),this._callOnFinishChange()})),this.$disable=this.$input,this.updateDisplay()}updateDisplay(){return this.$input.checked=this.getValue(),this}}function i(t){let e,i;return(e=t.match(/(#|0x)?([a-f0-9]{6})/i))?i=e[2]:(e=t.match(/rgb\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*\)/))?i=parseInt(e[1]).toString(16).padStart(2,0)+parseInt(e[2]).toString(16).padStart(2,0)+parseInt(e[3]).toString(16).padStart(2,0):(e=t.match(/^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i))&&(i=e[1]+e[1]+e[2]+e[2]+e[3]+e[3]),!!i&&"#"+i}const n={isPrimitive:!0,match:t=>"number"==typeof t,fromHexString:t=>parseInt(t.substring(1),16),toHexString:t=>"#"+t.toString(16).padStart(6,0)},r={isPrimitive:!1,match:t=>Array.isArray(t),fromHexString(t,e,i=1){const r=n.fromHexString(t);e[0]=(r>>16&255)/255*i,e[1]=(r>>8&255)/255*i,e[2]=(255&r)/255*i},toHexString:([t,e,i],r=1)=>n.toHexString(t*(r=255/r)<<16^e*r<<8^i*r<<0)},s={isPrimitive:!1,match:t=>Object(t)===t,fromHexString(t,e,i=1){const r=n.fromHexString(t);e.r=(r>>16&255)/255*i,e.g=(r>>8&255)/255*i,e.b=(255&r)/255*i},toHexString:({r:t,g:e,b:i},r=1)=>n.toHexString(t*(r=255/r)<<16^e*r<<8^i*r<<0)},o=[{isPrimitive:!0,match:t=>"string"==typeof t,fromHexString:i,toHexString:i},n,r,s];class a extends t{constructor(t,e,n,r){var s;super(t,e,n,"color"),this.$input=document.createElement("input"),this.$input.setAttribute("type","color"),this.$input.setAttribute("tabindex",-1),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$text=document.createElement("input"),this.$text.setAttribute("type","text"),this.$text.setAttribute("spellcheck","false"),this.$text.setAttribute("aria-labelledby",this.$name.id),this.$display=document.createElement("div"),this.$display.classList.add("display"),this.$display.appendChild(this.$input),this.$widget.appendChild(this.$display),this.$widget.appendChild(this.$text),this._format=(s=this.initialValue,o.find((t=>t.match(s)))),this._rgbScale=r,this._initialValueHexString=this.save(),this._textFocused=!1,this.$input.addEventListener("input",(()=>{this._setValueFromHexString(this.$input.value)})),this.$input.addEventListener("blur",(()=>{this._callOnFinishChange()})),this.$text.addEventListener("input",(()=>{const t=i(this.$text.value);t&&this._setValueFromHexString(t)})),this.$text.addEventListener("focus",(()=>{this._textFocused=!0,this.$text.select()})),this.$text.addEventListener("blur",(()=>{this._textFocused=!1,this.updateDisplay(),this._callOnFinishChange()})),this.$disable=this.$text,this.updateDisplay()}reset(){return this._setValueFromHexString(this._initialValueHexString),this}_setValueFromHexString(t){if(this._format.isPrimitive){const e=this._format.fromHexString(t);this.setValue(e)}else this._format.fromHexString(t,this.getValue(),this._rgbScale),this._callOnChange(),this.updateDisplay()}save(){return this._format.toHexString(this.getValue(),this._rgbScale)}load(t){return this._setValueFromHexString(t),this._callOnFinishChange(),this}updateDisplay(){return this.$input.value=this._format.toHexString(this.getValue(),this._rgbScale),this._textFocused||(this.$text.value=this.$input.value.substring(1)),this.$display.style.backgroundColor=this.$input.value,this}}class l extends t{constructor(t,e,i){super(t,e,i,"function"),this.$button=document.createElement("button"),this.$button.appendChild(this.$name),this.$widget.appendChild(this.$button),this.$button.addEventListener("click",(t=>{t.preventDefault(),this.getValue().call(this.object),this._callOnChange()})),this.$button.addEventListener("touchstart",(()=>{}),{passive:!0}),this.$disable=this.$button}}class h extends t{constructor(t,e,i,n,r,s){super(t,e,i,"number"),this._initInput(),this.min(n),this.max(r);const o=void 0!==s;this.step(o?s:this._getImplicitStep(),o),this.updateDisplay()}decimals(t){return this._decimals=t,this.updateDisplay(),this}min(t){return this._min=t,this._onUpdateMinMax(),this}max(t){return this._max=t,this._onUpdateMinMax(),this}step(t,e=!0){return this._step=t,this._stepExplicit=e,this}updateDisplay(){const t=this.getValue();if(this._hasSlider){let e=(t-this._min)/(this._max-this._min);e=Math.max(0,Math.min(e,1)),this.$fill.style.width=100*e+"%"}return this._inputFocused||(this.$input.value=void 0===this._decimals?t:t.toFixed(this._decimals)),this}_initInput(){this.$input=document.createElement("input"),this.$input.setAttribute("type","number"),this.$input.setAttribute("step","any"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$widget.appendChild(this.$input),this.$disable=this.$input;const t=t=>{const e=parseFloat(this.$input.value);isNaN(e)||(this._snapClampSetValue(e+t),this.$input.value=this.getValue())};let e,i,n,r,s,o=!1;const a=t=>{if(o){const n=t.clientX-e,r=t.clientY-i;Math.abs(r)>5?(t.preventDefault(),this.$input.blur(),o=!1,this._setDraggingStyle(!0,"vertical")):Math.abs(n)>5&&l()}if(!o){const e=t.clientY-n;s-=e*this._step*this._arrowKeyMultiplier(t),r+s>this._max?s=this._max-r:r+s<this._min&&(s=this._min-r),this._snapClampSetValue(r+s)}n=t.clientY},l=()=>{this._setDraggingStyle(!1,"vertical"),this._callOnFinishChange(),window.removeEventListener("mousemove",a),window.removeEventListener("mouseup",l)};this.$input.addEventListener("input",(()=>{let t=parseFloat(this.$input.value);isNaN(t)||(this._stepExplicit&&(t=this._snap(t)),this.setValue(this._clamp(t)))})),this.$input.addEventListener("keydown",(e=>{"Enter"===e.code&&this.$input.blur(),"ArrowUp"===e.code&&(e.preventDefault(),t(this._step*this._arrowKeyMultiplier(e))),"ArrowDown"===e.code&&(e.preventDefault(),t(this._step*this._arrowKeyMultiplier(e)*-1))})),this.$input.addEventListener("wheel",(e=>{this._inputFocused&&(e.preventDefault(),t(this._step*this._normalizeMouseWheel(e)))}),{passive:!1}),this.$input.addEventListener("mousedown",(t=>{e=t.clientX,i=n=t.clientY,o=!0,r=this.getValue(),s=0,window.addEventListener("mousemove",a),window.addEventListener("mouseup",l)})),this.$input.addEventListener("focus",(()=>{this._inputFocused=!0})),this.$input.addEventListener("blur",(()=>{this._inputFocused=!1,this.updateDisplay(),this._callOnFinishChange()}))}_initSlider(){this._hasSlider=!0,this.$slider=document.createElement("div"),this.$slider.classList.add("slider"),this.$fill=document.createElement("div"),this.$fill.classList.add("fill"),this.$slider.appendChild(this.$fill),this.$widget.insertBefore(this.$slider,this.$input),this.domElement.classList.add("hasSlider");const t=t=>{const e=this.$slider.getBoundingClientRect();let i=(n=t,r=e.left,s=e.right,o=this._min,(n-r)/(s-r)*(this._max-o)+o);var n,r,s,o;this._snapClampSetValue(i)},e=e=>{t(e.clientX)},i=()=>{this._callOnFinishChange(),this._setDraggingStyle(!1),window.removeEventListener("mousemove",e),window.removeEventListener("mouseup",i)};let n,r,s=!1;const o=e=>{e.preventDefault(),this._setDraggingStyle(!0),t(e.touches[0].clientX),s=!1},a=e=>{if(s){const t=e.touches[0].clientX-n,i=e.touches[0].clientY-r;Math.abs(t)>Math.abs(i)?o(e):(window.removeEventListener("touchmove",a),window.removeEventListener("touchend",l))}else e.preventDefault(),t(e.touches[0].clientX)},l=()=>{this._callOnFinishChange(),this._setDraggingStyle(!1),window.removeEventListener("touchmove",a),window.removeEventListener("touchend",l)},h=this._callOnFinishChange.bind(this);let d;this.$slider.addEventListener("mousedown",(n=>{this._setDraggingStyle(!0),t(n.clientX),window.addEventListener("mousemove",e),window.addEventListener("mouseup",i)})),this.$slider.addEventListener("touchstart",(t=>{t.touches.length>1||(this._hasScrollBar?(n=t.touches[0].clientX,r=t.touches[0].clientY,s=!0):o(t),window.addEventListener("touchmove",a,{passive:!1}),window.addEventListener("touchend",l))}),{passive:!1}),this.$slider.addEventListener("wheel",(t=>{if(Math.abs(t.deltaX)<Math.abs(t.deltaY)&&this._hasScrollBar)return;t.preventDefault();const e=this._normalizeMouseWheel(t)*this._step;this._snapClampSetValue(this.getValue()+e),this.$input.value=this.getValue(),clearTimeout(d),d=setTimeout(h,400)}),{passive:!1})}_setDraggingStyle(t,e="horizontal"){this.$slider&&this.$slider.classList.toggle("active",t),document.body.classList.toggle("lil-gui-dragging",t),document.body.classList.toggle(`lil-gui-${e}`,t)}_getImplicitStep(){return this._hasMin&&this._hasMax?(this._max-this._min)/1e3:.1}_onUpdateMinMax(){!this._hasSlider&&this._hasMin&&this._hasMax&&(this._stepExplicit||this.step(this._getImplicitStep(),!1),this._initSlider(),this.updateDisplay())}_normalizeMouseWheel(t){let{deltaX:e,deltaY:i}=t;return Math.floor(t.deltaY)!==t.deltaY&&t.wheelDelta&&(e=0,i=-t.wheelDelta/120,i*=this._stepExplicit?1:10),e+-i}_arrowKeyMultiplier(t){let e=this._stepExplicit?1:10;return t.shiftKey?e*=10:t.altKey&&(e/=10),e}_snap(t){const e=Math.round(t/this._step)*this._step;return parseFloat(e.toPrecision(15))}_clamp(t){return t<this._min&&(t=this._min),t>this._max&&(t=this._max),t}_snapClampSetValue(t){this.setValue(this._clamp(this._snap(t)))}get _hasScrollBar(){const t=this.parent.root.$children;return t.scrollHeight>t.clientHeight}get _hasMin(){return void 0!==this._min}get _hasMax(){return void 0!==this._max}}class d extends t{constructor(t,e,i,n){super(t,e,i,"option"),this.$select=document.createElement("select"),this.$select.setAttribute("aria-labelledby",this.$name.id),this.$display=document.createElement("div"),this.$display.classList.add("display"),this._values=Array.isArray(n)?n:Object.values(n),this._names=Array.isArray(n)?n:Object.keys(n),this._names.forEach((t=>{const e=document.createElement("option");e.innerHTML=t,this.$select.appendChild(e)})),this.$select.addEventListener("change",(()=>{this.setValue(this._values[this.$select.selectedIndex]),this._callOnFinishChange()})),this.$select.addEventListener("focus",(()=>{this.$display.classList.add("focus")})),this.$select.addEventListener("blur",(()=>{this.$display.classList.remove("focus")})),this.$widget.appendChild(this.$select),this.$widget.appendChild(this.$display),this.$disable=this.$select,this.updateDisplay()}updateDisplay(){const t=this.getValue(),e=this._values.indexOf(t);return this.$select.selectedIndex=e,this.$display.innerHTML=-1===e?t:this._names[e],this}}class c extends t{constructor(t,e,i){super(t,e,i,"string"),this.$input=document.createElement("input"),this.$input.setAttribute("type","text"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$input.addEventListener("input",(()=>{this.setValue(this.$input.value)})),this.$input.addEventListener("keydown",(t=>{"Enter"===t.code&&this.$input.blur()})),this.$input.addEventListener("blur",(()=>{this._callOnFinishChange()})),this.$widget.appendChild(this.$input),this.$disable=this.$input,this.updateDisplay()}updateDisplay(){return this.$input.value=this.getValue(),this}}let u=!1;class p{constructor({parent:t,autoPlace:e=void 0===t,container:i,width:n,title:r="Controls",closeFolders:s=!1,injectStyles:o=!0,touchStyles:a=!0}={}){if(this.parent=t,this.root=t?t.root:this,this.children=[],this.controllers=[],this.folders=[],this._closed=!1,this._hidden=!1,this.domElement=document.createElement("div"),this.domElement.classList.add("lil-gui"),this.$title=document.createElement("div"),this.$title.classList.add("title"),this.$title.setAttribute("role","button"),this.$title.setAttribute("aria-expanded",!0),this.$title.setAttribute("tabindex",0),this.$title.addEventListener("click",(()=>this.openAnimated(this._closed))),this.$title.addEventListener("keydown",(t=>{"Enter"!==t.code&&"Space"!==t.code||(t.preventDefault(),this.$title.click())})),this.$title.addEventListener("touchstart",(()=>{}),{passive:!0}),this.$children=document.createElement("div"),this.$children.classList.add("children"),this.domElement.appendChild(this.$title),this.domElement.appendChild(this.$children),this.title(r),a&&this.domElement.classList.add("allow-touch-styles"),this.parent)return this.parent.children.push(this),this.parent.folders.push(this),void this.parent.$children.appendChild(this.domElement);this.domElement.classList.add("root"),!u&&o&&(function(t){const e=document.createElement("style");e.innerHTML='.lil-gui {\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  line-height: 1;\n  font-weight: normal;\n  font-style: normal;\n  text-align: left;\n  background-color: var(--background-color);\n  color: var(--text-color);\n  user-select: none;\n  -webkit-user-select: none;\n  touch-action: manipulation;\n  --background-color: #1f1f1f;\n  --text-color: #ebebeb;\n  --title-background-color: #111111;\n  --title-text-color: #ebebeb;\n  --widget-color: #424242;\n  --hover-color: #4f4f4f;\n  --focus-color: #595959;\n  --number-color: #2cc9ff;\n  --string-color: #a2db3c;\n  --font-size: 11px;\n  --input-font-size: 11px;\n  --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Arial, sans-serif;\n  --font-family-mono: Menlo, Monaco, Consolas, "Droid Sans Mono", monospace;\n  --padding: 4px;\n  --spacing: 4px;\n  --widget-height: 20px;\n  --title-height: calc(var(--widget-height) + var(--spacing) * 1.25);\n  --name-width: 45%;\n  --slider-knob-width: 2px;\n  --slider-input-width: 27%;\n  --color-input-width: 27%;\n  --slider-input-min-width: 45px;\n  --color-input-min-width: 45px;\n  --folder-indent: 7px;\n  --widget-padding: 0 0 0 3px;\n  --widget-border-radius: 2px;\n  --checkbox-size: calc(0.75 * var(--widget-height));\n  --scrollbar-width: 5px;\n}\n.lil-gui, .lil-gui * {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n.lil-gui.root {\n  width: var(--width, 245px);\n  display: flex;\n  flex-direction: column;\n}\n.lil-gui.root > .title {\n  background: var(--title-background-color);\n  color: var(--title-text-color);\n}\n.lil-gui.root > .children {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.lil-gui.root > .children::-webkit-scrollbar {\n  width: var(--scrollbar-width);\n  height: var(--scrollbar-width);\n  background: var(--background-color);\n}\n.lil-gui.root > .children::-webkit-scrollbar-thumb {\n  border-radius: var(--scrollbar-width);\n  background: var(--focus-color);\n}\n@media (pointer: coarse) {\n  .lil-gui.allow-touch-styles {\n    --widget-height: 28px;\n    --padding: 6px;\n    --spacing: 6px;\n    --font-size: 13px;\n    --input-font-size: 16px;\n    --folder-indent: 10px;\n    --scrollbar-width: 7px;\n    --slider-input-min-width: 50px;\n    --color-input-min-width: 65px;\n  }\n}\n.lil-gui.force-touch-styles {\n  --widget-height: 28px;\n  --padding: 6px;\n  --spacing: 6px;\n  --font-size: 13px;\n  --input-font-size: 16px;\n  --folder-indent: 10px;\n  --scrollbar-width: 7px;\n  --slider-input-min-width: 50px;\n  --color-input-min-width: 65px;\n}\n.lil-gui.autoPlace {\n  max-height: 100%;\n  position: fixed;\n  top: 0;\n  right: 15px;\n  z-index: 1001;\n}\n\n.lil-gui .controller {\n  display: flex;\n  align-items: center;\n  padding: 0 var(--padding);\n  margin: var(--spacing) 0;\n}\n.lil-gui .controller.disabled {\n  opacity: 0.5;\n}\n.lil-gui .controller.disabled, .lil-gui .controller.disabled * {\n  pointer-events: none !important;\n}\n.lil-gui .controller > .name {\n  min-width: var(--name-width);\n  flex-shrink: 0;\n  white-space: pre;\n  padding-right: var(--spacing);\n  line-height: var(--widget-height);\n}\n.lil-gui .controller .widget {\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  min-height: var(--widget-height);\n}\n.lil-gui .controller.string input {\n  color: var(--string-color);\n}\n.lil-gui .controller.boolean .widget {\n  cursor: pointer;\n}\n.lil-gui .controller.color .display {\n  width: 100%;\n  height: var(--widget-height);\n  border-radius: var(--widget-border-radius);\n  position: relative;\n}\n@media (hover: hover) {\n  .lil-gui .controller.color .display:hover:before {\n    content: " ";\n    display: block;\n    position: absolute;\n    border-radius: var(--widget-border-radius);\n    border: 1px solid #fff9;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n}\n.lil-gui .controller.color input[type=color] {\n  opacity: 0;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n}\n.lil-gui .controller.color input[type=text] {\n  margin-left: var(--spacing);\n  font-family: var(--font-family-mono);\n  min-width: var(--color-input-min-width);\n  width: var(--color-input-width);\n  flex-shrink: 0;\n}\n.lil-gui .controller.option select {\n  opacity: 0;\n  position: absolute;\n  width: 100%;\n  max-width: 100%;\n}\n.lil-gui .controller.option .display {\n  position: relative;\n  pointer-events: none;\n  border-radius: var(--widget-border-radius);\n  height: var(--widget-height);\n  line-height: var(--widget-height);\n  max-width: 100%;\n  overflow: hidden;\n  word-break: break-all;\n  padding-left: 0.55em;\n  padding-right: 1.75em;\n  background: var(--widget-color);\n}\n@media (hover: hover) {\n  .lil-gui .controller.option .display.focus {\n    background: var(--focus-color);\n  }\n}\n.lil-gui .controller.option .display.active {\n  background: var(--focus-color);\n}\n.lil-gui .controller.option .display:after {\n  font-family: "lil-gui";\n  content: "↕";\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  padding-right: 0.375em;\n}\n.lil-gui .controller.option .widget,\n.lil-gui .controller.option select {\n  cursor: pointer;\n}\n@media (hover: hover) {\n  .lil-gui .controller.option .widget:hover .display {\n    background: var(--hover-color);\n  }\n}\n.lil-gui .controller.number input {\n  color: var(--number-color);\n}\n.lil-gui .controller.number.hasSlider input {\n  margin-left: var(--spacing);\n  width: var(--slider-input-width);\n  min-width: var(--slider-input-min-width);\n  flex-shrink: 0;\n}\n.lil-gui .controller.number .slider {\n  width: 100%;\n  height: var(--widget-height);\n  background-color: var(--widget-color);\n  border-radius: var(--widget-border-radius);\n  padding-right: var(--slider-knob-width);\n  overflow: hidden;\n  cursor: ew-resize;\n  touch-action: pan-y;\n}\n@media (hover: hover) {\n  .lil-gui .controller.number .slider:hover {\n    background-color: var(--hover-color);\n  }\n}\n.lil-gui .controller.number .slider.active {\n  background-color: var(--focus-color);\n}\n.lil-gui .controller.number .slider.active .fill {\n  opacity: 0.95;\n}\n.lil-gui .controller.number .fill {\n  height: 100%;\n  border-right: var(--slider-knob-width) solid var(--number-color);\n  box-sizing: content-box;\n}\n\n.lil-gui-dragging .lil-gui {\n  --hover-color: var(--widget-color);\n}\n.lil-gui-dragging * {\n  cursor: ew-resize !important;\n}\n\n.lil-gui-dragging.lil-gui-vertical * {\n  cursor: ns-resize !important;\n}\n\n.lil-gui .title {\n  height: var(--title-height);\n  line-height: calc(var(--title-height) - 4px);\n  font-weight: 600;\n  padding: 0 var(--padding);\n  -webkit-tap-highlight-color: transparent;\n  cursor: pointer;\n  outline: none;\n  text-decoration-skip: objects;\n}\n.lil-gui .title:before {\n  font-family: "lil-gui";\n  content: "▾";\n  padding-right: 2px;\n  display: inline-block;\n}\n.lil-gui .title:active {\n  background: var(--title-background-color);\n  opacity: 0.75;\n}\n@media (hover: hover) {\n  body:not(.lil-gui-dragging) .lil-gui .title:hover {\n    background: var(--title-background-color);\n    opacity: 0.85;\n  }\n  .lil-gui .title:focus {\n    text-decoration: underline var(--focus-color);\n  }\n}\n.lil-gui.root > .title:focus {\n  text-decoration: none !important;\n}\n.lil-gui.closed > .title:before {\n  content: "▸";\n}\n.lil-gui.closed > .children {\n  transform: translateY(-7px);\n  opacity: 0;\n}\n.lil-gui.closed:not(.transition) > .children {\n  display: none;\n}\n.lil-gui.transition > .children {\n  transition-duration: 300ms;\n  transition-property: height, opacity, transform;\n  transition-timing-function: cubic-bezier(0.2, 0.6, 0.35, 1);\n  overflow: hidden;\n  pointer-events: none;\n}\n.lil-gui .children:empty:before {\n  content: "Empty";\n  padding: 0 var(--padding);\n  margin: var(--spacing) 0;\n  display: block;\n  height: var(--widget-height);\n  font-style: italic;\n  line-height: var(--widget-height);\n  opacity: 0.5;\n}\n.lil-gui.root > .children > .lil-gui > .title {\n  border: 0 solid var(--widget-color);\n  border-width: 1px 0;\n  transition: border-color 300ms;\n}\n.lil-gui.root > .children > .lil-gui.closed > .title {\n  border-bottom-color: transparent;\n}\n.lil-gui + .controller {\n  border-top: 1px solid var(--widget-color);\n  margin-top: 0;\n  padding-top: var(--spacing);\n}\n.lil-gui .lil-gui .lil-gui > .title {\n  border: none;\n}\n.lil-gui .lil-gui .lil-gui > .children {\n  border: none;\n  margin-left: var(--folder-indent);\n  border-left: 2px solid var(--widget-color);\n}\n.lil-gui .lil-gui .controller {\n  border: none;\n}\n\n.lil-gui input {\n  -webkit-tap-highlight-color: transparent;\n  border: 0;\n  outline: none;\n  font-family: var(--font-family);\n  font-size: var(--input-font-size);\n  border-radius: var(--widget-border-radius);\n  height: var(--widget-height);\n  background: var(--widget-color);\n  color: var(--text-color);\n  width: 100%;\n}\n@media (hover: hover) {\n  .lil-gui input:hover {\n    background: var(--hover-color);\n  }\n  .lil-gui input:active {\n    background: var(--focus-color);\n  }\n}\n.lil-gui input:disabled {\n  opacity: 1;\n}\n.lil-gui input[type=text],\n.lil-gui input[type=number] {\n  padding: var(--widget-padding);\n}\n.lil-gui input[type=text]:focus,\n.lil-gui input[type=number]:focus {\n  background: var(--focus-color);\n}\n.lil-gui input::-webkit-outer-spin-button,\n.lil-gui input::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n.lil-gui input[type=number] {\n  -moz-appearance: textfield;\n}\n.lil-gui input[type=checkbox] {\n  appearance: none;\n  -webkit-appearance: none;\n  height: var(--checkbox-size);\n  width: var(--checkbox-size);\n  border-radius: var(--widget-border-radius);\n  text-align: center;\n  cursor: pointer;\n}\n.lil-gui input[type=checkbox]:checked:before {\n  font-family: "lil-gui";\n  content: "✓";\n  font-size: var(--checkbox-size);\n  line-height: var(--checkbox-size);\n}\n@media (hover: hover) {\n  .lil-gui input[type=checkbox]:focus {\n    box-shadow: inset 0 0 0 1px var(--focus-color);\n  }\n}\n.lil-gui button {\n  -webkit-tap-highlight-color: transparent;\n  outline: none;\n  cursor: pointer;\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  color: var(--text-color);\n  width: 100%;\n  height: var(--widget-height);\n  text-transform: none;\n  background: var(--widget-color);\n  border-radius: var(--widget-border-radius);\n  border: 1px solid var(--widget-color);\n  text-align: center;\n  line-height: calc(var(--widget-height) - 4px);\n}\n@media (hover: hover) {\n  .lil-gui button:hover {\n    background: var(--hover-color);\n    border-color: var(--hover-color);\n  }\n  .lil-gui button:focus {\n    border-color: var(--focus-color);\n  }\n}\n.lil-gui button:active {\n  background: var(--focus-color);\n}\n\n@font-face {\n  font-family: "lil-gui";\n  src: url("data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAUsAAsAAAAACJwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAAH4AAADAImwmYE9TLzIAAAGIAAAAPwAAAGBKqH5SY21hcAAAAcgAAAD0AAACrukyyJBnbHlmAAACvAAAAF8AAACEIZpWH2hlYWQAAAMcAAAAJwAAADZfcj2zaGhlYQAAA0QAAAAYAAAAJAC5AHhobXR4AAADXAAAABAAAABMAZAAAGxvY2EAAANsAAAAFAAAACgCEgIybWF4cAAAA4AAAAAeAAAAIAEfABJuYW1lAAADoAAAASIAAAIK9SUU/XBvc3QAAATEAAAAZgAAAJCTcMc2eJxVjbEOgjAURU+hFRBK1dGRL+ALnAiToyMLEzFpnPz/eAshwSa97517c/MwwJmeB9kwPl+0cf5+uGPZXsqPu4nvZabcSZldZ6kfyWnomFY/eScKqZNWupKJO6kXN3K9uCVoL7iInPr1X5baXs3tjuMqCtzEuagm/AAlzQgPAAB4nGNgYRBlnMDAysDAYM/gBiT5oLQBAwuDJAMDEwMrMwNWEJDmmsJwgCFeXZghBcjlZMgFCzOiKOIFAB71Bb8AeJy1kjFuwkAQRZ+DwRAwBtNQRUGKQ8OdKCAWUhAgKLhIuAsVSpWz5Bbkj3dEgYiUIszqWdpZe+Z7/wB1oCYmIoboiwiLT2WjKl/jscrHfGg/pKdMkyklC5Zs2LEfHYpjcRoPzme9MWWmk3dWbK9ObkWkikOetJ554fWyoEsmdSlt+uR0pCJR34b6t/TVg1SY3sYvdf8vuiKrpyaDXDISiegp17p7579Gp3p++y7HPAiY9pmTibljrr85qSidtlg4+l25GLCaS8e6rRxNBmsnERunKbaOObRz7N72ju5vdAjYpBXHgJylOAVsMseDAPEP8LYoUHicY2BiAAEfhiAGJgZWBgZ7RnFRdnVJELCQlBSRlATJMoLV2DK4glSYs6ubq5vbKrJLSbGrgEmovDuDJVhe3VzcXFwNLCOILB/C4IuQ1xTn5FPilBTj5FPmBAB4WwoqAHicY2BkYGAA4sk1sR/j+W2+MnAzpDBgAyEMQUCSg4EJxAEAwUgFHgB4nGNgZGBgSGFggJMhDIwMqEAYAByHATJ4nGNgAIIUNEwmAABl3AGReJxjYAACIQYlBiMGJ3wQAEcQBEV4nGNgZGBgEGZgY2BiAAEQyQWEDAz/wXwGAAsPATIAAHicXdBNSsNAHAXwl35iA0UQXYnMShfS9GPZA7T7LgIu03SSpkwzYTIt1BN4Ak/gKTyAeCxfw39jZkjymzcvAwmAW/wgwHUEGDb36+jQQ3GXGot79L24jxCP4gHzF/EIr4jEIe7wxhOC3g2TMYy4Q7+Lu/SHuEd/ivt4wJd4wPxbPEKMX3GI5+DJFGaSn4qNzk8mcbKSR6xdXdhSzaOZJGtdapd4vVPbi6rP+cL7TGXOHtXKll4bY1Xl7EGnPtp7Xy2n00zyKLVHfkHBa4IcJ2oD3cgggWvt/V/FbDrUlEUJhTn/0azVWbNTNr0Ens8de1tceK9xZmfB1CPjOmPH4kitmvOubcNpmVTN3oFJyjzCvnmrwhJTzqzVj9jiSX911FjeAAB4nG3HMRKCMBBA0f0giiKi4DU8k0V2GWbIZDOh4PoWWvq6J5V8If9NVNQcaDhyouXMhY4rPTcG7jwYmXhKq8Wz+p762aNaeYXom2n3m2dLTVgsrCgFJ7OTmIkYbwIbC6vIB7WmFfAAAA==") format("woff");\n}';const i=document.querySelector("head link[rel=stylesheet], head style");i?document.head.insertBefore(e,i):document.head.appendChild(e)}(),u=!0),i?i.appendChild(this.domElement):e&&(this.domElement.classList.add("autoPlace"),document.body.appendChild(this.domElement)),n&&this.domElement.style.setProperty("--width",n+"px"),this._closeFolders=s,this.domElement.addEventListener("keydown",(t=>t.stopPropagation())),this.domElement.addEventListener("keyup",(t=>t.stopPropagation()))}add(t,i,n,r,s){if(Object(n)===n)return new d(this,t,i,n);const o=t[i];switch(typeof o){case"number":return new h(this,t,i,n,r,s);case"boolean":return new e(this,t,i);case"string":return new c(this,t,i);case"function":return new l(this,t,i)}console.error("gui.add failed\n\tproperty:",i,"\n\tobject:",t,"\n\tvalue:",o)}addColor(t,e,i=1){return new a(this,t,e,i)}addFolder(t){const e=new p({parent:this,title:t});return this.root._closeFolders&&e.close(),e}load(t,e=!0){return t.controllers&&this.controllers.forEach((e=>{e instanceof l||e._name in t.controllers&&e.load(t.controllers[e._name])})),e&&t.folders&&this.folders.forEach((e=>{e._title in t.folders&&e.load(t.folders[e._title])})),this}save(t=!0){const e={controllers:{},folders:{}};return this.controllers.forEach((t=>{if(!(t instanceof l)){if(t._name in e.controllers)throw new Error(`Cannot save GUI with duplicate property "${t._name}"`);e.controllers[t._name]=t.save()}})),t&&this.folders.forEach((t=>{if(t._title in e.folders)throw new Error(`Cannot save GUI with duplicate folder "${t._title}"`);e.folders[t._title]=t.save()})),e}open(t=!0){return this._setClosed(!t),this.$title.setAttribute("aria-expanded",!this._closed),this.domElement.classList.toggle("closed",this._closed),this}close(){return this.open(!1)}_setClosed(t){this._closed!==t&&(this._closed=t,this._callOnOpenClose(this))}show(t=!0){return this._hidden=!t,this.domElement.style.display=this._hidden?"none":"",this}hide(){return this.show(!1)}openAnimated(t=!0){return this._setClosed(!t),this.$title.setAttribute("aria-expanded",!this._closed),requestAnimationFrame((()=>{const e=this.$children.clientHeight;this.$children.style.height=e+"px",this.domElement.classList.add("transition");const i=t=>{t.target===this.$children&&(this.$children.style.height="",this.domElement.classList.remove("transition"),this.$children.removeEventListener("transitionend",i))};this.$children.addEventListener("transitionend",i);const n=t?this.$children.scrollHeight:0;this.domElement.classList.toggle("closed",!t),requestAnimationFrame((()=>{this.$children.style.height=n+"px"}))})),this}title(t){return this._title=t,this.$title.innerHTML=t,this}reset(t=!0){return(t?this.controllersRecursive():this.controllers).forEach((t=>t.reset())),this}onChange(t){return this._onChange=t,this}_callOnChange(t){this.parent&&this.parent._callOnChange(t),void 0!==this._onChange&&this._onChange.call(this,{object:t.object,property:t.property,value:t.getValue(),controller:t})}onFinishChange(t){return this._onFinishChange=t,this}_callOnFinishChange(t){this.parent&&this.parent._callOnFinishChange(t),void 0!==this._onFinishChange&&this._onFinishChange.call(this,{object:t.object,property:t.property,value:t.getValue(),controller:t})}onOpenClose(t){return this._onOpenClose=t,this}_callOnOpenClose(t){this.parent&&this.parent._callOnOpenClose(t),void 0!==this._onOpenClose&&this._onOpenClose.call(this,t)}destroy(){this.parent&&(this.parent.children.splice(this.parent.children.indexOf(this),1),this.parent.folders.splice(this.parent.folders.indexOf(this),1)),this.domElement.parentElement&&this.domElement.parentElement.removeChild(this.domElement),Array.from(this.children).forEach((t=>t.destroy()))}controllersRecursive(){let t=Array.from(this.controllers);return this.folders.forEach((e=>{t=t.concat(e.controllersRecursive())})),t}foldersRecursive(){let t=Array.from(this.folders);return this.folders.forEach((e=>{t=t.concat(e.foldersRecursive())})),t}}const g=p;class m{constructor(t,e,i,n){this.index=t,this.duration=e,this.resolve=i,this.callback=n,this.accumulator=0}fireCallback(){const t=(e=this.accumulator/this.duration,Math.max(0,Math.min(1,e)));var e;return this.callback(t),t}}class v{constructor(){this.cache=[]}create(t,e){return i=this,n=void 0,s=function*(){return new Promise((i=>{const n=this.cache.length,r=new m(n,t,i,e);this.cache.push(r)}))},new((r=void 0)||(r=Promise))((function(t,e){function o(t){try{l(s.next(t))}catch(t){e(t)}}function a(t){try{l(s.throw(t))}catch(t){e(t)}}function l(e){var i;e.done?t(e.value):(i=e.value,i instanceof r?i:new r((function(t){t(i)}))).then(o,a)}l((s=s.apply(i,n||[])).next())}));var i,n,r,s}timestep(t){for(let e=this.cache.length-1;e>=0;--e){const i=this.cache[e];this.cache[e].fireCallback()>=1?(i.resolve(),this.cache=this.cache.filter((t=>t!==i))):i.accumulator+=t}}}class f{constructor(t,e,i){var n;this.gl=t,this.uniforms={};const r=t.createProgram();if(!r)throw new Error;if(this.program=r,t.attachShader(this.program,e),t.attachShader(this.program,i),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))throw t.getProgramInfoLog(this.program);const s=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<s;e++){const i=null===(n=t.getActiveUniform(this.program,e))||void 0===n?void 0:n.name;i&&(this.uniforms[i]=t.getUniformLocation(this.program,i))}}bind(){this.gl.useProgram(this.program)}}function b(t,e,i){const n=t.createShader(e);if(t.shaderSource(n,i),t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS))throw t.getShaderInfoLog(n);return n}function y(t,e,i,n,r,s,o,a){t.activeTexture(t.TEXTURE0+e);const l=t.createTexture();t.bindTexture(t.TEXTURE_2D,l),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,a),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,a),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texImage2D(t.TEXTURE_2D,0,r,i,n,0,s,o,null);const h=t.createFramebuffer();return t.bindFramebuffer(t.FRAMEBUFFER,h),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,l,0),{width:1/i,height:1/n,texture:l,framebuffer:h,textId:e}}function x(t,e,i,n,r,s,o,a){let l=y(t,e,i,n,r,s,o,a),h=y(t,e+1,i,n,r,s,o,a);return{get read(){return l},get write(){return h},swap:()=>{const t=l;l=h,h=t}}}const A={densityDissipation:.98,velocityDissipation:.99,pressureDissipation:.8,pressureIterations:25,curl:30,splatRadius:.0015};class w{constructor(t,e){this.game=t,this.config=Object.assign(Object.assign({},A),e);const{canvas:i,gl:n}=function(){const t=document.createElement("canvas");Object.assign(t.style,{position:"absolute",left:0,top:0,width:"100%",height:"100%"});const e=t.getContext("webgl2",{alpha:!0});return e.clearColor(0,0,0,1),e.getExtension("EXT_color_buffer_float"),e.getExtension("OES_texture_float_linear"),e.bindBuffer(e.ARRAY_BUFFER,e.createBuffer()),e.bufferData(e.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),e.STATIC_DRAW),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,e.createBuffer()),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,0,2,3]),e.STATIC_DRAW),e.vertexAttribPointer(0,2,e.FLOAT,!1,0,0),e.enableVertexAttribArray(0),{canvas:t,gl:e}}();this.canvas=i,this.gl=n,this.programs=function(t){const e={},i=b(t,t.VERTEX_SHADER,"precision highp float;precision mediump sampler2D;attribute vec2 aPosition;varying vec2 vUv;varying vec2 vL;varying vec2 vR;varying vec2 vT;varying vec2 vB;uniform vec2 texelSize;void main(){vUv=aPosition*0.5+0.5;vL=vUv-vec2(texelSize.x,0.);vR=vUv+vec2(texelSize.x,0.);vT=vUv+vec2(0.,texelSize.y);vB=vUv-vec2(0.,texelSize.y);gl_Position=vec4(aPosition,0.,1.);}"),n=b(t,t.FRAGMENT_SHADER,"precision highp float;precision mediump sampler2D;varying vec2 vUv;uniform sampler2D uTexture;uniform float value;void main(){gl_FragColor=value*texture2D(uTexture,vUv);}"),r=b(t,t.FRAGMENT_SHADER,"precision highp float;precision mediump sampler2D;varying vec2 vUv;uniform sampler2D uTexture;void main(){vec3 c=texture2D(uTexture,vUv).rgb;float a=max(c.r,max(c.g,c.b));gl_FragColor=vec4(c,a);}"),s=b(t,t.FRAGMENT_SHADER,"precision highp float;precision mediump sampler2D;varying vec2 vUv;uniform sampler2D uTarget;uniform float aspectRatio;uniform vec3 color;uniform vec2 point;uniform float radius;void main(){vec2 p=vUv-point.xy;p.x*=aspectRatio;vec3 splat=exp(-dot(p,p)/radius)*color;vec3 base=texture2D(uTarget,vUv).xyz;gl_FragColor=vec4(base+splat,1.);}"),o=b(t,t.FRAGMENT_SHADER,"precision highp float;precision mediump sampler2D;varying vec2 vUv;uniform sampler2D uVelocity;uniform sampler2D uSource;uniform vec2 texelSize;uniform float dt;uniform float dissipation;void main(){vec2 coord=vUv-dt*texture2D(uVelocity,vUv).xy*texelSize;gl_FragColor=dissipation*texture2D(uSource,coord);gl_FragColor.a=1.;}"),a=b(t,t.FRAGMENT_SHADER,"precision highp float;precision mediump sampler2D;varying vec2 vUv;varying vec2 vL;varying vec2 vR;varying vec2 vT;varying vec2 vB;uniform sampler2D uVelocity;vec2 sampleVelocity(in vec2 uv){vec2 multiplier=vec2(1.,1.);if(uv.x<0.){uv.x=0.;multiplier.x=-1.;}if(uv.x>1.){uv.x=1.;multiplier.x=-1.;}if(uv.y<0.){uv.y=0.;multiplier.y=-1.;}if(uv.y>1.){uv.y=1.;multiplier.y=-1.;}return multiplier*texture2D(uVelocity,uv).xy;}void main(){float L=sampleVelocity(vL).x;float R=sampleVelocity(vR).x;float T=sampleVelocity(vT).y;float B=sampleVelocity(vB).y;float div=0.5*(R-L+T-B);gl_FragColor=vec4(div,0.,0.,1.);}"),l=b(t,t.FRAGMENT_SHADER,"precision highp float;precision mediump sampler2D;varying vec2 vUv;varying vec2 vL;varying vec2 vR;varying vec2 vT;varying vec2 vB;uniform sampler2D uVelocity;void main(){float L=texture2D(uVelocity,vL).y;float R=texture2D(uVelocity,vR).y;float T=texture2D(uVelocity,vT).x;float B=texture2D(uVelocity,vB).x;float vorticity=R-L-T+B;gl_FragColor=vec4(vorticity,0.,0.,1.);}"),h=b(t,t.FRAGMENT_SHADER,"precision highp float;precision mediump sampler2D;varying vec2 vUv;varying vec2 vT;varying vec2 vB;uniform sampler2D uVelocity;uniform sampler2D uCurl;uniform float curl;uniform float dt;void main(){float T=texture2D(uCurl,vT).x;float B=texture2D(uCurl,vB).x;float C=texture2D(uCurl,vUv).x;vec2 force=vec2(abs(T)-abs(B),0.);force*=1./length(force+0.00001)*curl*C;vec2 vel=texture2D(uVelocity,vUv).xy;gl_FragColor=vec4(vel+force*dt,0.,1.);}"),d=b(t,t.FRAGMENT_SHADER,"precision highp float;precision mediump sampler2D;varying vec2 vUv;varying vec2 vL;varying vec2 vR;varying vec2 vT;varying vec2 vB;uniform sampler2D uPressure;uniform sampler2D uDivergence;vec2 boundary(in vec2 uv){uv=min(max(uv,0.),1.);return uv;}void main(){float L=texture2D(uPressure,boundary(vL)).x;float R=texture2D(uPressure,boundary(vR)).x;float T=texture2D(uPressure,boundary(vT)).x;float B=texture2D(uPressure,boundary(vB)).x;float C=texture2D(uPressure,vUv).x;float divergence=texture2D(uDivergence,vUv).x;float pressure=(L+R+B+T-divergence)*0.25;gl_FragColor=vec4(pressure,0.,0.,1.);}"),c=b(t,t.FRAGMENT_SHADER,"precision highp float;precision mediump sampler2D;varying vec2 vUv;varying vec2 vL;varying vec2 vR;varying vec2 vT;varying vec2 vB;uniform sampler2D uPressure;uniform sampler2D uVelocity;vec2 boundary(in vec2 uv){uv=min(max(uv,0.),1.);return uv;}void main(){float L=texture2D(uPressure,boundary(vL)).x;float R=texture2D(uPressure,boundary(vR)).x;float T=texture2D(uPressure,boundary(vT)).x;float B=texture2D(uPressure,boundary(vB)).x;vec2 velocity=texture2D(uVelocity,vUv).xy;velocity.xy-=vec2(R-L,T-B);gl_FragColor=vec4(velocity,0.,1.);}");return e.clear=new f(t,i,n),e.display=new f(t,i,r),e.splat=new f(t,i,s),e.advection=new f(t,i,o),e.divergence=new f(t,i,a),e.curl=new f(t,i,l),e.vorticity=new f(t,i,h),e.pressure=new f(t,i,d),e.gradienSubtract=new f(t,i,c),e}(n),this.textureHeight=0,this.textureWidth=0,this.framebuffers={},this.mouseSplat=this.makeSplat(),this.splats=[],document.body.appendChild(this.canvas),this.setListeners()}reset(){this.initFramebuffers(),this.splats=[]}emitSplats(t,e=3e3,i=3e3){return n=this,r=void 0,o=function*(){this.splats=t,yield this.game.tweenRunner.create(e,(e=>{t.forEach((t=>{e<t.emitTime&&(t.moved=!0)}))})),yield this.game.tweenRunner.create(i,(()=>{}))},new((s=void 0)||(s=Promise))((function(t,e){function i(t){try{l(o.next(t))}catch(t){e(t)}}function a(t){try{l(o.throw(t))}catch(t){e(t)}}function l(e){var n;e.done?t(e.value):(n=e.value,n instanceof s?n:new s((function(t){t(n)}))).then(i,a)}l((o=o.apply(n,r||[])).next())}));var n,r,s,o}makeSplat(){return{x:0,y:0,dx:0,dy:0,emitTime:1,moved:!1,down:!1,color:[0,0,0]}}timestep(t){this.update(t)}resizeCanvas(){const{canvas:t}=this;if(t.width!==t.clientWidth||t.height!==t.clientHeight){t.width=t.clientWidth,t.height=t.clientHeight;const{textureWidth:i,textureHeight:n}={textureWidth:(e=this.gl).drawingBufferWidth>>1,textureHeight:e.drawingBufferHeight>>1};this.textureWidth=i,this.textureHeight=n,this.initFramebuffers()}var e}initFramebuffers(){Object.assign(this.framebuffers,function(t,e,i){const n={},r=t.HALF_FLOAT,s={if:t.RGBA16F,f:t.RGBA},o={if:t.RG16F,f:t.RG},a={if:t.R16F,f:t.RED};return n.velocity=x(t,0,e,i,o.if,o.f,r,t.LINEAR),n.density=x(t,2,e,i,s.if,s.f,r,t.LINEAR),n.divergence=x(t,4,e,i,a.if,a.f,r,t.NEAREST),n.curl=x(t,6,e,i,a.if,a.f,r,t.NEAREST),n.pressure=x(t,8,e,i,a.if,a.f,r,t.NEAREST),n}(this.gl,this.textureWidth,this.textureHeight))}blit(t){const{gl:e}=this;e.bindFramebuffer(e.FRAMEBUFFER,t),e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)}splat(t,e,i,n,r){const{gl:s,programs:o,canvas:a,framebuffers:l}=this,{splat:h}=o;h.bind(),s.uniform1i(h.uniforms.uTarget,l.velocity.read.textId),s.uniform1f(h.uniforms.aspectRatio,a.width/a.height),s.uniform2f(h.uniforms.point,t/a.width,1-e/a.height),s.uniform3f(h.uniforms.color,i,-n,1),s.uniform1f(h.uniforms.radius,this.config.splatRadius),this.blit(l.velocity.write.framebuffer),l.velocity.swap(),s.uniform1i(h.uniforms.uTarget,l.density.read.textId),s.uniform3f(h.uniforms.color,.3*r[0],.3*r[1],.3*r[2]),this.blit(l.density.write.framebuffer),l.density.swap()}update(t){const{gl:e,textureWidth:i,textureHeight:n,programs:r,framebuffers:s,mouseSplat:o}=this;this.resizeCanvas(),e.viewport(0,0,i,n),r.advection.bind(),e.uniform2f(r.advection.uniforms.texelSize,s.velocity.read.width,s.velocity.read.height),e.uniform1i(r.advection.uniforms.uVelocity,s.velocity.read.textId),e.uniform1i(r.advection.uniforms.uSource,s.velocity.read.textId),e.uniform1f(r.advection.uniforms.dt,t),e.uniform1f(r.advection.uniforms.dissipation,this.config.velocityDissipation),this.blit(s.velocity.write.framebuffer),s.velocity.swap(),e.uniform1i(r.advection.uniforms.uVelocity,s.velocity.read.textId),e.uniform1i(r.advection.uniforms.uSource,s.density.read.textId),e.uniform1f(r.advection.uniforms.dissipation,this.config.densityDissipation),this.blit(s.density.write.framebuffer),s.density.swap(),o.moved&&(o.moved=!1,this.splat(o.x,o.y,o.dx,o.dy,o.color)),this.splats.forEach((t=>{t.moved&&(t.moved=!1,this.splat(t.x,t.y,t.dx,t.dy,t.color))})),r.curl.bind(),e.uniform2f(r.curl.uniforms.texelSize,1/i,1/n),e.uniform1i(r.curl.uniforms.uVelocity,s.velocity.read.textId),this.blit(s.curl.read.framebuffer),r.vorticity.bind(),e.uniform2f(r.vorticity.uniforms.texelSize,1/i,1/n),e.uniform1i(r.vorticity.uniforms.uVelocity,s.velocity.read.textId),e.uniform1i(r.vorticity.uniforms.uCurl,s.curl.read.textId),e.uniform1f(r.vorticity.uniforms.curl,this.config.curl),e.uniform1f(r.vorticity.uniforms.dt,t),this.blit(s.velocity.write.framebuffer),s.velocity.swap(),r.divergence.bind(),e.uniform2f(r.divergence.uniforms.texelSize,1/i,1/n),e.uniform1i(r.divergence.uniforms.uVelocity,s.velocity.read.textId),this.blit(s.divergence.read.framebuffer),r.clear.bind(),e.bindTexture(e.TEXTURE_2D,s.pressure.read.texture),e.uniform1i(r.clear.uniforms.uTexture,s.pressure.read.textId),e.uniform1f(r.clear.uniforms.value,this.config.pressureDissipation),this.blit(s.pressure.write.framebuffer),s.pressure.swap(),r.pressure.bind(),e.uniform2f(r.pressure.uniforms.texelSize,1/i,1/n),e.uniform1i(r.pressure.uniforms.uDivergence,s.divergence.read.textId),e.uniform1i(r.pressure.uniforms.uPressure,s.pressure.read.textId);for(let t=0;t<this.config.pressureIterations;t++)e.bindTexture(e.TEXTURE_2D,s.pressure.read.texture),this.blit(s.pressure.write.framebuffer),s.pressure.swap();r.gradienSubtract.bind(),e.uniform2f(r.gradienSubtract.uniforms.texelSize,1/i,1/n),e.uniform1i(r.gradienSubtract.uniforms.uPressure,s.pressure.read.textId),e.uniform1i(r.gradienSubtract.uniforms.uVelocity,s.velocity.read.textId),this.blit(s.velocity.write.framebuffer),s.velocity.swap(),e.viewport(0,0,e.drawingBufferWidth,e.drawingBufferHeight),r.display.bind(),e.uniform1i(r.display.uniforms.uTexture,s.density.read.textId),this.blit(null)}setListeners(){const{canvas:t,mouseSplat:e}=this;t.addEventListener("mousemove",(t=>{e.moved=e.down,e.dx=10*(t.offsetX-e.x),e.dy=10*(t.offsetY-e.y),e.x=t.offsetX,e.y=t.offsetY})),t.addEventListener("mousedown",(()=>{e.down=!0,e.color=[Math.random()+.2,Math.random()+.2,Math.random()+.2]})),window.addEventListener("mouseup",(()=>{e.down=!1})),t.addEventListener("touchmove",(t=>{t.preventDefault(),e.moved=e.down,e.dx=10*(t.targetTouches[0].pageX-e.x),e.dy=10*(t.targetTouches[0].pageY-e.y),e.x=t.targetTouches[0].pageX,e.y=t.targetTouches[0].pageY}),!1),t.addEventListener("touchstart",(t=>{t.preventDefault(),e.down=!0,e.x=t.targetTouches[0].pageX,e.y=t.targetTouches[0].pageY,e.color=[Math.random()+.2,Math.random()+.2,Math.random()+.2]})),window.addEventListener("touchend",(()=>{e.down=!1}))}}var _=function(t,e,i,n){return new(i||(i=Promise))((function(r,s){function o(t){try{l(n.next(t))}catch(t){s(t)}}function a(t){try{l(n.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}l((n=n.apply(t,e||[])).next())}))};new class{constructor(){this.reset=()=>{this.resetCounter++,this.fluid.reset(),this.runSplats()},this.update=()=>{const t=Date.now(),e=Math.min(t-this.lastTime,16),i=e/1e3;this.tweenRunner.timestep(e),this.lastTime=t,this.fluid.timestep(i),requestAnimationFrame(this.update)},this.emitTime=3e3,this.waitTime=1e3,this.lastTime=Date.now(),this.splats=[],this.splatsCounter=0,this.resetCounter=0,this.tweenRunner=new v,this.fluid=new w(this),this.gui=this.makeGUI(),this.update(),this.addSplat()}addSplat(){const t=this.fluid.makeSplat();return t.x=Math.round(window.innerWidth*(.25+.5*Math.random())),t.y=Math.round(window.innerHeight*(.25+.5*Math.random())),t.dx=Math.round(100*Math.random()-100),t.dy=Math.round(100*Math.random()-100),t.color=[Math.random(),Math.random(),Math.random()],this.addSplatFolder(t),this.splats.push(t),this.reset(),t}addSplatFolder(t){this.splatsCounter++;const e=this.gui.addFolder("Splat "+this.splatsCounter);e.add(t,"x"),e.add(t,"y"),e.add(t,"dx",-200,200),e.add(t,"dy",-200,200),e.add(t,"emitTime",0,1),e.addColor(t,"color",1);const i={remove:()=>{this.splats=this.splats.filter((e=>e!==t)),this.reset(),e.destroy()}};e.add(i,"remove")}runSplats(){return _(this,void 0,void 0,(function*(){const t=this.resetCounter;yield this.fluid.emitSplats(this.splats,this.emitTime,this.waitTime),t===this.resetCounter&&this.runSplats()}))}makeGUI(){const t=new g,e=this.fluid.config;return t.add(e,"densityDissipation",.8,1.1),t.add(e,"velocityDissipation",.8,1.1),t.add(e,"pressureDissipation",0,1.1),t.add(e,"pressureIterations",0,50),t.add(e,"curl",0,50),t.add(e,"splatRadius",1e-4,.02),t.add(this,"emitTime",0,5e3),t.add(this,"waitTime",0,5e3),t.add(this,"reset"),t.add(this,"addSplat"),t.add(this,"save"),t.add(this,"load"),t}save(){const t={config:this.fluid.config,splats:this.splats},e=document.createElement("a");e.setAttribute("href","data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(t))),e.setAttribute("download","fluid.json"),e.click()}load(){const t=document.createElement("input");t.setAttribute("type","file"),t.setAttribute("multiple","false"),t.setAttribute("accept",".json"),t.click(),t.addEventListener("change",(()=>_(this,void 0,void 0,(function*(){var e;const i=null===(e=t.files)||void 0===e?void 0:e[0];if(i)try{const t=yield i.text(),e=JSON.parse(t);this.splats=e.splats,Object.assign(this.fluid.config,e.config),this.gui.destroy(),this.gui=this.makeGUI(),this.splats.forEach((t=>this.addSplatFolder(t))),this.reset()}catch(t){console.log(t)}}))))}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFLNmMsTUFBTTlHLE9BQ25CK0MsT0FBUTlZLEtBQUs4WSxRQUdYK0UsRUFBU3ZkLFNBQVNDLGNBQWMsS0FDdENzZCxFQUFPdFosYUFBYSxPQUFRLGdDQUFrQ3VaLG1CQUFtQkMsS0FBS0MsVUFBVUosS0FDaEdDLEVBQU90WixhQUFhLFdBQVksY0FDaENzWixFQUFPelAsT0FDWCxDQUVRcEssT0FDSixNQUFNaWEsRUFBUTNkLFNBQVNDLGNBQWMsU0FDckMwZCxFQUFNMVosYUFBYSxPQUFRLFFBQzNCMFosRUFBTTFaLGFBQWEsV0FBWSxTQUMvQjBaLEVBQU0xWixhQUFhLFNBQVUsU0FFN0IwWixFQUFNN1AsUUFDTjZQLEVBQU16WixpQkFBaUIsVUFBVSxJQUFZLHdDQUN6QyxNQUFNMFosRUFBa0IsUUFBWCxFQUFBRCxFQUFNRSxhQUFLLGVBQUcsR0FDM0IsR0FBSUQsRUFDQSxJQUNJLE1BQU1FLFFBQWFGLEVBQUtHLE9BQ2xCVCxFQUFPRyxLQUFLTyxNQUFNRixHQUN4QnBlLEtBQUs4WSxPQUFTOEUsRUFBSzlFLE9BQ25CN1MsT0FBT2dRLE9BQU9qVyxLQUFLNmMsTUFBTTlHLE9BQVE2SCxFQUFLN0gsUUFDdEMvVixLQUFLb2QsSUFBSW5hLFVBQ1RqRCxLQUFLb2QsSUFBTXBkLEtBQUtxZCxVQUNoQnJkLEtBQUs4WSxPQUFPNUwsU0FBUWdMLEdBQVNsWSxLQUFLeWQsZUFBZXZGLEtBQ2pEbFksS0FBS21DLFFBQ1AsTUFBT2dGLEdBQ0w0SCxRQUFRd1AsSUFBSXBYLEdBR3hCLEtBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJsLWZsdWlkLy4vbm9kZV9tb2R1bGVzL2xpbC1ndWkvZGlzdC9saWwtZ3VpLmVzbS5qcyIsIndlYnBhY2s6Ly93ZWJsLWZsdWlkLy4vc3JjL1R3ZWVuLnRzIiwid2VicGFjazovL3dlYmwtZmx1aWQvLi9zcmMvRmx1aWQvR0xQcm9ncmFtLnRzIiwid2VicGFjazovL3dlYmwtZmx1aWQvLi9zcmMvRmx1aWQvZmx1aWRVdGlscy50cyIsIndlYnBhY2s6Ly93ZWJsLWZsdWlkLy4vc3JjL0ZsdWlkL0ZsdWlkLnRzIiwid2VicGFjazovL3dlYmwtZmx1aWQvLi9zcmMvRmx1aWQvc2hhZGVycy9iYXNlVmVydGV4Lmdsc2wiLCJ3ZWJwYWNrOi8vd2VibC1mbHVpZC8uL3NyYy9GbHVpZC9zaGFkZXJzL2NsZWFyLmdsc2wiLCJ3ZWJwYWNrOi8vd2VibC1mbHVpZC8uL3NyYy9GbHVpZC9zaGFkZXJzL2Rpc3BsYXkuZ2xzbCIsIndlYnBhY2s6Ly93ZWJsLWZsdWlkLy4vc3JjL0ZsdWlkL3NoYWRlcnMvc3BsYXQuZ2xzbCIsIndlYnBhY2s6Ly93ZWJsLWZsdWlkLy4vc3JjL0ZsdWlkL3NoYWRlcnMvYWR2ZWN0aW9uLmdsc2wiLCJ3ZWJwYWNrOi8vd2VibC1mbHVpZC8uL3NyYy9GbHVpZC9zaGFkZXJzL2RpdmVyZ2VuY2UuZ2xzbCIsIndlYnBhY2s6Ly93ZWJsLWZsdWlkLy4vc3JjL0ZsdWlkL3NoYWRlcnMvY3VybC5nbHNsIiwid2VicGFjazovL3dlYmwtZmx1aWQvLi9zcmMvRmx1aWQvc2hhZGVycy92b3J0aWNpdHkuZ2xzbCIsIndlYnBhY2s6Ly93ZWJsLWZsdWlkLy4vc3JjL0ZsdWlkL3NoYWRlcnMvcHJlc3N1cmUuZ2xzbCIsIndlYnBhY2s6Ly93ZWJsLWZsdWlkLy4vc3JjL0ZsdWlkL3NoYWRlcnMvZ3JhZGllbnRTdWJ0cmFjdC5nbHNsIiwid2VicGFjazovL3dlYmwtZmx1aWQvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vd2VibC1mbHVpZC8uL3NyYy9HYW1lLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogbGlsLWd1aVxuICogaHR0cHM6Ly9saWwtZ3VpLmdlb3JnZWFsd2F5cy5jb21cbiAqIEB2ZXJzaW9uIDAuMTguMVxuICogQGF1dGhvciBHZW9yZ2UgTWljaGFlbCBCcm93ZXJcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYWxsIGNvbnRyb2xsZXJzLlxuICovXG5jbGFzcyBDb250cm9sbGVyIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyZW50LCBvYmplY3QsIHByb3BlcnR5LCBjbGFzc05hbWUsIHdpZGdldFRhZyA9ICdkaXYnICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIEdVSSB0aGF0IGNvbnRhaW5zIHRoaXMgY29udHJvbGxlci5cblx0XHQgKiBAdHlwZSB7R1VJfVxuXHRcdCAqL1xuXHRcdHRoaXMucGFyZW50ID0gcGFyZW50O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG9iamVjdCB0aGlzIGNvbnRyb2xsZXIgd2lsbCBtb2RpZnkuXG5cdFx0ICogQHR5cGUge29iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLm9iamVjdCA9IG9iamVjdDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBjb250cm9sLlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuXG5cdFx0LyoqXG5cdFx0ICogVXNlZCB0byBkZXRlcm1pbmUgaWYgdGhlIGNvbnRyb2xsZXIgaXMgZGlzYWJsZWQuXG5cdFx0ICogVXNlIGBjb250cm9sbGVyLmRpc2FibGUoIHRydWV8ZmFsc2UgKWAgdG8gbW9kaWZ5IHRoaXMgdmFsdWVcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHR0aGlzLl9kaXNhYmxlZCA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVXNlZCB0byBkZXRlcm1pbmUgaWYgdGhlIENvbnRyb2xsZXIgaXMgaGlkZGVuLlxuXHRcdCAqIFVzZSBgY29udHJvbGxlci5zaG93KClgIG9yIGBjb250cm9sbGVyLmhpZGUoKWAgdG8gY2hhbmdlIHRoaXMuXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICovXG5cdFx0dGhpcy5faGlkZGVuID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdmFsdWUgb2YgYG9iamVjdFsgcHJvcGVydHkgXWAgd2hlbiB0aGUgY29udHJvbGxlciB3YXMgY3JlYXRlZC5cblx0XHQgKiBAdHlwZSB7YW55fVxuXHRcdCAqL1xuXHRcdHRoaXMuaW5pdGlhbFZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG91dGVybW9zdCBjb250YWluZXIgRE9NIGVsZW1lbnQgZm9yIHRoaXMgY29udHJvbGxlci5cblx0XHQgKiBAdHlwZSB7SFRNTEVsZW1lbnR9XG5cdFx0ICovXG5cdFx0dGhpcy5kb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKTtcblx0XHR0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LmFkZCggJ2NvbnRyb2xsZXInICk7XG5cdFx0dGhpcy5kb21FbGVtZW50LmNsYXNzTGlzdC5hZGQoIGNsYXNzTmFtZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIERPTSBlbGVtZW50IHRoYXQgY29udGFpbnMgdGhlIGNvbnRyb2xsZXIncyBuYW1lLlxuXHRcdCAqIEB0eXBlIHtIVE1MRWxlbWVudH1cblx0XHQgKi9cblx0XHR0aGlzLiRuYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKTtcblx0XHR0aGlzLiRuYW1lLmNsYXNzTGlzdC5hZGQoICduYW1lJyApO1xuXG5cdFx0Q29udHJvbGxlci5uZXh0TmFtZUlEID0gQ29udHJvbGxlci5uZXh0TmFtZUlEIHx8IDA7XG5cdFx0dGhpcy4kbmFtZS5pZCA9IGBsaWwtZ3VpLW5hbWUtJHsrK0NvbnRyb2xsZXIubmV4dE5hbWVJRH1gO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIERPTSBlbGVtZW50IHRoYXQgY29udGFpbnMgdGhlIGNvbnRyb2xsZXIncyBcIndpZGdldFwiICh3aGljaCBkaWZmZXJzIGJ5IGNvbnRyb2xsZXIgdHlwZSkuXG5cdFx0ICogQHR5cGUge0hUTUxFbGVtZW50fVxuXHRcdCAqL1xuXHRcdHRoaXMuJHdpZGdldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIHdpZGdldFRhZyApO1xuXHRcdHRoaXMuJHdpZGdldC5jbGFzc0xpc3QuYWRkKCAnd2lkZ2V0JyApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIERPTSBlbGVtZW50IHRoYXQgcmVjZWl2ZXMgdGhlIGRpc2FibGVkIGF0dHJpYnV0ZSB3aGVuIHVzaW5nIGRpc2FibGUoKVxuXHRcdCAqIEB0eXBlIHtIVE1MRWxlbWVudH1cblx0XHQgKi9cblx0XHR0aGlzLiRkaXNhYmxlID0gdGhpcy4kd2lkZ2V0O1xuXG5cdFx0dGhpcy5kb21FbGVtZW50LmFwcGVuZENoaWxkKCB0aGlzLiRuYW1lICk7XG5cdFx0dGhpcy5kb21FbGVtZW50LmFwcGVuZENoaWxkKCB0aGlzLiR3aWRnZXQgKTtcblxuXHRcdHRoaXMucGFyZW50LmNoaWxkcmVuLnB1c2goIHRoaXMgKTtcblx0XHR0aGlzLnBhcmVudC5jb250cm9sbGVycy5wdXNoKCB0aGlzICk7XG5cblx0XHR0aGlzLnBhcmVudC4kY2hpbGRyZW4uYXBwZW5kQ2hpbGQoIHRoaXMuZG9tRWxlbWVudCApO1xuXG5cdFx0dGhpcy5fbGlzdGVuQ2FsbGJhY2sgPSB0aGlzLl9saXN0ZW5DYWxsYmFjay5iaW5kKCB0aGlzICk7XG5cblx0XHR0aGlzLm5hbWUoIHByb3BlcnR5ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBuYW1lIG9mIHRoZSBjb250cm9sbGVyIGFuZCBpdHMgbGFiZWwgaW4gdGhlIEdVSS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcblx0ICogQHJldHVybnMge3RoaXN9XG5cdCAqL1xuXHRuYW1lKCBuYW1lICkge1xuXHRcdC8qKlxuXHRcdCAqIFRoZSBjb250cm9sbGVyJ3MgbmFtZS4gVXNlIGBjb250cm9sbGVyLm5hbWUoICdOYW1lJyApYCB0byBtb2RpZnkgdGhpcyB2YWx1ZS5cblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMuX25hbWUgPSBuYW1lO1xuXHRcdHRoaXMuJG5hbWUuaW5uZXJIVE1MID0gbmFtZTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBQYXNzIGEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW5ldmVyIHRoZSB2YWx1ZSBpcyBtb2RpZmllZCBieSB0aGlzIGNvbnRyb2xsZXIuXG5cdCAqIFRoZSBmdW5jdGlvbiByZWNlaXZlcyB0aGUgbmV3IHZhbHVlIGFzIGl0cyBmaXJzdCBwYXJhbWV0ZXIuIFRoZSB2YWx1ZSBvZiBgdGhpc2Agd2lsbCBiZSB0aGVcblx0ICogY29udHJvbGxlci5cblx0ICpcblx0ICogRm9yIGZ1bmN0aW9uIGNvbnRyb2xsZXJzLCB0aGUgYG9uQ2hhbmdlYCBjYWxsYmFjayB3aWxsIGJlIGZpcmVkIG9uIGNsaWNrLCBhZnRlciB0aGUgZnVuY3Rpb25cblx0ICogZXhlY3V0ZXMuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG5cdCAqIEByZXR1cm5zIHt0aGlzfVxuXHQgKiBAZXhhbXBsZVxuXHQgKiBjb25zdCBjb250cm9sbGVyID0gZ3VpLmFkZCggb2JqZWN0LCAncHJvcGVydHknICk7XG5cdCAqXG5cdCAqIGNvbnRyb2xsZXIub25DaGFuZ2UoIGZ1bmN0aW9uKCB2ICkge1xuXHQgKiBcdGNvbnNvbGUubG9nKCAnVGhlIHZhbHVlIGlzIG5vdyAnICsgdiApO1xuXHQgKiBcdGNvbnNvbGUuYXNzZXJ0KCB0aGlzID09PSBjb250cm9sbGVyICk7XG5cdCAqIH0gKTtcblx0ICovXG5cdG9uQ2hhbmdlKCBjYWxsYmFjayApIHtcblx0XHQvKipcblx0XHQgKiBVc2VkIHRvIGFjY2VzcyB0aGUgZnVuY3Rpb24gYm91bmQgdG8gYG9uQ2hhbmdlYCBldmVudHMuIERvbid0IG1vZGlmeSB0aGlzIHZhbHVlIGRpcmVjdGx5LlxuXHRcdCAqIFVzZSB0aGUgYGNvbnRyb2xsZXIub25DaGFuZ2UoIGNhbGxiYWNrIClgIG1ldGhvZCBpbnN0ZWFkLlxuXHRcdCAqIEB0eXBlIHtGdW5jdGlvbn1cblx0XHQgKi9cblx0XHR0aGlzLl9vbkNoYW5nZSA9IGNhbGxiYWNrO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIENhbGxzIHRoZSBvbkNoYW5nZSBtZXRob2RzIG9mIHRoaXMgY29udHJvbGxlciBhbmQgaXRzIHBhcmVudCBHVUkuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdF9jYWxsT25DaGFuZ2UoKSB7XG5cblx0XHR0aGlzLnBhcmVudC5fY2FsbE9uQ2hhbmdlKCB0aGlzICk7XG5cblx0XHRpZiAoIHRoaXMuX29uQ2hhbmdlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLl9vbkNoYW5nZS5jYWxsKCB0aGlzLCB0aGlzLmdldFZhbHVlKCkgKTtcblx0XHR9XG5cblx0XHR0aGlzLl9jaGFuZ2VkID0gdHJ1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFBhc3MgYSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgYWZ0ZXIgdGhpcyBjb250cm9sbGVyIGhhcyBiZWVuIG1vZGlmaWVkIGFuZCBsb3NlcyBmb2N1cy5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcblx0ICogQHJldHVybnMge3RoaXN9XG5cdCAqIEBleGFtcGxlXG5cdCAqIGNvbnN0IGNvbnRyb2xsZXIgPSBndWkuYWRkKCBvYmplY3QsICdwcm9wZXJ0eScgKTtcblx0ICpcblx0ICogY29udHJvbGxlci5vbkZpbmlzaENoYW5nZSggZnVuY3Rpb24oIHYgKSB7XG5cdCAqIFx0Y29uc29sZS5sb2coICdDaGFuZ2VzIGNvbXBsZXRlOiAnICsgdiApO1xuXHQgKiBcdGNvbnNvbGUuYXNzZXJ0KCB0aGlzID09PSBjb250cm9sbGVyICk7XG5cdCAqIH0gKTtcblx0ICovXG5cdG9uRmluaXNoQ2hhbmdlKCBjYWxsYmFjayApIHtcblx0XHQvKipcblx0XHQgKiBVc2VkIHRvIGFjY2VzcyB0aGUgZnVuY3Rpb24gYm91bmQgdG8gYG9uRmluaXNoQ2hhbmdlYCBldmVudHMuIERvbid0IG1vZGlmeSB0aGlzIHZhbHVlXG5cdFx0ICogZGlyZWN0bHkuIFVzZSB0aGUgYGNvbnRyb2xsZXIub25GaW5pc2hDaGFuZ2UoIGNhbGxiYWNrIClgIG1ldGhvZCBpbnN0ZWFkLlxuXHRcdCAqIEB0eXBlIHtGdW5jdGlvbn1cblx0XHQgKi9cblx0XHR0aGlzLl9vbkZpbmlzaENoYW5nZSA9IGNhbGxiYWNrO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNob3VsZCBiZSBjYWxsZWQgYnkgQ29udHJvbGxlciB3aGVuIGl0cyB3aWRnZXRzIGxvc2UgZm9jdXMuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdF9jYWxsT25GaW5pc2hDaGFuZ2UoKSB7XG5cblx0XHRpZiAoIHRoaXMuX2NoYW5nZWQgKSB7XG5cblx0XHRcdHRoaXMucGFyZW50Ll9jYWxsT25GaW5pc2hDaGFuZ2UoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCB0aGlzLl9vbkZpbmlzaENoYW5nZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLl9vbkZpbmlzaENoYW5nZS5jYWxsKCB0aGlzLCB0aGlzLmdldFZhbHVlKCkgKTtcblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuX2NoYW5nZWQgPSBmYWxzZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGNvbnRyb2xsZXIgYmFjayB0byBpdHMgaW5pdGlhbCB2YWx1ZS5cblx0ICogQHJldHVybnMge3RoaXN9XG5cdCAqL1xuXHRyZXNldCgpIHtcblx0XHR0aGlzLnNldFZhbHVlKCB0aGlzLmluaXRpYWxWYWx1ZSApO1xuXHRcdHRoaXMuX2NhbGxPbkZpbmlzaENoYW5nZSgpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEVuYWJsZXMgdGhpcyBjb250cm9sbGVyLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWRcblx0ICogQHJldHVybnMge3RoaXN9XG5cdCAqIEBleGFtcGxlXG5cdCAqIGNvbnRyb2xsZXIuZW5hYmxlKCk7XG5cdCAqIGNvbnRyb2xsZXIuZW5hYmxlKCBmYWxzZSApOyAvLyBkaXNhYmxlXG5cdCAqIGNvbnRyb2xsZXIuZW5hYmxlKCBjb250cm9sbGVyLl9kaXNhYmxlZCApOyAvLyB0b2dnbGVcblx0ICovXG5cdGVuYWJsZSggZW5hYmxlZCA9IHRydWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZGlzYWJsZSggIWVuYWJsZWQgKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEaXNhYmxlcyB0aGlzIGNvbnRyb2xsZXIuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gZGlzYWJsZWRcblx0ICogQHJldHVybnMge3RoaXN9XG5cdCAqIEBleGFtcGxlXG5cdCAqIGNvbnRyb2xsZXIuZGlzYWJsZSgpO1xuXHQgKiBjb250cm9sbGVyLmRpc2FibGUoIGZhbHNlICk7IC8vIGVuYWJsZVxuXHQgKiBjb250cm9sbGVyLmRpc2FibGUoICFjb250cm9sbGVyLl9kaXNhYmxlZCApOyAvLyB0b2dnbGVcblx0ICovXG5cdGRpc2FibGUoIGRpc2FibGVkID0gdHJ1ZSApIHtcblxuXHRcdGlmICggZGlzYWJsZWQgPT09IHRoaXMuX2Rpc2FibGVkICkgcmV0dXJuIHRoaXM7XG5cblx0XHR0aGlzLl9kaXNhYmxlZCA9IGRpc2FibGVkO1xuXG5cdFx0dGhpcy5kb21FbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoICdkaXNhYmxlZCcsIGRpc2FibGVkICk7XG5cdFx0dGhpcy4kZGlzYWJsZS50b2dnbGVBdHRyaWJ1dGUoICdkaXNhYmxlZCcsIGRpc2FibGVkICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNob3dzIHRoZSBDb250cm9sbGVyIGFmdGVyIGl0J3MgYmVlbiBoaWRkZW4uXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvd1xuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICogQGV4YW1wbGVcblx0ICogY29udHJvbGxlci5zaG93KCk7XG5cdCAqIGNvbnRyb2xsZXIuc2hvdyggZmFsc2UgKTsgLy8gaGlkZVxuXHQgKiBjb250cm9sbGVyLnNob3coIGNvbnRyb2xsZXIuX2hpZGRlbiApOyAvLyB0b2dnbGVcblx0ICovXG5cdHNob3coIHNob3cgPSB0cnVlICkge1xuXG5cdFx0dGhpcy5faGlkZGVuID0gIXNob3c7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IHRoaXMuX2hpZGRlbiA/ICdub25lJyA6ICcnO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBIaWRlcyB0aGUgQ29udHJvbGxlci5cblx0ICogQHJldHVybnMge3RoaXN9XG5cdCAqL1xuXHRoaWRlKCkge1xuXHRcdHJldHVybiB0aGlzLnNob3coIGZhbHNlICk7XG5cdH1cblxuXHQvKipcblx0ICogRGVzdHJveXMgdGhpcyBjb250cm9sbGVyIGFuZCByZXBsYWNlcyBpdCB3aXRoIGEgbmV3IG9wdGlvbiBjb250cm9sbGVyLiBQcm92aWRlZCBhcyBhIG1vcmVcblx0ICogZGVzY3JpcHRpdmUgc3ludGF4IGZvciBgZ3VpLmFkZGAsIGJ1dCBwcmltYXJpbHkgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBkYXQuZ3VpLlxuXHQgKlxuXHQgKiBVc2UgY2F1dGlvbiwgYXMgdGhpcyBtZXRob2Qgd2lsbCBkZXN0cm95IG9sZCByZWZlcmVuY2VzIHRvIHRoaXMgY29udHJvbGxlci4gSXQgd2lsbCBhbHNvXG5cdCAqIGNoYW5nZSBjb250cm9sbGVyIG9yZGVyIGlmIGNhbGxlZCBvdXQgb2Ygc2VxdWVuY2UsIG1vdmluZyB0aGUgb3B0aW9uIGNvbnRyb2xsZXIgdG8gdGhlIGVuZCBvZlxuXHQgKiB0aGUgR1VJLlxuXHQgKiBAZXhhbXBsZVxuXHQgKiAvLyBzYWZlIHVzYWdlXG5cdCAqXG5cdCAqIGd1aS5hZGQoIG9iamVjdDEsICdwcm9wZXJ0eScgKS5vcHRpb25zKCBbICdhJywgJ2InLCAnYycgXSApO1xuXHQgKiBndWkuYWRkKCBvYmplY3QyLCAncHJvcGVydHknICk7XG5cdCAqXG5cdCAqIC8vIGRhbmdlclxuXHQgKlxuXHQgKiBjb25zdCBjID0gZ3VpLmFkZCggb2JqZWN0MSwgJ3Byb3BlcnR5JyApO1xuXHQgKiBndWkuYWRkKCBvYmplY3QyLCAncHJvcGVydHknICk7XG5cdCAqXG5cdCAqIGMub3B0aW9ucyggWyAnYScsICdiJywgJ2MnIF0gKTtcblx0ICogLy8gY29udHJvbGxlciBpcyBub3cgYXQgdGhlIGVuZCBvZiB0aGUgR1VJIGV2ZW4gdGhvdWdoIGl0IHdhcyBhZGRlZCBmaXJzdFxuXHQgKlxuXHQgKiBhc3NlcnQoIGMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YoIGMgKSA9PT0gLTEgKVxuXHQgKiAvLyBjIHJlZmVyZW5jZXMgYSBjb250cm9sbGVyIHRoYXQgbm8gbG9uZ2VyIGV4aXN0c1xuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdHxBcnJheX0gb3B0aW9uc1xuXHQgKiBAcmV0dXJucyB7Q29udHJvbGxlcn1cblx0ICovXG5cdG9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdFx0Y29uc3QgY29udHJvbGxlciA9IHRoaXMucGFyZW50LmFkZCggdGhpcy5vYmplY3QsIHRoaXMucHJvcGVydHksIG9wdGlvbnMgKTtcblx0XHRjb250cm9sbGVyLm5hbWUoIHRoaXMuX25hbWUgKTtcblx0XHR0aGlzLmRlc3Ryb3koKTtcblx0XHRyZXR1cm4gY29udHJvbGxlcjtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBtaW5pbXVtIHZhbHVlLiBPbmx5IHdvcmtzIG9uIG51bWJlciBjb250cm9sbGVycy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IG1pblxuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICovXG5cdG1pbiggbWluICkge1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIG1heGltdW0gdmFsdWUuIE9ubHkgd29ya3Mgb24gbnVtYmVyIGNvbnRyb2xsZXJzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbWF4XG5cdCAqIEByZXR1cm5zIHt0aGlzfVxuXHQgKi9cblx0bWF4KCBtYXggKSB7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogVmFsdWVzIHNldCBieSB0aGlzIGNvbnRyb2xsZXIgd2lsbCBiZSByb3VuZGVkIHRvIG11bHRpcGxlcyBvZiBgc3RlcGAuIE9ubHkgd29ya3Mgb24gbnVtYmVyXG5cdCAqIGNvbnRyb2xsZXJzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3RlcFxuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICovXG5cdHN0ZXAoIHN0ZXAgKSB7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogUm91bmRzIHRoZSBkaXNwbGF5ZWQgdmFsdWUgdG8gYSBmaXhlZCBudW1iZXIgb2YgZGVjaW1hbHMsIHdpdGhvdXQgYWZmZWN0aW5nIHRoZSBhY3R1YWwgdmFsdWVcblx0ICogbGlrZSBgc3RlcCgpYC4gT25seSB3b3JrcyBvbiBudW1iZXIgY29udHJvbGxlcnMuXG5cdCAqIEBleGFtcGxlXG5cdCAqIGd1aS5hZGQoIG9iamVjdCwgJ3Byb3BlcnR5JyApLmxpc3RlbigpLmRlY2ltYWxzKCA0ICk7XG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBkZWNpbWFsc1xuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICovXG5cdGRlY2ltYWxzKCBkZWNpbWFscyApIHtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBDYWxscyBgdXBkYXRlRGlzcGxheSgpYCBldmVyeSBhbmltYXRpb24gZnJhbWUuIFBhc3MgYGZhbHNlYCB0byBzdG9wIGxpc3RlbmluZy5cblx0ICogQHBhcmFtIHtib29sZWFufSBsaXN0ZW5cblx0ICogQHJldHVybnMge3RoaXN9XG5cdCAqL1xuXHRsaXN0ZW4oIGxpc3RlbiA9IHRydWUgKSB7XG5cblx0XHQvKipcblx0XHQgKiBVc2VkIHRvIGRldGVybWluZSBpZiB0aGUgY29udHJvbGxlciBpcyBjdXJyZW50bHkgbGlzdGVuaW5nLiBEb24ndCBtb2RpZnkgdGhpcyB2YWx1ZVxuXHRcdCAqIGRpcmVjdGx5LiBVc2UgdGhlIGBjb250cm9sbGVyLmxpc3RlbiggdHJ1ZXxmYWxzZSApYCBtZXRob2QgaW5zdGVhZC5cblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHR0aGlzLl9saXN0ZW5pbmcgPSBsaXN0ZW47XG5cblx0XHRpZiAoIHRoaXMuX2xpc3RlbkNhbGxiYWNrSUQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGNhbmNlbEFuaW1hdGlvbkZyYW1lKCB0aGlzLl9saXN0ZW5DYWxsYmFja0lEICk7XG5cdFx0XHR0aGlzLl9saXN0ZW5DYWxsYmFja0lEID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5fbGlzdGVuaW5nICkge1xuXHRcdFx0dGhpcy5fbGlzdGVuQ2FsbGJhY2soKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0X2xpc3RlbkNhbGxiYWNrKCkge1xuXG5cdFx0dGhpcy5fbGlzdGVuQ2FsbGJhY2tJRCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSggdGhpcy5fbGlzdGVuQ2FsbGJhY2sgKTtcblxuXHRcdC8vIFRvIHByZXZlbnQgZnJhbWVyYXRlIGxvc3MsIG1ha2Ugc3VyZSB0aGUgdmFsdWUgaGFzIGNoYW5nZWQgYmVmb3JlIHVwZGF0aW5nIHRoZSBkaXNwbGF5LlxuXHRcdC8vIE5vdGU6IHNhdmUoKSBpcyB1c2VkIGhlcmUgaW5zdGVhZCBvZiBnZXRWYWx1ZSgpIG9ubHkgYmVjYXVzZSBvZiBDb2xvckNvbnRyb2xsZXIuIFRoZSAhPT0gb3BlcmF0b3Jcblx0XHQvLyB3b24ndCB3b3JrIGZvciBjb2xvciBvYmplY3RzIG9yIGFycmF5cywgYnV0IENvbG9yQ29udHJvbGxlci5zYXZlKCkgYWx3YXlzIHJldHVybnMgYSBzdHJpbmcuXG5cblx0XHRjb25zdCBjdXJWYWx1ZSA9IHRoaXMuc2F2ZSgpO1xuXG5cdFx0aWYgKCBjdXJWYWx1ZSAhPT0gdGhpcy5fbGlzdGVuUHJldlZhbHVlICkge1xuXHRcdFx0dGhpcy51cGRhdGVEaXNwbGF5KCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fbGlzdGVuUHJldlZhbHVlID0gY3VyVmFsdWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGBvYmplY3RbIHByb3BlcnR5IF1gLlxuXHQgKiBAcmV0dXJucyB7YW55fVxuXHQgKi9cblx0Z2V0VmFsdWUoKSB7XG5cdFx0cmV0dXJuIHRoaXMub2JqZWN0WyB0aGlzLnByb3BlcnR5IF07XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdmFsdWUgb2YgYG9iamVjdFsgcHJvcGVydHkgXWAsIGludm9rZXMgYW55IGBvbkNoYW5nZWAgaGFuZGxlcnMgYW5kIHVwZGF0ZXMgdGhlIGRpc3BsYXkuXG5cdCAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICovXG5cdHNldFZhbHVlKCB2YWx1ZSApIHtcblx0XHR0aGlzLm9iamVjdFsgdGhpcy5wcm9wZXJ0eSBdID0gdmFsdWU7XG5cdFx0dGhpcy5fY2FsbE9uQ2hhbmdlKCk7XG5cdFx0dGhpcy51cGRhdGVEaXNwbGF5KCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgZGlzcGxheSB0byBrZWVwIGl0IGluIHN5bmMgd2l0aCB0aGUgY3VycmVudCB2YWx1ZS4gVXNlZnVsIGZvciB1cGRhdGluZyB5b3VyXG5cdCAqIGNvbnRyb2xsZXJzIHdoZW4gdGhlaXIgdmFsdWVzIGhhdmUgYmVlbiBtb2RpZmllZCBvdXRzaWRlIG9mIHRoZSBHVUkuXG5cdCAqIEByZXR1cm5zIHt0aGlzfVxuXHQgKi9cblx0dXBkYXRlRGlzcGxheSgpIHtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdGxvYWQoIHZhbHVlICkge1xuXHRcdHRoaXMuc2V0VmFsdWUoIHZhbHVlICk7XG5cdFx0dGhpcy5fY2FsbE9uRmluaXNoQ2hhbmdlKCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRzYXZlKCkge1xuXHRcdHJldHVybiB0aGlzLmdldFZhbHVlKCk7XG5cdH1cblxuXHQvKipcblx0ICogRGVzdHJveXMgdGhpcyBjb250cm9sbGVyIGFuZCByZW1vdmVzIGl0IGZyb20gdGhlIHBhcmVudCBHVUkuXG5cdCAqL1xuXHRkZXN0cm95KCkge1xuXHRcdHRoaXMubGlzdGVuKCBmYWxzZSApO1xuXHRcdHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZSggdGhpcy5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZiggdGhpcyApLCAxICk7XG5cdFx0dGhpcy5wYXJlbnQuY29udHJvbGxlcnMuc3BsaWNlKCB0aGlzLnBhcmVudC5jb250cm9sbGVycy5pbmRleE9mKCB0aGlzICksIDEgKTtcblx0XHR0aGlzLnBhcmVudC4kY2hpbGRyZW4ucmVtb3ZlQ2hpbGQoIHRoaXMuZG9tRWxlbWVudCApO1xuXHR9XG5cbn1cblxuY2xhc3MgQm9vbGVhbkNvbnRyb2xsZXIgZXh0ZW5kcyBDb250cm9sbGVyIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyZW50LCBvYmplY3QsIHByb3BlcnR5ICkge1xuXG5cdFx0c3VwZXIoIHBhcmVudCwgb2JqZWN0LCBwcm9wZXJ0eSwgJ2Jvb2xlYW4nLCAnbGFiZWwnICk7XG5cblx0XHR0aGlzLiRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdpbnB1dCcgKTtcblx0XHR0aGlzLiRpbnB1dC5zZXRBdHRyaWJ1dGUoICd0eXBlJywgJ2NoZWNrYm94JyApO1xuXHRcdHRoaXMuJGlucHV0LnNldEF0dHJpYnV0ZSggJ2FyaWEtbGFiZWxsZWRieScsIHRoaXMuJG5hbWUuaWQgKTtcblxuXHRcdHRoaXMuJHdpZGdldC5hcHBlbmRDaGlsZCggdGhpcy4kaW5wdXQgKTtcblxuXHRcdHRoaXMuJGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoICdjaGFuZ2UnLCAoKSA9PiB7XG5cdFx0XHR0aGlzLnNldFZhbHVlKCB0aGlzLiRpbnB1dC5jaGVja2VkICk7XG5cdFx0XHR0aGlzLl9jYWxsT25GaW5pc2hDaGFuZ2UoKTtcblx0XHR9ICk7XG5cblx0XHR0aGlzLiRkaXNhYmxlID0gdGhpcy4kaW5wdXQ7XG5cblx0XHR0aGlzLnVwZGF0ZURpc3BsYXkoKTtcblxuXHR9XG5cblx0dXBkYXRlRGlzcGxheSgpIHtcblx0XHR0aGlzLiRpbnB1dC5jaGVja2VkID0gdGhpcy5nZXRWYWx1ZSgpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQ29sb3JTdHJpbmcoIHN0cmluZyApIHtcblxuXHRsZXQgbWF0Y2gsIHJlc3VsdDtcblxuXHRpZiAoIG1hdGNoID0gc3RyaW5nLm1hdGNoKCAvKCN8MHgpPyhbYS1mMC05XXs2fSkvaSApICkge1xuXG5cdFx0cmVzdWx0ID0gbWF0Y2hbIDIgXTtcblxuXHR9IGVsc2UgaWYgKCBtYXRjaCA9IHN0cmluZy5tYXRjaCggL3JnYlxcKFxccyooXFxkKilcXHMqLFxccyooXFxkKilcXHMqLFxccyooXFxkKilcXHMqXFwpLyApICkge1xuXG5cdFx0cmVzdWx0ID0gcGFyc2VJbnQoIG1hdGNoWyAxIF0gKS50b1N0cmluZyggMTYgKS5wYWRTdGFydCggMiwgMCApXG5cdFx0XHQrIHBhcnNlSW50KCBtYXRjaFsgMiBdICkudG9TdHJpbmcoIDE2ICkucGFkU3RhcnQoIDIsIDAgKVxuXHRcdFx0KyBwYXJzZUludCggbWF0Y2hbIDMgXSApLnRvU3RyaW5nKCAxNiApLnBhZFN0YXJ0KCAyLCAwICk7XG5cblx0fSBlbHNlIGlmICggbWF0Y2ggPSBzdHJpbmcubWF0Y2goIC9eIz8oW2EtZjAtOV0pKFthLWYwLTldKShbYS1mMC05XSkkL2kgKSApIHtcblxuXHRcdHJlc3VsdCA9IG1hdGNoWyAxIF0gKyBtYXRjaFsgMSBdICsgbWF0Y2hbIDIgXSArIG1hdGNoWyAyIF0gKyBtYXRjaFsgMyBdICsgbWF0Y2hbIDMgXTtcblxuXHR9XG5cblx0aWYgKCByZXN1bHQgKSB7XG5cdFx0cmV0dXJuICcjJyArIHJlc3VsdDtcblx0fVxuXG5cdHJldHVybiBmYWxzZTtcblxufVxuXG5jb25zdCBTVFJJTkcgPSB7XG5cdGlzUHJpbWl0aXZlOiB0cnVlLFxuXHRtYXRjaDogdiA9PiB0eXBlb2YgdiA9PT0gJ3N0cmluZycsXG5cdGZyb21IZXhTdHJpbmc6IG5vcm1hbGl6ZUNvbG9yU3RyaW5nLFxuXHR0b0hleFN0cmluZzogbm9ybWFsaXplQ29sb3JTdHJpbmdcbn07XG5cbmNvbnN0IElOVCA9IHtcblx0aXNQcmltaXRpdmU6IHRydWUsXG5cdG1hdGNoOiB2ID0+IHR5cGVvZiB2ID09PSAnbnVtYmVyJyxcblx0ZnJvbUhleFN0cmluZzogc3RyaW5nID0+IHBhcnNlSW50KCBzdHJpbmcuc3Vic3RyaW5nKCAxICksIDE2ICksXG5cdHRvSGV4U3RyaW5nOiB2YWx1ZSA9PiAnIycgKyB2YWx1ZS50b1N0cmluZyggMTYgKS5wYWRTdGFydCggNiwgMCApXG59O1xuXG5jb25zdCBBUlJBWSA9IHtcblx0aXNQcmltaXRpdmU6IGZhbHNlLFxuXHRcblx0Ly8gVGhlIGFycm93IGZ1bmN0aW9uIGlzIGhlcmUgdG8gYXBwZWFzZSB0cmVlIHNoYWtlcnMgbGlrZSBlc2J1aWxkIG9yIHdlYnBhY2suXG5cdC8vIFNlZSBodHRwczovL2VzYnVpbGQuZ2l0aHViLmlvL2FwaS8jdHJlZS1zaGFraW5nXG5cdG1hdGNoOiB2ID0+IEFycmF5LmlzQXJyYXkoIHYgKSxcblx0XG5cdGZyb21IZXhTdHJpbmcoIHN0cmluZywgdGFyZ2V0LCByZ2JTY2FsZSA9IDEgKSB7XG5cblx0XHRjb25zdCBpbnQgPSBJTlQuZnJvbUhleFN0cmluZyggc3RyaW5nICk7XG5cblx0XHR0YXJnZXRbIDAgXSA9ICggaW50ID4+IDE2ICYgMjU1ICkgLyAyNTUgKiByZ2JTY2FsZTtcblx0XHR0YXJnZXRbIDEgXSA9ICggaW50ID4+IDggJiAyNTUgKSAvIDI1NSAqIHJnYlNjYWxlO1xuXHRcdHRhcmdldFsgMiBdID0gKCBpbnQgJiAyNTUgKSAvIDI1NSAqIHJnYlNjYWxlO1xuXG5cdH0sXG5cdHRvSGV4U3RyaW5nKCBbIHIsIGcsIGIgXSwgcmdiU2NhbGUgPSAxICkge1xuXG5cdFx0cmdiU2NhbGUgPSAyNTUgLyByZ2JTY2FsZTtcblxuXHRcdGNvbnN0IGludCA9ICggciAqIHJnYlNjYWxlICkgPDwgMTYgXlxuXHRcdFx0KCBnICogcmdiU2NhbGUgKSA8PCA4IF5cblx0XHRcdCggYiAqIHJnYlNjYWxlICkgPDwgMDtcblxuXHRcdHJldHVybiBJTlQudG9IZXhTdHJpbmcoIGludCApO1xuXG5cdH1cbn07XG5cbmNvbnN0IE9CSkVDVCA9IHtcblx0aXNQcmltaXRpdmU6IGZhbHNlLFxuXHRtYXRjaDogdiA9PiBPYmplY3QoIHYgKSA9PT0gdixcblx0ZnJvbUhleFN0cmluZyggc3RyaW5nLCB0YXJnZXQsIHJnYlNjYWxlID0gMSApIHtcblxuXHRcdGNvbnN0IGludCA9IElOVC5mcm9tSGV4U3RyaW5nKCBzdHJpbmcgKTtcblxuXHRcdHRhcmdldC5yID0gKCBpbnQgPj4gMTYgJiAyNTUgKSAvIDI1NSAqIHJnYlNjYWxlO1xuXHRcdHRhcmdldC5nID0gKCBpbnQgPj4gOCAmIDI1NSApIC8gMjU1ICogcmdiU2NhbGU7XG5cdFx0dGFyZ2V0LmIgPSAoIGludCAmIDI1NSApIC8gMjU1ICogcmdiU2NhbGU7XG5cblx0fSxcblx0dG9IZXhTdHJpbmcoIHsgciwgZywgYiB9LCByZ2JTY2FsZSA9IDEgKSB7XG5cblx0XHRyZ2JTY2FsZSA9IDI1NSAvIHJnYlNjYWxlO1xuXG5cdFx0Y29uc3QgaW50ID0gKCByICogcmdiU2NhbGUgKSA8PCAxNiBeXG5cdFx0XHQoIGcgKiByZ2JTY2FsZSApIDw8IDggXlxuXHRcdFx0KCBiICogcmdiU2NhbGUgKSA8PCAwO1xuXG5cdFx0cmV0dXJuIElOVC50b0hleFN0cmluZyggaW50ICk7XG5cblx0fVxufTtcblxuY29uc3QgRk9STUFUUyA9IFsgU1RSSU5HLCBJTlQsIEFSUkFZLCBPQkpFQ1QgXTtcblxuZnVuY3Rpb24gZ2V0Q29sb3JGb3JtYXQoIHZhbHVlICkge1xuXHRyZXR1cm4gRk9STUFUUy5maW5kKCBmb3JtYXQgPT4gZm9ybWF0Lm1hdGNoKCB2YWx1ZSApICk7XG59XG5cbmNsYXNzIENvbG9yQ29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJlbnQsIG9iamVjdCwgcHJvcGVydHksIHJnYlNjYWxlICkge1xuXG5cdFx0c3VwZXIoIHBhcmVudCwgb2JqZWN0LCBwcm9wZXJ0eSwgJ2NvbG9yJyApO1xuXG5cdFx0dGhpcy4kaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnaW5wdXQnICk7XG5cdFx0dGhpcy4kaW5wdXQuc2V0QXR0cmlidXRlKCAndHlwZScsICdjb2xvcicgKTtcblx0XHR0aGlzLiRpbnB1dC5zZXRBdHRyaWJ1dGUoICd0YWJpbmRleCcsIC0xICk7XG5cdFx0dGhpcy4kaW5wdXQuc2V0QXR0cmlidXRlKCAnYXJpYS1sYWJlbGxlZGJ5JywgdGhpcy4kbmFtZS5pZCApO1xuXG5cdFx0dGhpcy4kdGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdpbnB1dCcgKTtcblx0XHR0aGlzLiR0ZXh0LnNldEF0dHJpYnV0ZSggJ3R5cGUnLCAndGV4dCcgKTtcblx0XHR0aGlzLiR0ZXh0LnNldEF0dHJpYnV0ZSggJ3NwZWxsY2hlY2snLCAnZmFsc2UnICk7XG5cdFx0dGhpcy4kdGV4dC5zZXRBdHRyaWJ1dGUoICdhcmlhLWxhYmVsbGVkYnknLCB0aGlzLiRuYW1lLmlkICk7XG5cblx0XHR0aGlzLiRkaXNwbGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKTtcblx0XHR0aGlzLiRkaXNwbGF5LmNsYXNzTGlzdC5hZGQoICdkaXNwbGF5JyApO1xuXG5cdFx0dGhpcy4kZGlzcGxheS5hcHBlbmRDaGlsZCggdGhpcy4kaW5wdXQgKTtcblx0XHR0aGlzLiR3aWRnZXQuYXBwZW5kQ2hpbGQoIHRoaXMuJGRpc3BsYXkgKTtcblx0XHR0aGlzLiR3aWRnZXQuYXBwZW5kQ2hpbGQoIHRoaXMuJHRleHQgKTtcblxuXHRcdHRoaXMuX2Zvcm1hdCA9IGdldENvbG9yRm9ybWF0KCB0aGlzLmluaXRpYWxWYWx1ZSApO1xuXHRcdHRoaXMuX3JnYlNjYWxlID0gcmdiU2NhbGU7XG5cblx0XHR0aGlzLl9pbml0aWFsVmFsdWVIZXhTdHJpbmcgPSB0aGlzLnNhdmUoKTtcblx0XHR0aGlzLl90ZXh0Rm9jdXNlZCA9IGZhbHNlO1xuXG5cdFx0dGhpcy4kaW5wdXQuYWRkRXZlbnRMaXN0ZW5lciggJ2lucHV0JywgKCkgPT4ge1xuXHRcdFx0dGhpcy5fc2V0VmFsdWVGcm9tSGV4U3RyaW5nKCB0aGlzLiRpbnB1dC52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHRcdHRoaXMuJGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoICdibHVyJywgKCkgPT4ge1xuXHRcdFx0dGhpcy5fY2FsbE9uRmluaXNoQ2hhbmdlKCk7XG5cdFx0fSApO1xuXG5cdFx0dGhpcy4kdGV4dC5hZGRFdmVudExpc3RlbmVyKCAnaW5wdXQnLCAoKSA9PiB7XG5cdFx0XHRjb25zdCB0cnlQYXJzZSA9IG5vcm1hbGl6ZUNvbG9yU3RyaW5nKCB0aGlzLiR0ZXh0LnZhbHVlICk7XG5cdFx0XHRpZiAoIHRyeVBhcnNlICkge1xuXHRcdFx0XHR0aGlzLl9zZXRWYWx1ZUZyb21IZXhTdHJpbmcoIHRyeVBhcnNlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0dGhpcy4kdGV4dC5hZGRFdmVudExpc3RlbmVyKCAnZm9jdXMnLCAoKSA9PiB7XG5cdFx0XHR0aGlzLl90ZXh0Rm9jdXNlZCA9IHRydWU7XG5cdFx0XHR0aGlzLiR0ZXh0LnNlbGVjdCgpO1xuXHRcdH0gKTtcblxuXHRcdHRoaXMuJHRleHQuYWRkRXZlbnRMaXN0ZW5lciggJ2JsdXInLCAoKSA9PiB7XG5cdFx0XHR0aGlzLl90ZXh0Rm9jdXNlZCA9IGZhbHNlO1xuXHRcdFx0dGhpcy51cGRhdGVEaXNwbGF5KCk7XG5cdFx0XHR0aGlzLl9jYWxsT25GaW5pc2hDaGFuZ2UoKTtcblx0XHR9ICk7XG5cblx0XHR0aGlzLiRkaXNhYmxlID0gdGhpcy4kdGV4dDtcblxuXHRcdHRoaXMudXBkYXRlRGlzcGxheSgpO1xuXG5cdH1cblxuXHRyZXNldCgpIHtcblx0XHR0aGlzLl9zZXRWYWx1ZUZyb21IZXhTdHJpbmcoIHRoaXMuX2luaXRpYWxWYWx1ZUhleFN0cmluZyApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0X3NldFZhbHVlRnJvbUhleFN0cmluZyggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2Zvcm1hdC5pc1ByaW1pdGl2ZSApIHtcblxuXHRcdFx0Y29uc3QgbmV3VmFsdWUgPSB0aGlzLl9mb3JtYXQuZnJvbUhleFN0cmluZyggdmFsdWUgKTtcblx0XHRcdHRoaXMuc2V0VmFsdWUoIG5ld1ZhbHVlICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLl9mb3JtYXQuZnJvbUhleFN0cmluZyggdmFsdWUsIHRoaXMuZ2V0VmFsdWUoKSwgdGhpcy5fcmdiU2NhbGUgKTtcblx0XHRcdHRoaXMuX2NhbGxPbkNoYW5nZSgpO1xuXHRcdFx0dGhpcy51cGRhdGVEaXNwbGF5KCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHNhdmUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2Zvcm1hdC50b0hleFN0cmluZyggdGhpcy5nZXRWYWx1ZSgpLCB0aGlzLl9yZ2JTY2FsZSApO1xuXHR9XG5cblx0bG9hZCggdmFsdWUgKSB7XG5cdFx0dGhpcy5fc2V0VmFsdWVGcm9tSGV4U3RyaW5nKCB2YWx1ZSApO1xuXHRcdHRoaXMuX2NhbGxPbkZpbmlzaENoYW5nZSgpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0dXBkYXRlRGlzcGxheSgpIHtcblx0XHR0aGlzLiRpbnB1dC52YWx1ZSA9IHRoaXMuX2Zvcm1hdC50b0hleFN0cmluZyggdGhpcy5nZXRWYWx1ZSgpLCB0aGlzLl9yZ2JTY2FsZSApO1xuXHRcdGlmICggIXRoaXMuX3RleHRGb2N1c2VkICkge1xuXHRcdFx0dGhpcy4kdGV4dC52YWx1ZSA9IHRoaXMuJGlucHV0LnZhbHVlLnN1YnN0cmluZyggMSApO1xuXHRcdH1cblx0XHR0aGlzLiRkaXNwbGF5LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHRoaXMuJGlucHV0LnZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cbn1cblxuY2xhc3MgRnVuY3Rpb25Db250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlciB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmVudCwgb2JqZWN0LCBwcm9wZXJ0eSApIHtcblxuXHRcdHN1cGVyKCBwYXJlbnQsIG9iamVjdCwgcHJvcGVydHksICdmdW5jdGlvbicgKTtcblxuXHRcdC8vIEJ1dHRvbnMgYXJlIHRoZSBvbmx5IGNhc2Ugd2hlcmUgd2lkZ2V0IGNvbnRhaW5zIG5hbWVcblx0XHR0aGlzLiRidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnYnV0dG9uJyApO1xuXHRcdHRoaXMuJGJ1dHRvbi5hcHBlbmRDaGlsZCggdGhpcy4kbmFtZSApO1xuXHRcdHRoaXMuJHdpZGdldC5hcHBlbmRDaGlsZCggdGhpcy4kYnV0dG9uICk7XG5cblx0XHR0aGlzLiRidXR0b24uYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgZSA9PiB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR0aGlzLmdldFZhbHVlKCkuY2FsbCggdGhpcy5vYmplY3QgKTtcblx0XHRcdHRoaXMuX2NhbGxPbkNoYW5nZSgpO1xuXHRcdH0gKTtcblxuXHRcdC8vIGVuYWJsZXMgOmFjdGl2ZSBwc2V1ZG8gY2xhc3Mgb24gbW9iaWxlXG5cdFx0dGhpcy4kYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoICd0b3VjaHN0YXJ0JywgKCkgPT4ge30sIHsgcGFzc2l2ZTogdHJ1ZSB9ICk7XG5cblx0XHR0aGlzLiRkaXNhYmxlID0gdGhpcy4kYnV0dG9uO1xuXG5cdH1cblxufVxuXG5jbGFzcyBOdW1iZXJDb250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlciB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmVudCwgb2JqZWN0LCBwcm9wZXJ0eSwgbWluLCBtYXgsIHN0ZXAgKSB7XG5cblx0XHRzdXBlciggcGFyZW50LCBvYmplY3QsIHByb3BlcnR5LCAnbnVtYmVyJyApO1xuXG5cdFx0dGhpcy5faW5pdElucHV0KCk7XG5cblx0XHR0aGlzLm1pbiggbWluICk7XG5cdFx0dGhpcy5tYXgoIG1heCApO1xuXG5cdFx0Y29uc3Qgc3RlcEV4cGxpY2l0ID0gc3RlcCAhPT0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuc3RlcCggc3RlcEV4cGxpY2l0ID8gc3RlcCA6IHRoaXMuX2dldEltcGxpY2l0U3RlcCgpLCBzdGVwRXhwbGljaXQgKTtcblxuXHRcdHRoaXMudXBkYXRlRGlzcGxheSgpO1xuXG5cdH1cblxuXHRkZWNpbWFscyggZGVjaW1hbHMgKSB7XG5cdFx0dGhpcy5fZGVjaW1hbHMgPSBkZWNpbWFscztcblx0XHR0aGlzLnVwZGF0ZURpc3BsYXkoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdG1pbiggbWluICkge1xuXHRcdHRoaXMuX21pbiA9IG1pbjtcblx0XHR0aGlzLl9vblVwZGF0ZU1pbk1heCgpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0bWF4KCBtYXggKSB7XG5cdFx0dGhpcy5fbWF4ID0gbWF4O1xuXHRcdHRoaXMuX29uVXBkYXRlTWluTWF4KCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRzdGVwKCBzdGVwLCBleHBsaWNpdCA9IHRydWUgKSB7XG5cdFx0dGhpcy5fc3RlcCA9IHN0ZXA7XG5cdFx0dGhpcy5fc3RlcEV4cGxpY2l0ID0gZXhwbGljaXQ7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHR1cGRhdGVEaXNwbGF5KCkge1xuXG5cdFx0Y29uc3QgdmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XG5cblx0XHRpZiAoIHRoaXMuX2hhc1NsaWRlciApIHtcblxuXHRcdFx0bGV0IHBlcmNlbnQgPSAoIHZhbHVlIC0gdGhpcy5fbWluICkgLyAoIHRoaXMuX21heCAtIHRoaXMuX21pbiApO1xuXHRcdFx0cGVyY2VudCA9IE1hdGgubWF4KCAwLCBNYXRoLm1pbiggcGVyY2VudCwgMSApICk7XG5cblx0XHRcdHRoaXMuJGZpbGwuc3R5bGUud2lkdGggPSBwZXJjZW50ICogMTAwICsgJyUnO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAhdGhpcy5faW5wdXRGb2N1c2VkICkge1xuXHRcdFx0dGhpcy4kaW5wdXQudmFsdWUgPSB0aGlzLl9kZWNpbWFscyA9PT0gdW5kZWZpbmVkID8gdmFsdWUgOiB2YWx1ZS50b0ZpeGVkKCB0aGlzLl9kZWNpbWFscyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRfaW5pdElucHV0KCkge1xuXG5cdFx0dGhpcy4kaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnaW5wdXQnICk7XG5cdFx0dGhpcy4kaW5wdXQuc2V0QXR0cmlidXRlKCAndHlwZScsICdudW1iZXInICk7XG5cdFx0dGhpcy4kaW5wdXQuc2V0QXR0cmlidXRlKCAnc3RlcCcsICdhbnknICk7XG5cdFx0dGhpcy4kaW5wdXQuc2V0QXR0cmlidXRlKCAnYXJpYS1sYWJlbGxlZGJ5JywgdGhpcy4kbmFtZS5pZCApO1xuXG5cdFx0dGhpcy4kd2lkZ2V0LmFwcGVuZENoaWxkKCB0aGlzLiRpbnB1dCApO1xuXG5cdFx0dGhpcy4kZGlzYWJsZSA9IHRoaXMuJGlucHV0O1xuXG5cdFx0Y29uc3Qgb25JbnB1dCA9ICgpID0+IHtcblxuXHRcdFx0bGV0IHZhbHVlID0gcGFyc2VGbG9hdCggdGhpcy4kaW5wdXQudmFsdWUgKTtcblxuXHRcdFx0aWYgKCBpc05hTiggdmFsdWUgKSApIHJldHVybjtcblxuXHRcdFx0aWYgKCB0aGlzLl9zdGVwRXhwbGljaXQgKSB7XG5cdFx0XHRcdHZhbHVlID0gdGhpcy5fc25hcCggdmFsdWUgKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5zZXRWYWx1ZSggdGhpcy5fY2xhbXAoIHZhbHVlICkgKTtcblxuXHRcdH07XG5cblx0XHQvLyBLZXlzICYgbW91c2Ugd2hlZWxcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdGNvbnN0IGluY3JlbWVudCA9IGRlbHRhID0+IHtcblxuXHRcdFx0Y29uc3QgdmFsdWUgPSBwYXJzZUZsb2F0KCB0aGlzLiRpbnB1dC52YWx1ZSApO1xuXG5cdFx0XHRpZiAoIGlzTmFOKCB2YWx1ZSApICkgcmV0dXJuO1xuXG5cdFx0XHR0aGlzLl9zbmFwQ2xhbXBTZXRWYWx1ZSggdmFsdWUgKyBkZWx0YSApO1xuXG5cdFx0XHQvLyBGb3JjZSB0aGUgaW5wdXQgdG8gdXBkYXRlRGlzcGxheSB3aGVuIGl0J3MgZm9jdXNlZFxuXHRcdFx0dGhpcy4kaW5wdXQudmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XG5cblx0XHR9O1xuXG5cdFx0Y29uc3Qgb25LZXlEb3duID0gZSA9PiB7XG5cdFx0XHRpZiAoIGUuY29kZSA9PT0gJ0VudGVyJyApIHtcblx0XHRcdFx0dGhpcy4kaW5wdXQuYmx1cigpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBlLmNvZGUgPT09ICdBcnJvd1VwJyApIHtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRpbmNyZW1lbnQoIHRoaXMuX3N0ZXAgKiB0aGlzLl9hcnJvd0tleU11bHRpcGxpZXIoIGUgKSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBlLmNvZGUgPT09ICdBcnJvd0Rvd24nICkge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGluY3JlbWVudCggdGhpcy5fc3RlcCAqIHRoaXMuX2Fycm93S2V5TXVsdGlwbGllciggZSApICogLTEgKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Y29uc3Qgb25XaGVlbCA9IGUgPT4ge1xuXHRcdFx0aWYgKCB0aGlzLl9pbnB1dEZvY3VzZWQgKSB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0aW5jcmVtZW50KCB0aGlzLl9zdGVwICogdGhpcy5fbm9ybWFsaXplTW91c2VXaGVlbCggZSApICk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIFZlcnRpY2FsIGRyYWdcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdGxldCB0ZXN0aW5nRm9yVmVydGljYWxEcmFnID0gZmFsc2UsXG5cdFx0XHRpbml0Q2xpZW50WCxcblx0XHRcdGluaXRDbGllbnRZLFxuXHRcdFx0cHJldkNsaWVudFksXG5cdFx0XHRpbml0VmFsdWUsXG5cdFx0XHRkcmFnRGVsdGE7XG5cblx0XHQvLyBPbmNlIHRoZSBtb3VzZSBpcyBkcmFnZ2VkIG1vcmUgdGhhbiBEUkFHX1RIUkVTSCBweCBvbiBhbnkgYXhpcywgd2UgZGVjaWRlXG5cdFx0Ly8gb24gdGhlIHVzZXIncyBpbnRlbnQ6IGhvcml6b250YWwgbWVhbnMgaGlnaGxpZ2h0LCB2ZXJ0aWNhbCBtZWFucyBkcmFnLlxuXHRcdGNvbnN0IERSQUdfVEhSRVNIID0gNTtcblxuXHRcdGNvbnN0IG9uTW91c2VEb3duID0gZSA9PiB7XG5cblx0XHRcdGluaXRDbGllbnRYID0gZS5jbGllbnRYO1xuXHRcdFx0aW5pdENsaWVudFkgPSBwcmV2Q2xpZW50WSA9IGUuY2xpZW50WTtcblx0XHRcdHRlc3RpbmdGb3JWZXJ0aWNhbERyYWcgPSB0cnVlO1xuXG5cdFx0XHRpbml0VmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XG5cdFx0XHRkcmFnRGVsdGEgPSAwO1xuXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlICk7XG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNldXAnLCBvbk1vdXNlVXAgKTtcblxuXHRcdH07XG5cblx0XHRjb25zdCBvbk1vdXNlTW92ZSA9IGUgPT4ge1xuXG5cdFx0XHRpZiAoIHRlc3RpbmdGb3JWZXJ0aWNhbERyYWcgKSB7XG5cblx0XHRcdFx0Y29uc3QgZHggPSBlLmNsaWVudFggLSBpbml0Q2xpZW50WDtcblx0XHRcdFx0Y29uc3QgZHkgPSBlLmNsaWVudFkgLSBpbml0Q2xpZW50WTtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBkeSApID4gRFJBR19USFJFU0ggKSB7XG5cblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0dGhpcy4kaW5wdXQuYmx1cigpO1xuXHRcdFx0XHRcdHRlc3RpbmdGb3JWZXJ0aWNhbERyYWcgPSBmYWxzZTtcblx0XHRcdFx0XHR0aGlzLl9zZXREcmFnZ2luZ1N0eWxlKCB0cnVlLCAndmVydGljYWwnICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggTWF0aC5hYnMoIGR4ICkgPiBEUkFHX1RIUkVTSCApIHtcblxuXHRcdFx0XHRcdG9uTW91c2VVcCgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGlzIGlzbid0IGFuIGVsc2Ugc28gdGhhdCB0aGUgZmlyc3QgbW92ZSBjb3VudHMgdG93YXJkcyBkcmFnRGVsdGFcblx0XHRcdGlmICggIXRlc3RpbmdGb3JWZXJ0aWNhbERyYWcgKSB7XG5cblx0XHRcdFx0Y29uc3QgZHkgPSBlLmNsaWVudFkgLSBwcmV2Q2xpZW50WTtcblxuXHRcdFx0XHRkcmFnRGVsdGEgLT0gZHkgKiB0aGlzLl9zdGVwICogdGhpcy5fYXJyb3dLZXlNdWx0aXBsaWVyKCBlICk7XG5cblx0XHRcdFx0Ly8gQ2xhbXAgZHJhZ0RlbHRhIHNvIHdlIGRvbid0IGhhdmUgJ2RlYWQgc3BhY2UnIGFmdGVyIGRyYWdnaW5nIHBhc3QgYm91bmRzLlxuXHRcdFx0XHQvLyBXZSdyZSBva2F5IHdpdGggdGhlIGZhY3QgdGhhdCBib3VuZHMgY2FuIGJlIHVuZGVmaW5lZCBoZXJlLlxuXHRcdFx0XHRpZiAoIGluaXRWYWx1ZSArIGRyYWdEZWx0YSA+IHRoaXMuX21heCApIHtcblx0XHRcdFx0XHRkcmFnRGVsdGEgPSB0aGlzLl9tYXggLSBpbml0VmFsdWU7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIGluaXRWYWx1ZSArIGRyYWdEZWx0YSA8IHRoaXMuX21pbiApIHtcblx0XHRcdFx0XHRkcmFnRGVsdGEgPSB0aGlzLl9taW4gLSBpbml0VmFsdWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLl9zbmFwQ2xhbXBTZXRWYWx1ZSggaW5pdFZhbHVlICsgZHJhZ0RlbHRhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cHJldkNsaWVudFkgPSBlLmNsaWVudFk7XG5cblx0XHR9O1xuXG5cdFx0Y29uc3Qgb25Nb3VzZVVwID0gKCkgPT4ge1xuXHRcdFx0dGhpcy5fc2V0RHJhZ2dpbmdTdHlsZSggZmFsc2UsICd2ZXJ0aWNhbCcgKTtcblx0XHRcdHRoaXMuX2NhbGxPbkZpbmlzaENoYW5nZSgpO1xuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZW1vdmUnLCBvbk1vdXNlTW92ZSApO1xuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZXVwJywgb25Nb3VzZVVwICk7XG5cdFx0fTtcblxuXHRcdC8vIEZvY3VzIHN0YXRlICYgb25GaW5pc2hDaGFuZ2Vcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdGNvbnN0IG9uRm9jdXMgPSAoKSA9PiB7XG5cdFx0XHR0aGlzLl9pbnB1dEZvY3VzZWQgPSB0cnVlO1xuXHRcdH07XG5cblx0XHRjb25zdCBvbkJsdXIgPSAoKSA9PiB7XG5cdFx0XHR0aGlzLl9pbnB1dEZvY3VzZWQgPSBmYWxzZTtcblx0XHRcdHRoaXMudXBkYXRlRGlzcGxheSgpO1xuXHRcdFx0dGhpcy5fY2FsbE9uRmluaXNoQ2hhbmdlKCk7XG5cdFx0fTtcblxuXHRcdHRoaXMuJGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoICdpbnB1dCcsIG9uSW5wdXQgKTtcblx0XHR0aGlzLiRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIG9uS2V5RG93biApO1xuXHRcdHRoaXMuJGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoICd3aGVlbCcsIG9uV2hlZWwsIHsgcGFzc2l2ZTogZmFsc2UgfSApO1xuXHRcdHRoaXMuJGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZWRvd24nLCBvbk1vdXNlRG93biApO1xuXHRcdHRoaXMuJGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoICdmb2N1cycsIG9uRm9jdXMgKTtcblx0XHR0aGlzLiRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCAnYmx1cicsIG9uQmx1ciApO1xuXG5cdH1cblxuXHRfaW5pdFNsaWRlcigpIHtcblxuXHRcdHRoaXMuX2hhc1NsaWRlciA9IHRydWU7XG5cblx0XHQvLyBCdWlsZCBET01cblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdHRoaXMuJHNsaWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICk7XG5cdFx0dGhpcy4kc2xpZGVyLmNsYXNzTGlzdC5hZGQoICdzbGlkZXInICk7XG5cblx0XHR0aGlzLiRmaWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKTtcblx0XHR0aGlzLiRmaWxsLmNsYXNzTGlzdC5hZGQoICdmaWxsJyApO1xuXG5cdFx0dGhpcy4kc2xpZGVyLmFwcGVuZENoaWxkKCB0aGlzLiRmaWxsICk7XG5cdFx0dGhpcy4kd2lkZ2V0Lmluc2VydEJlZm9yZSggdGhpcy4kc2xpZGVyLCB0aGlzLiRpbnB1dCApO1xuXG5cdFx0dGhpcy5kb21FbGVtZW50LmNsYXNzTGlzdC5hZGQoICdoYXNTbGlkZXInICk7XG5cblx0XHQvLyBNYXAgY2xpZW50WCB0byB2YWx1ZVxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cdFx0Y29uc3QgbWFwID0gKCB2LCBhLCBiLCBjLCBkICkgPT4ge1xuXHRcdFx0cmV0dXJuICggdiAtIGEgKSAvICggYiAtIGEgKSAqICggZCAtIGMgKSArIGM7XG5cdFx0fTtcblxuXHRcdGNvbnN0IHNldFZhbHVlRnJvbVggPSBjbGllbnRYID0+IHtcblx0XHRcdGNvbnN0IHJlY3QgPSB0aGlzLiRzbGlkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0XHRsZXQgdmFsdWUgPSBtYXAoIGNsaWVudFgsIHJlY3QubGVmdCwgcmVjdC5yaWdodCwgdGhpcy5fbWluLCB0aGlzLl9tYXggKTtcblx0XHRcdHRoaXMuX3NuYXBDbGFtcFNldFZhbHVlKCB2YWx1ZSApO1xuXHRcdH07XG5cblx0XHQvLyBNb3VzZSBkcmFnXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0XHRjb25zdCBtb3VzZURvd24gPSBlID0+IHtcblx0XHRcdHRoaXMuX3NldERyYWdnaW5nU3R5bGUoIHRydWUgKTtcblx0XHRcdHNldFZhbHVlRnJvbVgoIGUuY2xpZW50WCApO1xuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZW1vdmUnLCBtb3VzZU1vdmUgKTtcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAnbW91c2V1cCcsIG1vdXNlVXAgKTtcblx0XHR9O1xuXG5cdFx0Y29uc3QgbW91c2VNb3ZlID0gZSA9PiB7XG5cdFx0XHRzZXRWYWx1ZUZyb21YKCBlLmNsaWVudFggKTtcblx0XHR9O1xuXG5cdFx0Y29uc3QgbW91c2VVcCA9ICgpID0+IHtcblx0XHRcdHRoaXMuX2NhbGxPbkZpbmlzaENoYW5nZSgpO1xuXHRcdFx0dGhpcy5fc2V0RHJhZ2dpbmdTdHlsZSggZmFsc2UgKTtcblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2Vtb3ZlJywgbW91c2VNb3ZlICk7XG5cdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNldXAnLCBtb3VzZVVwICk7XG5cdFx0fTtcblxuXHRcdC8vIFRvdWNoIGRyYWdcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdGxldCB0ZXN0aW5nRm9yU2Nyb2xsID0gZmFsc2UsIHByZXZDbGllbnRYLCBwcmV2Q2xpZW50WTtcblxuXHRcdGNvbnN0IGJlZ2luVG91Y2hEcmFnID0gZSA9PiB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR0aGlzLl9zZXREcmFnZ2luZ1N0eWxlKCB0cnVlICk7XG5cdFx0XHRzZXRWYWx1ZUZyb21YKCBlLnRvdWNoZXNbIDAgXS5jbGllbnRYICk7XG5cdFx0XHR0ZXN0aW5nRm9yU2Nyb2xsID0gZmFsc2U7XG5cdFx0fTtcblxuXHRcdGNvbnN0IG9uVG91Y2hTdGFydCA9IGUgPT4ge1xuXG5cdFx0XHRpZiAoIGUudG91Y2hlcy5sZW5ndGggPiAxICkgcmV0dXJuO1xuXG5cdFx0XHQvLyBJZiB3ZSdyZSBpbiBhIHNjcm9sbGFibGUgY29udGFpbmVyLCB3ZSBzaG91bGQgd2FpdCBmb3IgdGhlIGZpcnN0XG5cdFx0XHQvLyB0b3VjaG1vdmUgdG8gc2VlIGlmIHRoZSB1c2VyIGlzIHRyeWluZyB0byBzbGlkZSBvciBzY3JvbGwuXG5cdFx0XHRpZiAoIHRoaXMuX2hhc1Njcm9sbEJhciApIHtcblxuXHRcdFx0XHRwcmV2Q2xpZW50WCA9IGUudG91Y2hlc1sgMCBdLmNsaWVudFg7XG5cdFx0XHRcdHByZXZDbGllbnRZID0gZS50b3VjaGVzWyAwIF0uY2xpZW50WTtcblx0XHRcdFx0dGVzdGluZ0ZvclNjcm9sbCA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB3ZSBjYW4gc2V0IHRoZSB2YWx1ZSBzdHJhaWdodCBhd2F5IG9uIHRvdWNoc3RhcnQuXG5cdFx0XHRcdGJlZ2luVG91Y2hEcmFnKCBlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZSwgeyBwYXNzaXZlOiBmYWxzZSB9ICk7XG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCApO1xuXG5cdFx0fTtcblxuXHRcdGNvbnN0IG9uVG91Y2hNb3ZlID0gZSA9PiB7XG5cblx0XHRcdGlmICggdGVzdGluZ0ZvclNjcm9sbCApIHtcblxuXHRcdFx0XHRjb25zdCBkeCA9IGUudG91Y2hlc1sgMCBdLmNsaWVudFggLSBwcmV2Q2xpZW50WDtcblx0XHRcdFx0Y29uc3QgZHkgPSBlLnRvdWNoZXNbIDAgXS5jbGllbnRZIC0gcHJldkNsaWVudFk7XG5cblx0XHRcdFx0aWYgKCBNYXRoLmFicyggZHggKSA+IE1hdGguYWJzKCBkeSApICkge1xuXG5cdFx0XHRcdFx0Ly8gV2UgbW92ZWQgaG9yaXpvbnRhbGx5LCBzZXQgdGhlIHZhbHVlIGFuZCBzdG9wIGNoZWNraW5nLlxuXHRcdFx0XHRcdGJlZ2luVG91Y2hEcmFnKCBlICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIFRoaXMgd2FzLCBpbiBmYWN0LCBhbiBhdHRlbXB0IHRvIHNjcm9sbC4gQWJvcnQuXG5cdFx0XHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZSApO1xuXHRcdFx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAndG91Y2hlbmQnLCBvblRvdWNoRW5kICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0c2V0VmFsdWVGcm9tWCggZS50b3VjaGVzWyAwIF0uY2xpZW50WCApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0Y29uc3Qgb25Ub3VjaEVuZCA9ICgpID0+IHtcblx0XHRcdHRoaXMuX2NhbGxPbkZpbmlzaENoYW5nZSgpO1xuXHRcdFx0dGhpcy5fc2V0RHJhZ2dpbmdTdHlsZSggZmFsc2UgKTtcblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAndG91Y2htb3ZlJywgb25Ub3VjaE1vdmUgKTtcblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAndG91Y2hlbmQnLCBvblRvdWNoRW5kICk7XG5cdFx0fTtcblxuXHRcdC8vIE1vdXNlIHdoZWVsXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0XHQvLyBXZSBoYXZlIHRvIHVzZSBhIGRlYm91bmNlZCBmdW5jdGlvbiB0byBjYWxsIG9uRmluaXNoQ2hhbmdlIGJlY2F1c2Vcblx0XHQvLyB0aGVyZSdzIG5vIHdheSB0byB0ZWxsIHdoZW4gdGhlIHVzZXIgaXMgXCJkb25lXCIgbW91c2Utd2hlZWxpbmcuXG5cdFx0Y29uc3QgY2FsbE9uRmluaXNoQ2hhbmdlID0gdGhpcy5fY2FsbE9uRmluaXNoQ2hhbmdlLmJpbmQoIHRoaXMgKTtcblx0XHRjb25zdCBXSEVFTF9ERUJPVU5DRV9USU1FID0gNDAwO1xuXHRcdGxldCB3aGVlbEZpbmlzaENoYW5nZVRpbWVvdXQ7XG5cblx0XHRjb25zdCBvbldoZWVsID0gZSA9PiB7XG5cblx0XHRcdC8vIGlnbm9yZSB2ZXJ0aWNhbCB3aGVlbHMgaWYgdGhlcmUncyBhIHNjcm9sbGJhclxuXHRcdFx0Y29uc3QgaXNWZXJ0aWNhbCA9IE1hdGguYWJzKCBlLmRlbHRhWCApIDwgTWF0aC5hYnMoIGUuZGVsdGFZICk7XG5cdFx0XHRpZiAoIGlzVmVydGljYWwgJiYgdGhpcy5faGFzU2Nyb2xsQmFyICkgcmV0dXJuO1xuXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdC8vIHNldCB2YWx1ZVxuXHRcdFx0Y29uc3QgZGVsdGEgPSB0aGlzLl9ub3JtYWxpemVNb3VzZVdoZWVsKCBlICkgKiB0aGlzLl9zdGVwO1xuXHRcdFx0dGhpcy5fc25hcENsYW1wU2V0VmFsdWUoIHRoaXMuZ2V0VmFsdWUoKSArIGRlbHRhICk7XG5cblx0XHRcdC8vIGZvcmNlIHRoZSBpbnB1dCB0byB1cGRhdGVEaXNwbGF5IHdoZW4gaXQncyBmb2N1c2VkXG5cdFx0XHR0aGlzLiRpbnB1dC52YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcblxuXHRcdFx0Ly8gZGVib3VuY2Ugb25GaW5pc2hDaGFuZ2Vcblx0XHRcdGNsZWFyVGltZW91dCggd2hlZWxGaW5pc2hDaGFuZ2VUaW1lb3V0ICk7XG5cdFx0XHR3aGVlbEZpbmlzaENoYW5nZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCBjYWxsT25GaW5pc2hDaGFuZ2UsIFdIRUVMX0RFQk9VTkNFX1RJTUUgKTtcblxuXHRcdH07XG5cblx0XHR0aGlzLiRzbGlkZXIuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlZG93bicsIG1vdXNlRG93biApO1xuXHRcdHRoaXMuJHNsaWRlci5hZGRFdmVudExpc3RlbmVyKCAndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCwgeyBwYXNzaXZlOiBmYWxzZSB9ICk7XG5cdFx0dGhpcy4kc2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoICd3aGVlbCcsIG9uV2hlZWwsIHsgcGFzc2l2ZTogZmFsc2UgfSApO1xuXG5cdH1cblxuXHRfc2V0RHJhZ2dpbmdTdHlsZSggYWN0aXZlLCBheGlzID0gJ2hvcml6b250YWwnICkge1xuXHRcdGlmICggdGhpcy4kc2xpZGVyICkge1xuXHRcdFx0dGhpcy4kc2xpZGVyLmNsYXNzTGlzdC50b2dnbGUoICdhY3RpdmUnLCBhY3RpdmUgKTtcblx0XHR9XG5cdFx0ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QudG9nZ2xlKCAnbGlsLWd1aS1kcmFnZ2luZycsIGFjdGl2ZSApO1xuXHRcdGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnRvZ2dsZSggYGxpbC1ndWktJHtheGlzfWAsIGFjdGl2ZSApO1xuXHR9XG5cblx0X2dldEltcGxpY2l0U3RlcCgpIHtcblxuXHRcdGlmICggdGhpcy5faGFzTWluICYmIHRoaXMuX2hhc01heCApIHtcblx0XHRcdHJldHVybiAoIHRoaXMuX21heCAtIHRoaXMuX21pbiApIC8gMTAwMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gMC4xO1xuXG5cdH1cblxuXHRfb25VcGRhdGVNaW5NYXgoKSB7XG5cblx0XHRpZiAoICF0aGlzLl9oYXNTbGlkZXIgJiYgdGhpcy5faGFzTWluICYmIHRoaXMuX2hhc01heCApIHtcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSB3ZSdyZSBoZWFyaW5nIGFib3V0IG1pbiBhbmQgbWF4XG5cdFx0XHQvLyBhbmQgd2UgaGF2ZW4ndCBleHBsaWNpdGx5IHN0YXRlZCB3aGF0IG91ciBzdGVwIGlzLCBsZXQnc1xuXHRcdFx0Ly8gdXBkYXRlIHRoYXQgdG9vLlxuXHRcdFx0aWYgKCAhdGhpcy5fc3RlcEV4cGxpY2l0ICkge1xuXHRcdFx0XHR0aGlzLnN0ZXAoIHRoaXMuX2dldEltcGxpY2l0U3RlcCgpLCBmYWxzZSApO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9pbml0U2xpZGVyKCk7XG5cdFx0XHR0aGlzLnVwZGF0ZURpc3BsYXkoKTtcblxuXHRcdH1cblxuXHR9XG5cblx0X25vcm1hbGl6ZU1vdXNlV2hlZWwoIGUgKSB7XG5cblx0XHRsZXQgeyBkZWx0YVgsIGRlbHRhWSB9ID0gZTtcblxuXHRcdC8vIFNhZmFyaSBhbmQgQ2hyb21lIHJlcG9ydCB3ZWlyZCBub24taW50ZWdyYWwgdmFsdWVzIGZvciBhIG5vdGNoZWQgd2hlZWwsXG5cdFx0Ly8gYnV0IHN0aWxsIGV4cG9zZSBhY3R1YWwgbGluZXMgc2Nyb2xsZWQgdmlhIHdoZWVsRGVsdGEuIE5vdGNoZWQgd2hlZWxzXG5cdFx0Ly8gc2hvdWxkIGJlaGF2ZSB0aGUgc2FtZSB3YXkgYXMgYXJyb3cga2V5cy5cblx0XHRpZiAoIE1hdGguZmxvb3IoIGUuZGVsdGFZICkgIT09IGUuZGVsdGFZICYmIGUud2hlZWxEZWx0YSApIHtcblx0XHRcdGRlbHRhWCA9IDA7XG5cdFx0XHRkZWx0YVkgPSAtZS53aGVlbERlbHRhIC8gMTIwO1xuXHRcdFx0ZGVsdGFZICo9IHRoaXMuX3N0ZXBFeHBsaWNpdCA/IDEgOiAxMDtcblx0XHR9XG5cblx0XHRjb25zdCB3aGVlbCA9IGRlbHRhWCArIC1kZWx0YVk7XG5cblx0XHRyZXR1cm4gd2hlZWw7XG5cblx0fVxuXG5cdF9hcnJvd0tleU11bHRpcGxpZXIoIGUgKSB7XG5cblx0XHRsZXQgbXVsdCA9IHRoaXMuX3N0ZXBFeHBsaWNpdCA/IDEgOiAxMDtcblxuXHRcdGlmICggZS5zaGlmdEtleSApIHtcblx0XHRcdG11bHQgKj0gMTA7XG5cdFx0fSBlbHNlIGlmICggZS5hbHRLZXkgKSB7XG5cdFx0XHRtdWx0IC89IDEwO1xuXHRcdH1cblxuXHRcdHJldHVybiBtdWx0O1xuXG5cdH1cblxuXHRfc25hcCggdmFsdWUgKSB7XG5cblx0XHQvLyBUaGlzIHdvdWxkIGJlIHRoZSBsb2dpY2FsIHdheSB0byBkbyB0aGluZ3MsIGJ1dCBmbG9hdGluZyBwb2ludCBlcnJvcnMuXG5cdFx0Ly8gcmV0dXJuIE1hdGgucm91bmQoIHZhbHVlIC8gdGhpcy5fc3RlcCApICogdGhpcy5fc3RlcDtcblxuXHRcdC8vIFVzaW5nIGludmVyc2Ugc3RlcCBzb2x2ZXMgYSBsb3Qgb2YgdGhlbSwgYnV0IG5vdCBhbGxcblx0XHQvLyBjb25zdCBpbnZlcnNlU3RlcCA9IDEgLyB0aGlzLl9zdGVwO1xuXHRcdC8vIHJldHVybiBNYXRoLnJvdW5kKCB2YWx1ZSAqIGludmVyc2VTdGVwICkgLyBpbnZlcnNlU3RlcDtcblxuXHRcdC8vIE5vdCBoYXBweSBhYm91dCB0aGlzLCBidXQgaGF2ZW4ndCBzZWVuIGl0IGJyZWFrLlxuXHRcdGNvbnN0IHIgPSBNYXRoLnJvdW5kKCB2YWx1ZSAvIHRoaXMuX3N0ZXAgKSAqIHRoaXMuX3N0ZXA7XG5cdFx0cmV0dXJuIHBhcnNlRmxvYXQoIHIudG9QcmVjaXNpb24oIDE1ICkgKTtcblxuXHR9XG5cblx0X2NsYW1wKCB2YWx1ZSApIHtcblx0XHQvLyBlaXRoZXIgY29uZGl0aW9uIGlzIGZhbHNlIGlmIG1pbiBvciBtYXggaXMgdW5kZWZpbmVkXG5cdFx0aWYgKCB2YWx1ZSA8IHRoaXMuX21pbiApIHZhbHVlID0gdGhpcy5fbWluO1xuXHRcdGlmICggdmFsdWUgPiB0aGlzLl9tYXggKSB2YWx1ZSA9IHRoaXMuX21heDtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblxuXHRfc25hcENsYW1wU2V0VmFsdWUoIHZhbHVlICkge1xuXHRcdHRoaXMuc2V0VmFsdWUoIHRoaXMuX2NsYW1wKCB0aGlzLl9zbmFwKCB2YWx1ZSApICkgKTtcblx0fVxuXG5cdGdldCBfaGFzU2Nyb2xsQmFyKCkge1xuXHRcdGNvbnN0IHJvb3QgPSB0aGlzLnBhcmVudC5yb290LiRjaGlsZHJlbjtcblx0XHRyZXR1cm4gcm9vdC5zY3JvbGxIZWlnaHQgPiByb290LmNsaWVudEhlaWdodDtcblx0fVxuXG5cdGdldCBfaGFzTWluKCkge1xuXHRcdHJldHVybiB0aGlzLl9taW4gIT09IHVuZGVmaW5lZDtcblx0fVxuXG5cdGdldCBfaGFzTWF4KCkge1xuXHRcdHJldHVybiB0aGlzLl9tYXggIT09IHVuZGVmaW5lZDtcblx0fVxuXG59XG5cbmNsYXNzIE9wdGlvbkNvbnRyb2xsZXIgZXh0ZW5kcyBDb250cm9sbGVyIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyZW50LCBvYmplY3QsIHByb3BlcnR5LCBvcHRpb25zICkge1xuXG5cdFx0c3VwZXIoIHBhcmVudCwgb2JqZWN0LCBwcm9wZXJ0eSwgJ29wdGlvbicgKTtcblxuXHRcdHRoaXMuJHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdzZWxlY3QnICk7XG5cdFx0dGhpcy4kc2VsZWN0LnNldEF0dHJpYnV0ZSggJ2FyaWEtbGFiZWxsZWRieScsIHRoaXMuJG5hbWUuaWQgKTtcblxuXHRcdHRoaXMuJGRpc3BsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApO1xuXHRcdHRoaXMuJGRpc3BsYXkuY2xhc3NMaXN0LmFkZCggJ2Rpc3BsYXknICk7XG5cblx0XHR0aGlzLl92YWx1ZXMgPSBBcnJheS5pc0FycmF5KCBvcHRpb25zICkgPyBvcHRpb25zIDogT2JqZWN0LnZhbHVlcyggb3B0aW9ucyApO1xuXHRcdHRoaXMuX25hbWVzID0gQXJyYXkuaXNBcnJheSggb3B0aW9ucyApID8gb3B0aW9ucyA6IE9iamVjdC5rZXlzKCBvcHRpb25zICk7XG5cblx0XHR0aGlzLl9uYW1lcy5mb3JFYWNoKCBuYW1lID0+IHtcblx0XHRcdGNvbnN0ICRvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnb3B0aW9uJyApO1xuXHRcdFx0JG9wdGlvbi5pbm5lckhUTUwgPSBuYW1lO1xuXHRcdFx0dGhpcy4kc2VsZWN0LmFwcGVuZENoaWxkKCAkb3B0aW9uICk7XG5cdFx0fSApO1xuXG5cdFx0dGhpcy4kc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoICdjaGFuZ2UnLCAoKSA9PiB7XG5cdFx0XHR0aGlzLnNldFZhbHVlKCB0aGlzLl92YWx1ZXNbIHRoaXMuJHNlbGVjdC5zZWxlY3RlZEluZGV4IF0gKTtcblx0XHRcdHRoaXMuX2NhbGxPbkZpbmlzaENoYW5nZSgpO1xuXHRcdH0gKTtcblxuXHRcdHRoaXMuJHNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCAnZm9jdXMnLCAoKSA9PiB7XG5cdFx0XHR0aGlzLiRkaXNwbGF5LmNsYXNzTGlzdC5hZGQoICdmb2N1cycgKTtcblx0XHR9ICk7XG5cblx0XHR0aGlzLiRzZWxlY3QuYWRkRXZlbnRMaXN0ZW5lciggJ2JsdXInLCAoKSA9PiB7XG5cdFx0XHR0aGlzLiRkaXNwbGF5LmNsYXNzTGlzdC5yZW1vdmUoICdmb2N1cycgKTtcblx0XHR9ICk7XG5cblx0XHR0aGlzLiR3aWRnZXQuYXBwZW5kQ2hpbGQoIHRoaXMuJHNlbGVjdCApO1xuXHRcdHRoaXMuJHdpZGdldC5hcHBlbmRDaGlsZCggdGhpcy4kZGlzcGxheSApO1xuXG5cdFx0dGhpcy4kZGlzYWJsZSA9IHRoaXMuJHNlbGVjdDtcblxuXHRcdHRoaXMudXBkYXRlRGlzcGxheSgpO1xuXG5cdH1cblxuXHR1cGRhdGVEaXNwbGF5KCkge1xuXHRcdGNvbnN0IHZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy5fdmFsdWVzLmluZGV4T2YoIHZhbHVlICk7XG5cdFx0dGhpcy4kc2VsZWN0LnNlbGVjdGVkSW5kZXggPSBpbmRleDtcblx0XHR0aGlzLiRkaXNwbGF5LmlubmVySFRNTCA9IGluZGV4ID09PSAtMSA/IHZhbHVlIDogdGhpcy5fbmFtZXNbIGluZGV4IF07XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxufVxuXG5jbGFzcyBTdHJpbmdDb250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlciB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmVudCwgb2JqZWN0LCBwcm9wZXJ0eSApIHtcblxuXHRcdHN1cGVyKCBwYXJlbnQsIG9iamVjdCwgcHJvcGVydHksICdzdHJpbmcnICk7XG5cblx0XHR0aGlzLiRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdpbnB1dCcgKTtcblx0XHR0aGlzLiRpbnB1dC5zZXRBdHRyaWJ1dGUoICd0eXBlJywgJ3RleHQnICk7XG5cdFx0dGhpcy4kaW5wdXQuc2V0QXR0cmlidXRlKCAnYXJpYS1sYWJlbGxlZGJ5JywgdGhpcy4kbmFtZS5pZCApO1xuXG5cdFx0dGhpcy4kaW5wdXQuYWRkRXZlbnRMaXN0ZW5lciggJ2lucHV0JywgKCkgPT4ge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZSggdGhpcy4kaW5wdXQudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0XHR0aGlzLiRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIGUgPT4ge1xuXHRcdFx0aWYgKCBlLmNvZGUgPT09ICdFbnRlcicgKSB7XG5cdFx0XHRcdHRoaXMuJGlucHV0LmJsdXIoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHR0aGlzLiRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCAnYmx1cicsICgpID0+IHtcblx0XHRcdHRoaXMuX2NhbGxPbkZpbmlzaENoYW5nZSgpO1xuXHRcdH0gKTtcblxuXHRcdHRoaXMuJHdpZGdldC5hcHBlbmRDaGlsZCggdGhpcy4kaW5wdXQgKTtcblxuXHRcdHRoaXMuJGRpc2FibGUgPSB0aGlzLiRpbnB1dDtcblxuXHRcdHRoaXMudXBkYXRlRGlzcGxheSgpO1xuXG5cdH1cblxuXHR1cGRhdGVEaXNwbGF5KCkge1xuXHRcdHRoaXMuJGlucHV0LnZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cbn1cblxuY29uc3Qgc3R5bGVzaGVldCA9IGAubGlsLWd1aSB7XG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LWZhbWlseSk7XG4gIGZvbnQtc2l6ZTogdmFyKC0tZm9udC1zaXplKTtcbiAgbGluZS1oZWlnaHQ6IDE7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XG4gIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yKTtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XG4gIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uO1xuICAtLWJhY2tncm91bmQtY29sb3I6ICMxZjFmMWY7XG4gIC0tdGV4dC1jb2xvcjogI2ViZWJlYjtcbiAgLS10aXRsZS1iYWNrZ3JvdW5kLWNvbG9yOiAjMTExMTExO1xuICAtLXRpdGxlLXRleHQtY29sb3I6ICNlYmViZWI7XG4gIC0td2lkZ2V0LWNvbG9yOiAjNDI0MjQyO1xuICAtLWhvdmVyLWNvbG9yOiAjNGY0ZjRmO1xuICAtLWZvY3VzLWNvbG9yOiAjNTk1OTU5O1xuICAtLW51bWJlci1jb2xvcjogIzJjYzlmZjtcbiAgLS1zdHJpbmctY29sb3I6ICNhMmRiM2M7XG4gIC0tZm9udC1zaXplOiAxMXB4O1xuICAtLWlucHV0LWZvbnQtc2l6ZTogMTFweDtcbiAgLS1mb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcIlNlZ29lIFVJXCIsIFJvYm90bywgQXJpYWwsIHNhbnMtc2VyaWY7XG4gIC0tZm9udC1mYW1pbHktbW9ubzogTWVubG8sIE1vbmFjbywgQ29uc29sYXMsIFwiRHJvaWQgU2FucyBNb25vXCIsIG1vbm9zcGFjZTtcbiAgLS1wYWRkaW5nOiA0cHg7XG4gIC0tc3BhY2luZzogNHB4O1xuICAtLXdpZGdldC1oZWlnaHQ6IDIwcHg7XG4gIC0tdGl0bGUtaGVpZ2h0OiBjYWxjKHZhcigtLXdpZGdldC1oZWlnaHQpICsgdmFyKC0tc3BhY2luZykgKiAxLjI1KTtcbiAgLS1uYW1lLXdpZHRoOiA0NSU7XG4gIC0tc2xpZGVyLWtub2Itd2lkdGg6IDJweDtcbiAgLS1zbGlkZXItaW5wdXQtd2lkdGg6IDI3JTtcbiAgLS1jb2xvci1pbnB1dC13aWR0aDogMjclO1xuICAtLXNsaWRlci1pbnB1dC1taW4td2lkdGg6IDQ1cHg7XG4gIC0tY29sb3ItaW5wdXQtbWluLXdpZHRoOiA0NXB4O1xuICAtLWZvbGRlci1pbmRlbnQ6IDdweDtcbiAgLS13aWRnZXQtcGFkZGluZzogMCAwIDAgM3B4O1xuICAtLXdpZGdldC1ib3JkZXItcmFkaXVzOiAycHg7XG4gIC0tY2hlY2tib3gtc2l6ZTogY2FsYygwLjc1ICogdmFyKC0td2lkZ2V0LWhlaWdodCkpO1xuICAtLXNjcm9sbGJhci13aWR0aDogNXB4O1xufVxuLmxpbC1ndWksIC5saWwtZ3VpICoge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG59XG4ubGlsLWd1aS5yb290IHtcbiAgd2lkdGg6IHZhcigtLXdpZHRoLCAyNDVweCk7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG4ubGlsLWd1aS5yb290ID4gLnRpdGxlIHtcbiAgYmFja2dyb3VuZDogdmFyKC0tdGl0bGUtYmFja2dyb3VuZC1jb2xvcik7XG4gIGNvbG9yOiB2YXIoLS10aXRsZS10ZXh0LWNvbG9yKTtcbn1cbi5saWwtZ3VpLnJvb3QgPiAuY2hpbGRyZW4ge1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG4gIG92ZXJmbG93LXk6IGF1dG87XG59XG4ubGlsLWd1aS5yb290ID4gLmNoaWxkcmVuOjotd2Via2l0LXNjcm9sbGJhciB7XG4gIHdpZHRoOiB2YXIoLS1zY3JvbGxiYXItd2lkdGgpO1xuICBoZWlnaHQ6IHZhcigtLXNjcm9sbGJhci13aWR0aCk7XG4gIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtY29sb3IpO1xufVxuLmxpbC1ndWkucm9vdCA+IC5jaGlsZHJlbjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xuICBib3JkZXItcmFkaXVzOiB2YXIoLS1zY3JvbGxiYXItd2lkdGgpO1xuICBiYWNrZ3JvdW5kOiB2YXIoLS1mb2N1cy1jb2xvcik7XG59XG5AbWVkaWEgKHBvaW50ZXI6IGNvYXJzZSkge1xuICAubGlsLWd1aS5hbGxvdy10b3VjaC1zdHlsZXMge1xuICAgIC0td2lkZ2V0LWhlaWdodDogMjhweDtcbiAgICAtLXBhZGRpbmc6IDZweDtcbiAgICAtLXNwYWNpbmc6IDZweDtcbiAgICAtLWZvbnQtc2l6ZTogMTNweDtcbiAgICAtLWlucHV0LWZvbnQtc2l6ZTogMTZweDtcbiAgICAtLWZvbGRlci1pbmRlbnQ6IDEwcHg7XG4gICAgLS1zY3JvbGxiYXItd2lkdGg6IDdweDtcbiAgICAtLXNsaWRlci1pbnB1dC1taW4td2lkdGg6IDUwcHg7XG4gICAgLS1jb2xvci1pbnB1dC1taW4td2lkdGg6IDY1cHg7XG4gIH1cbn1cbi5saWwtZ3VpLmZvcmNlLXRvdWNoLXN0eWxlcyB7XG4gIC0td2lkZ2V0LWhlaWdodDogMjhweDtcbiAgLS1wYWRkaW5nOiA2cHg7XG4gIC0tc3BhY2luZzogNnB4O1xuICAtLWZvbnQtc2l6ZTogMTNweDtcbiAgLS1pbnB1dC1mb250LXNpemU6IDE2cHg7XG4gIC0tZm9sZGVyLWluZGVudDogMTBweDtcbiAgLS1zY3JvbGxiYXItd2lkdGg6IDdweDtcbiAgLS1zbGlkZXItaW5wdXQtbWluLXdpZHRoOiA1MHB4O1xuICAtLWNvbG9yLWlucHV0LW1pbi13aWR0aDogNjVweDtcbn1cbi5saWwtZ3VpLmF1dG9QbGFjZSB7XG4gIG1heC1oZWlnaHQ6IDEwMCU7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiAwO1xuICByaWdodDogMTVweDtcbiAgei1pbmRleDogMTAwMTtcbn1cblxuLmxpbC1ndWkgLmNvbnRyb2xsZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiAwIHZhcigtLXBhZGRpbmcpO1xuICBtYXJnaW46IHZhcigtLXNwYWNpbmcpIDA7XG59XG4ubGlsLWd1aSAuY29udHJvbGxlci5kaXNhYmxlZCB7XG4gIG9wYWNpdHk6IDAuNTtcbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyLmRpc2FibGVkLCAubGlsLWd1aSAuY29udHJvbGxlci5kaXNhYmxlZCAqIHtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmUgIWltcG9ydGFudDtcbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyID4gLm5hbWUge1xuICBtaW4td2lkdGg6IHZhcigtLW5hbWUtd2lkdGgpO1xuICBmbGV4LXNocmluazogMDtcbiAgd2hpdGUtc3BhY2U6IHByZTtcbiAgcGFkZGluZy1yaWdodDogdmFyKC0tc3BhY2luZyk7XG4gIGxpbmUtaGVpZ2h0OiB2YXIoLS13aWRnZXQtaGVpZ2h0KTtcbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyIC53aWRnZXQge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHdpZHRoOiAxMDAlO1xuICBtaW4taGVpZ2h0OiB2YXIoLS13aWRnZXQtaGVpZ2h0KTtcbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyLnN0cmluZyBpbnB1dCB7XG4gIGNvbG9yOiB2YXIoLS1zdHJpbmctY29sb3IpO1xufVxuLmxpbC1ndWkgLmNvbnRyb2xsZXIuYm9vbGVhbiAud2lkZ2V0IHtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuLmxpbC1ndWkgLmNvbnRyb2xsZXIuY29sb3IgLmRpc3BsYXkge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiB2YXIoLS13aWRnZXQtaGVpZ2h0KTtcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0td2lkZ2V0LWJvcmRlci1yYWRpdXMpO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5AbWVkaWEgKGhvdmVyOiBob3Zlcikge1xuICAubGlsLWd1aSAuY29udHJvbGxlci5jb2xvciAuZGlzcGxheTpob3ZlcjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6IFwiIFwiO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS13aWRnZXQtYm9yZGVyLXJhZGl1cyk7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZjk7XG4gICAgdG9wOiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIGJvdHRvbTogMDtcbiAgICBsZWZ0OiAwO1xuICB9XG59XG4ubGlsLWd1aSAuY29udHJvbGxlci5jb2xvciBpbnB1dFt0eXBlPWNvbG9yXSB7XG4gIG9wYWNpdHk6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyLmNvbG9yIGlucHV0W3R5cGU9dGV4dF0ge1xuICBtYXJnaW4tbGVmdDogdmFyKC0tc3BhY2luZyk7XG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LWZhbWlseS1tb25vKTtcbiAgbWluLXdpZHRoOiB2YXIoLS1jb2xvci1pbnB1dC1taW4td2lkdGgpO1xuICB3aWR0aDogdmFyKC0tY29sb3ItaW5wdXQtd2lkdGgpO1xuICBmbGV4LXNocmluazogMDtcbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyLm9wdGlvbiBzZWxlY3Qge1xuICBvcGFjaXR5OiAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXgtd2lkdGg6IDEwMCU7XG59XG4ubGlsLWd1aSAuY29udHJvbGxlci5vcHRpb24gLmRpc3BsYXkge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBib3JkZXItcmFkaXVzOiB2YXIoLS13aWRnZXQtYm9yZGVyLXJhZGl1cyk7XG4gIGhlaWdodDogdmFyKC0td2lkZ2V0LWhlaWdodCk7XG4gIGxpbmUtaGVpZ2h0OiB2YXIoLS13aWRnZXQtaGVpZ2h0KTtcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gIHBhZGRpbmctbGVmdDogMC41NWVtO1xuICBwYWRkaW5nLXJpZ2h0OiAxLjc1ZW07XG4gIGJhY2tncm91bmQ6IHZhcigtLXdpZGdldC1jb2xvcik7XG59XG5AbWVkaWEgKGhvdmVyOiBob3Zlcikge1xuICAubGlsLWd1aSAuY29udHJvbGxlci5vcHRpb24gLmRpc3BsYXkuZm9jdXMge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWZvY3VzLWNvbG9yKTtcbiAgfVxufVxuLmxpbC1ndWkgLmNvbnRyb2xsZXIub3B0aW9uIC5kaXNwbGF5LmFjdGl2ZSB7XG4gIGJhY2tncm91bmQ6IHZhcigtLWZvY3VzLWNvbG9yKTtcbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyLm9wdGlvbiAuZGlzcGxheTphZnRlciB7XG4gIGZvbnQtZmFtaWx5OiBcImxpbC1ndWlcIjtcbiAgY29udGVudDogXCLihpVcIjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIHJpZ2h0OiAwO1xuICBib3R0b206IDA7XG4gIHBhZGRpbmctcmlnaHQ6IDAuMzc1ZW07XG59XG4ubGlsLWd1aSAuY29udHJvbGxlci5vcHRpb24gLndpZGdldCxcbi5saWwtZ3VpIC5jb250cm9sbGVyLm9wdGlvbiBzZWxlY3Qge1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5AbWVkaWEgKGhvdmVyOiBob3Zlcikge1xuICAubGlsLWd1aSAuY29udHJvbGxlci5vcHRpb24gLndpZGdldDpob3ZlciAuZGlzcGxheSB7XG4gICAgYmFja2dyb3VuZDogdmFyKC0taG92ZXItY29sb3IpO1xuICB9XG59XG4ubGlsLWd1aSAuY29udHJvbGxlci5udW1iZXIgaW5wdXQge1xuICBjb2xvcjogdmFyKC0tbnVtYmVyLWNvbG9yKTtcbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyLm51bWJlci5oYXNTbGlkZXIgaW5wdXQge1xuICBtYXJnaW4tbGVmdDogdmFyKC0tc3BhY2luZyk7XG4gIHdpZHRoOiB2YXIoLS1zbGlkZXItaW5wdXQtd2lkdGgpO1xuICBtaW4td2lkdGg6IHZhcigtLXNsaWRlci1pbnB1dC1taW4td2lkdGgpO1xuICBmbGV4LXNocmluazogMDtcbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyLm51bWJlciAuc2xpZGVyIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogdmFyKC0td2lkZ2V0LWhlaWdodCk7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdpZGdldC1jb2xvcik7XG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLXdpZGdldC1ib3JkZXItcmFkaXVzKTtcbiAgcGFkZGluZy1yaWdodDogdmFyKC0tc2xpZGVyLWtub2Itd2lkdGgpO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBjdXJzb3I6IGV3LXJlc2l6ZTtcbiAgdG91Y2gtYWN0aW9uOiBwYW4teTtcbn1cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSB7XG4gIC5saWwtZ3VpIC5jb250cm9sbGVyLm51bWJlciAuc2xpZGVyOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1jb2xvcik7XG4gIH1cbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyLm51bWJlciAuc2xpZGVyLmFjdGl2ZSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWZvY3VzLWNvbG9yKTtcbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyLm51bWJlciAuc2xpZGVyLmFjdGl2ZSAuZmlsbCB7XG4gIG9wYWNpdHk6IDAuOTU7XG59XG4ubGlsLWd1aSAuY29udHJvbGxlci5udW1iZXIgLmZpbGwge1xuICBoZWlnaHQ6IDEwMCU7XG4gIGJvcmRlci1yaWdodDogdmFyKC0tc2xpZGVyLWtub2Itd2lkdGgpIHNvbGlkIHZhcigtLW51bWJlci1jb2xvcik7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xufVxuXG4ubGlsLWd1aS1kcmFnZ2luZyAubGlsLWd1aSB7XG4gIC0taG92ZXItY29sb3I6IHZhcigtLXdpZGdldC1jb2xvcik7XG59XG4ubGlsLWd1aS1kcmFnZ2luZyAqIHtcbiAgY3Vyc29yOiBldy1yZXNpemUgIWltcG9ydGFudDtcbn1cblxuLmxpbC1ndWktZHJhZ2dpbmcubGlsLWd1aS12ZXJ0aWNhbCAqIHtcbiAgY3Vyc29yOiBucy1yZXNpemUgIWltcG9ydGFudDtcbn1cblxuLmxpbC1ndWkgLnRpdGxlIHtcbiAgaGVpZ2h0OiB2YXIoLS10aXRsZS1oZWlnaHQpO1xuICBsaW5lLWhlaWdodDogY2FsYyh2YXIoLS10aXRsZS1oZWlnaHQpIC0gNHB4KTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgcGFkZGluZzogMCB2YXIoLS1wYWRkaW5nKTtcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBvdXRsaW5lOiBub25lO1xuICB0ZXh0LWRlY29yYXRpb24tc2tpcDogb2JqZWN0cztcbn1cbi5saWwtZ3VpIC50aXRsZTpiZWZvcmUge1xuICBmb250LWZhbWlseTogXCJsaWwtZ3VpXCI7XG4gIGNvbnRlbnQ6IFwi4pa+XCI7XG4gIHBhZGRpbmctcmlnaHQ6IDJweDtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xufVxuLmxpbC1ndWkgLnRpdGxlOmFjdGl2ZSB7XG4gIGJhY2tncm91bmQ6IHZhcigtLXRpdGxlLWJhY2tncm91bmQtY29sb3IpO1xuICBvcGFjaXR5OiAwLjc1O1xufVxuQG1lZGlhIChob3ZlcjogaG92ZXIpIHtcbiAgYm9keTpub3QoLmxpbC1ndWktZHJhZ2dpbmcpIC5saWwtZ3VpIC50aXRsZTpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogdmFyKC0tdGl0bGUtYmFja2dyb3VuZC1jb2xvcik7XG4gICAgb3BhY2l0eTogMC44NTtcbiAgfVxuICAubGlsLWd1aSAudGl0bGU6Zm9jdXMge1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIHZhcigtLWZvY3VzLWNvbG9yKTtcbiAgfVxufVxuLmxpbC1ndWkucm9vdCA+IC50aXRsZTpmb2N1cyB7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZSAhaW1wb3J0YW50O1xufVxuLmxpbC1ndWkuY2xvc2VkID4gLnRpdGxlOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwi4pa4XCI7XG59XG4ubGlsLWd1aS5jbG9zZWQgPiAuY2hpbGRyZW4ge1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTdweCk7XG4gIG9wYWNpdHk6IDA7XG59XG4ubGlsLWd1aS5jbG9zZWQ6bm90KC50cmFuc2l0aW9uKSA+IC5jaGlsZHJlbiB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG4ubGlsLWd1aS50cmFuc2l0aW9uID4gLmNoaWxkcmVuIHtcbiAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMzAwbXM7XG4gIHRyYW5zaXRpb24tcHJvcGVydHk6IGhlaWdodCwgb3BhY2l0eSwgdHJhbnNmb3JtO1xuICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMiwgMC42LCAwLjM1LCAxKTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG4ubGlsLWd1aSAuY2hpbGRyZW46ZW1wdHk6YmVmb3JlIHtcbiAgY29udGVudDogXCJFbXB0eVwiO1xuICBwYWRkaW5nOiAwIHZhcigtLXBhZGRpbmcpO1xuICBtYXJnaW46IHZhcigtLXNwYWNpbmcpIDA7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBoZWlnaHQ6IHZhcigtLXdpZGdldC1oZWlnaHQpO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGxpbmUtaGVpZ2h0OiB2YXIoLS13aWRnZXQtaGVpZ2h0KTtcbiAgb3BhY2l0eTogMC41O1xufVxuLmxpbC1ndWkucm9vdCA+IC5jaGlsZHJlbiA+IC5saWwtZ3VpID4gLnRpdGxlIHtcbiAgYm9yZGVyOiAwIHNvbGlkIHZhcigtLXdpZGdldC1jb2xvcik7XG4gIGJvcmRlci13aWR0aDogMXB4IDA7XG4gIHRyYW5zaXRpb246IGJvcmRlci1jb2xvciAzMDBtcztcbn1cbi5saWwtZ3VpLnJvb3QgPiAuY2hpbGRyZW4gPiAubGlsLWd1aS5jbG9zZWQgPiAudGl0bGUge1xuICBib3JkZXItYm90dG9tLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cbi5saWwtZ3VpICsgLmNvbnRyb2xsZXIge1xuICBib3JkZXItdG9wOiAxcHggc29saWQgdmFyKC0td2lkZ2V0LWNvbG9yKTtcbiAgbWFyZ2luLXRvcDogMDtcbiAgcGFkZGluZy10b3A6IHZhcigtLXNwYWNpbmcpO1xufVxuLmxpbC1ndWkgLmxpbC1ndWkgLmxpbC1ndWkgPiAudGl0bGUge1xuICBib3JkZXI6IG5vbmU7XG59XG4ubGlsLWd1aSAubGlsLWd1aSAubGlsLWd1aSA+IC5jaGlsZHJlbiB7XG4gIGJvcmRlcjogbm9uZTtcbiAgbWFyZ2luLWxlZnQ6IHZhcigtLWZvbGRlci1pbmRlbnQpO1xuICBib3JkZXItbGVmdDogMnB4IHNvbGlkIHZhcigtLXdpZGdldC1jb2xvcik7XG59XG4ubGlsLWd1aSAubGlsLWd1aSAuY29udHJvbGxlciB7XG4gIGJvcmRlcjogbm9uZTtcbn1cblxuLmxpbC1ndWkgaW5wdXQge1xuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xuICBib3JkZXI6IDA7XG4gIG91dGxpbmU6IG5vbmU7XG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LWZhbWlseSk7XG4gIGZvbnQtc2l6ZTogdmFyKC0taW5wdXQtZm9udC1zaXplKTtcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0td2lkZ2V0LWJvcmRlci1yYWRpdXMpO1xuICBoZWlnaHQ6IHZhcigtLXdpZGdldC1oZWlnaHQpO1xuICBiYWNrZ3JvdW5kOiB2YXIoLS13aWRnZXQtY29sb3IpO1xuICBjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7XG4gIHdpZHRoOiAxMDAlO1xufVxuQG1lZGlhIChob3ZlcjogaG92ZXIpIHtcbiAgLmxpbC1ndWkgaW5wdXQ6aG92ZXIge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWhvdmVyLWNvbG9yKTtcbiAgfVxuICAubGlsLWd1aSBpbnB1dDphY3RpdmUge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWZvY3VzLWNvbG9yKTtcbiAgfVxufVxuLmxpbC1ndWkgaW5wdXQ6ZGlzYWJsZWQge1xuICBvcGFjaXR5OiAxO1xufVxuLmxpbC1ndWkgaW5wdXRbdHlwZT10ZXh0XSxcbi5saWwtZ3VpIGlucHV0W3R5cGU9bnVtYmVyXSB7XG4gIHBhZGRpbmc6IHZhcigtLXdpZGdldC1wYWRkaW5nKTtcbn1cbi5saWwtZ3VpIGlucHV0W3R5cGU9dGV4dF06Zm9jdXMsXG4ubGlsLWd1aSBpbnB1dFt0eXBlPW51bWJlcl06Zm9jdXMge1xuICBiYWNrZ3JvdW5kOiB2YXIoLS1mb2N1cy1jb2xvcik7XG59XG4ubGlsLWd1aSBpbnB1dDo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbixcbi5saWwtZ3VpIGlucHV0Ojotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICBtYXJnaW46IDA7XG59XG4ubGlsLWd1aSBpbnB1dFt0eXBlPW51bWJlcl0ge1xuICAtbW96LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcbn1cbi5saWwtZ3VpIGlucHV0W3R5cGU9Y2hlY2tib3hdIHtcbiAgYXBwZWFyYW5jZTogbm9uZTtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICBoZWlnaHQ6IHZhcigtLWNoZWNrYm94LXNpemUpO1xuICB3aWR0aDogdmFyKC0tY2hlY2tib3gtc2l6ZSk7XG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLXdpZGdldC1ib3JkZXItcmFkaXVzKTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG4ubGlsLWd1aSBpbnB1dFt0eXBlPWNoZWNrYm94XTpjaGVja2VkOmJlZm9yZSB7XG4gIGZvbnQtZmFtaWx5OiBcImxpbC1ndWlcIjtcbiAgY29udGVudDogXCLinJNcIjtcbiAgZm9udC1zaXplOiB2YXIoLS1jaGVja2JveC1zaXplKTtcbiAgbGluZS1oZWlnaHQ6IHZhcigtLWNoZWNrYm94LXNpemUpO1xufVxuQG1lZGlhIChob3ZlcjogaG92ZXIpIHtcbiAgLmxpbC1ndWkgaW5wdXRbdHlwZT1jaGVja2JveF06Zm9jdXMge1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDFweCB2YXIoLS1mb2N1cy1jb2xvcik7XG4gIH1cbn1cbi5saWwtZ3VpIGJ1dHRvbiB7XG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIG91dGxpbmU6IG5vbmU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgZm9udC1mYW1pbHk6IHZhcigtLWZvbnQtZmFtaWx5KTtcbiAgZm9udC1zaXplOiB2YXIoLS1mb250LXNpemUpO1xuICBjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IHZhcigtLXdpZGdldC1oZWlnaHQpO1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgYmFja2dyb3VuZDogdmFyKC0td2lkZ2V0LWNvbG9yKTtcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0td2lkZ2V0LWJvcmRlci1yYWRpdXMpO1xuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS13aWRnZXQtY29sb3IpO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGxpbmUtaGVpZ2h0OiBjYWxjKHZhcigtLXdpZGdldC1oZWlnaHQpIC0gNHB4KTtcbn1cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSB7XG4gIC5saWwtZ3VpIGJ1dHRvbjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogdmFyKC0taG92ZXItY29sb3IpO1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0taG92ZXItY29sb3IpO1xuICB9XG4gIC5saWwtZ3VpIGJ1dHRvbjpmb2N1cyB7XG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1mb2N1cy1jb2xvcik7XG4gIH1cbn1cbi5saWwtZ3VpIGJ1dHRvbjphY3RpdmUge1xuICBiYWNrZ3JvdW5kOiB2YXIoLS1mb2N1cy1jb2xvcik7XG59XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJsaWwtZ3VpXCI7XG4gIHNyYzogdXJsKFwiZGF0YTphcHBsaWNhdGlvbi9mb250LXdvZmY7Y2hhcnNldD11dGYtODtiYXNlNjQsZDA5R1JnQUJBQUFBQUFVc0FBc0FBQUFBQ0p3QUFRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJIVTFWQ0FBQUJDQUFBQUg0QUFBREFJbXdtWUU5VEx6SUFBQUdJQUFBQVB3QUFBR0JLcUg1U1kyMWhjQUFBQWNnQUFBRDBBQUFDcnVreXlKQm5iSGxtQUFBQ3ZBQUFBRjhBQUFDRUlacFdIMmhsWVdRQUFBTWNBQUFBSndBQUFEWmZjajJ6YUdobFlRQUFBMFFBQUFBWUFBQUFKQUM1QUhob2JYUjRBQUFEWEFBQUFCQUFBQUJNQVpBQUFHeHZZMkVBQUFOc0FBQUFGQUFBQUNnQ0VnSXliV0Y0Y0FBQUE0QUFBQUFlQUFBQUlBRWZBQkp1WVcxbEFBQURvQUFBQVNJQUFBSUs5U1VVL1hCdmMzUUFBQVRFQUFBQVpnQUFBSkNUY01jMmVKeFZqYkVPZ2pBVVJVK2hGUkJLMWRHUkwrQUxuQWlUb3lNTEV6RnBuUHovZUFzaHdTYTk3NTE3Yy9Nd3dKbWVCOWt3UGwrMGNmNSt1R1BaWHNxUHU0bnZaYWJjU1psZFo2a2Z5V25vbUZZL2VTY0txWk5XdXBLSk82a1hOM0s5dUNWb0w3aUluUHIxWDViYVhzM3RqdU1xQ3R6RXVhZ20vQUFselFnUEFBQjRuR05nWVJCbG5NREF5c0RBWU0vZ0JpVDVvTFFCQXd1REpBTURFd01yTXdOV0VKRG1tc0p3Z0NGZVhaZ2hCY2psWk1nRkN6T2lLT0lGQUI3MUJiOEFlSnkxa2pGdXdrQVFSWitEd1JBd0J0TlFSVUdLUThPZEtDQVdVaEFnS0xoSXVBc1ZTcFd6NUJia2ozZEVnWWlVSXN6cVdkcFplK1o3L3dCMW9DWW1Jb2JvaXdpTFQyV2pLbC9qc2NySGZHZy9wS2RNa3lrbEM1WnMyTEVmSFlwamNSb1B6bWU5TVdXbWszZFdiSzlPYmtXa2lrT2V0SjU1NGZXeW9Fc21kU2x0K3VSMHBDSlIzNGI2dC9UVmcxU1kzc1l2ZGY4dnVpS3JweWFEWERJU2llZ3AxN3A3NTc5R3AzcCsreTdIUEFpWTlwbVRpYmxqcnI4NXFTaWR0bGc0K2wyNUdMQ2FTOGU2clJ4TkJtc25FUnVuS2JhT09iUno3TjcyanU1dmRBallwQlhIZ0p5bE9BVnNNc2VEQVBFUDhMWW9VSGljWTJCaUFBRWZoaUFHSmdaV0JnWjdSbkZSZG5WSkVMQ1FsQlNSbEFUSk1vTFYyREs0Z2xTWXM2dWJxNXZiS3JKTFNiR3JnRW1vdkR1REpWaGUzVnpjWEZ3TkxDT0lMQi9DNEl1UTF4VG41RlBpbEJUajVGUG1CQUI0V3dvcUFIaWNZMkJrWUdBQTRzazFzUi9qK1cyK01uQXpwREJnQXlFTVFVQ1NnNEVKeEFFQXdVZ0ZIZ0I0bkdOZ1pHQmdTR0ZnZ0pNaERJd01xRUFZQUJ5SEFUSjRuR05nQUlJVU5Fd21BQUJsM0FHUmVKeGpZQUFDSVFZbEJpTUdKM3dRQUVjUUJFVjRuR05nWkdCZ0VHWmdZMkJpQUFFUXlRV0VEQXovd1h3R0FBc1BBVElBQUhpY1hkQk5Tc05BSEFYd2wzNWlBMFVRWFluTVNoZlM5R1BaQTdUN0xnSXUwM1NTcGt3ellUSXQxQk40QWsvZ0tUeUFlQ3hmdzM5alpranltemN2QXdtQVcvd2d3SFVFR0RiMzYralFRM0dYR290NzlMMjRqeENQNGdIekYvRUlyNGpFSWU3d3hoT0MzZzJUTVl5NFE3K0x1L1NIdUVkL2l2dDR3SmQ0d1B4YlBFS01YM0dJNStESkZHYVNuNHFOems4bWNiS1NSNnhkWGRoU3phT1pKR3RkYXBkNHZWUGJpNnJQK2NMN1RHWE9IdFhLbGw0YlkxWGw3RUduUHRwN1h5Mm4wMHp5S0xWSGZrSEJhNEljSjJvRDNjZ2dnV3Z0L1YvRmJEclVsRVVKaFRuLzBhelZXYk5UTnIwRW5zOGRlMXRjZUs5eFptZkIxQ1BqT21QSDRraXRtdk91YmNOcG1WVE4zb0ZKeWp6Q3ZubXJ3aEpUenF6Vmo5amlTWDkxMUZqZUFBQjRuRzNITVJLQ01CQkEwZjBnaWlLaTREVThrMFYyR1diSVpET2g0UG9XV3ZxNko1VjhJZjlOVk5RY2FEaHlvdVhNaFk0clBUY0c3andZbVhoS3E4V3orcDc2MmFOYWVZWG9tMm4zbTJkTFRWZ3NyQ2dGSjdPVG1Ja1lid0liQzZ2SUI3V21GZkFBQUE9PVwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xufWA7XG5cbmZ1bmN0aW9uIF9pbmplY3RTdHlsZXMoIGNzc0NvbnRlbnQgKSB7XG5cdGNvbnN0IGluamVjdGVkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ3N0eWxlJyApO1xuXHRpbmplY3RlZC5pbm5lckhUTUwgPSBjc3NDb250ZW50O1xuXHRjb25zdCBiZWZvcmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnaGVhZCBsaW5rW3JlbD1zdHlsZXNoZWV0XSwgaGVhZCBzdHlsZScgKTtcblx0aWYgKCBiZWZvcmUgKSB7XG5cdFx0ZG9jdW1lbnQuaGVhZC5pbnNlcnRCZWZvcmUoIGluamVjdGVkLCBiZWZvcmUgKTtcblx0fSBlbHNlIHtcblx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBpbmplY3RlZCApO1xuXHR9XG59XG5cbmxldCBzdHlsZXNJbmplY3RlZCA9IGZhbHNlO1xuXG5jbGFzcyBHVUkge1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgcGFuZWwgdGhhdCBob2xkcyBjb250cm9sbGVycy5cblx0ICogQGV4YW1wbGVcblx0ICogbmV3IEdVSSgpO1xuXHQgKiBuZXcgR1VJKCB7IGNvbnRhaW5lcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdjdXN0b20nICkgfSApO1xuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYXV0b1BsYWNlPXRydWVdXG5cdCAqIEFkZHMgdGhlIEdVSSB0byBgZG9jdW1lbnQuYm9keWAgYW5kIGZpeGVzIGl0IHRvIHRoZSB0b3AgcmlnaHQgb2YgdGhlIHBhZ2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IFtvcHRpb25zLmNvbnRhaW5lcl1cblx0ICogQWRkcyB0aGUgR1VJIHRvIHRoaXMgRE9NIGVsZW1lbnQuIE92ZXJyaWRlcyBgYXV0b1BsYWNlYC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLndpZHRoPTI0NV1cblx0ICogV2lkdGggb2YgdGhlIEdVSSBpbiBwaXhlbHMsIHVzdWFsbHkgc2V0IHdoZW4gbmFtZSBsYWJlbHMgYmVjb21lIHRvbyBsb25nLiBOb3RlIHRoYXQgeW91IGNhbiBtYWtlXG5cdCAqIG5hbWUgbGFiZWxzIHdpZGVyIGluIENTUyB3aXRoIGAubGls4oCRZ3VpIHsg4oCR4oCRbmFtZeKAkXdpZHRoOiA1NSUgfWBcblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnRpdGxlPUNvbnRyb2xzXVxuXHQgKiBOYW1lIHRvIGRpc3BsYXkgaW4gdGhlIHRpdGxlIGJhci5cblx0ICpcblx0ICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jbG9zZUZvbGRlcnM9ZmFsc2VdXG5cdCAqIFBhc3MgYHRydWVgIHRvIGNsb3NlIGFsbCBmb2xkZXJzIGluIHRoaXMgR1VJIGJ5IGRlZmF1bHQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuaW5qZWN0U3R5bGVzPXRydWVdXG5cdCAqIEluamVjdHMgdGhlIGRlZmF1bHQgc3R5bGVzaGVldCBpbnRvIHRoZSBwYWdlIGlmIHRoaXMgaXMgdGhlIGZpcnN0IEdVSS5cblx0ICogUGFzcyBgZmFsc2VgIHRvIHVzZSB5b3VyIG93biBzdHlsZXNoZWV0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMudG91Y2hTdHlsZXM9dHJ1ZV1cblx0ICogTWFrZXMgY29udHJvbGxlcnMgbGFyZ2VyIG9uIHRvdWNoIGRldmljZXMuIFBhc3MgYGZhbHNlYCB0byBkaXNhYmxlIHRvdWNoIHN0eWxlcy5cblx0ICpcblx0ICogQHBhcmFtIHtHVUl9IFtvcHRpb25zLnBhcmVudF1cblx0ICogQWRkcyB0aGlzIEdVSSBhcyBhIGNoaWxkIGluIGFub3RoZXIgR1VJLiBVc3VhbGx5IHRoaXMgaXMgZG9uZSBmb3IgeW91IGJ5IGBhZGRGb2xkZXIoKWAuXG5cdCAqXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcigge1xuXHRcdHBhcmVudCxcblx0XHRhdXRvUGxhY2UgPSBwYXJlbnQgPT09IHVuZGVmaW5lZCxcblx0XHRjb250YWluZXIsXG5cdFx0d2lkdGgsXG5cdFx0dGl0bGUgPSAnQ29udHJvbHMnLFxuXHRcdGNsb3NlRm9sZGVycyA9IGZhbHNlLFxuXHRcdGluamVjdFN0eWxlcyA9IHRydWUsXG5cdFx0dG91Y2hTdHlsZXMgPSB0cnVlXG5cdH0gPSB7fSApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBHVUkgY29udGFpbmluZyB0aGlzIGZvbGRlciwgb3IgYHVuZGVmaW5lZGAgaWYgdGhpcyBpcyB0aGUgcm9vdCBHVUkuXG5cdFx0ICogQHR5cGUge0dVSX1cblx0XHQgKi9cblx0XHR0aGlzLnBhcmVudCA9IHBhcmVudDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0b3AgbGV2ZWwgR1VJIGNvbnRhaW5pbmcgdGhpcyBmb2xkZXIsIG9yIGB0aGlzYCBpZiB0aGlzIGlzIHRoZSByb290IEdVSS5cblx0XHQgKiBAdHlwZSB7R1VJfVxuXHRcdCAqL1xuXHRcdHRoaXMucm9vdCA9IHBhcmVudCA/IHBhcmVudC5yb290IDogdGhpcztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBsaXN0IG9mIGNvbnRyb2xsZXJzIGFuZCBmb2xkZXJzIGNvbnRhaW5lZCBieSB0aGlzIEdVSS5cblx0XHQgKiBAdHlwZSB7QXJyYXk8R1VJfENvbnRyb2xsZXI+fVxuXHRcdCAqL1xuXHRcdHRoaXMuY2hpbGRyZW4gPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBsaXN0IG9mIGNvbnRyb2xsZXJzIGNvbnRhaW5lZCBieSB0aGlzIEdVSS5cblx0XHQgKiBAdHlwZSB7QXJyYXk8Q29udHJvbGxlcj59XG5cdFx0ICovXG5cdFx0dGhpcy5jb250cm9sbGVycyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGxpc3Qgb2YgZm9sZGVycyBjb250YWluZWQgYnkgdGhpcyBHVUkuXG5cdFx0ICogQHR5cGUge0FycmF5PEdVST59XG5cdFx0ICovXG5cdFx0dGhpcy5mb2xkZXJzID0gW107XG5cblx0XHQvKipcblx0XHQgKiBVc2VkIHRvIGRldGVybWluZSBpZiB0aGUgR1VJIGlzIGNsb3NlZC4gVXNlIGBndWkub3BlbigpYCBvciBgZ3VpLmNsb3NlKClgIHRvIGNoYW5nZSB0aGlzLlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdHRoaXMuX2Nsb3NlZCA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVXNlZCB0byBkZXRlcm1pbmUgaWYgdGhlIEdVSSBpcyBoaWRkZW4uIFVzZSBgZ3VpLnNob3coKWAgb3IgYGd1aS5oaWRlKClgIHRvIGNoYW5nZSB0aGlzLlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdHRoaXMuX2hpZGRlbiA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG91dGVybW9zdCBjb250YWluZXIgZWxlbWVudC5cblx0XHQgKiBAdHlwZSB7SFRNTEVsZW1lbnR9XG5cdFx0ICovXG5cdFx0dGhpcy5kb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKTtcblx0XHR0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LmFkZCggJ2xpbC1ndWknICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgRE9NIGVsZW1lbnQgdGhhdCBjb250YWlucyB0aGUgdGl0bGUuXG5cdFx0ICogQHR5cGUge0hUTUxFbGVtZW50fVxuXHRcdCAqL1xuXHRcdHRoaXMuJHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKTtcblx0XHR0aGlzLiR0aXRsZS5jbGFzc0xpc3QuYWRkKCAndGl0bGUnICk7XG5cdFx0dGhpcy4kdGl0bGUuc2V0QXR0cmlidXRlKCAncm9sZScsICdidXR0b24nICk7XG5cdFx0dGhpcy4kdGl0bGUuc2V0QXR0cmlidXRlKCAnYXJpYS1leHBhbmRlZCcsIHRydWUgKTtcblx0XHR0aGlzLiR0aXRsZS5zZXRBdHRyaWJ1dGUoICd0YWJpbmRleCcsIDAgKTtcblxuXHRcdHRoaXMuJHRpdGxlLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsICgpID0+IHRoaXMub3BlbkFuaW1hdGVkKCB0aGlzLl9jbG9zZWQgKSApO1xuXHRcdHRoaXMuJHRpdGxlLmFkZEV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgZSA9PiB7XG5cdFx0XHRpZiAoIGUuY29kZSA9PT0gJ0VudGVyJyB8fCBlLmNvZGUgPT09ICdTcGFjZScgKSB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0dGhpcy4kdGl0bGUuY2xpY2soKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHQvLyBlbmFibGVzIDphY3RpdmUgcHNldWRvIGNsYXNzIG9uIG1vYmlsZVxuXHRcdHRoaXMuJHRpdGxlLmFkZEV2ZW50TGlzdGVuZXIoICd0b3VjaHN0YXJ0JywgKCkgPT4ge30sIHsgcGFzc2l2ZTogdHJ1ZSB9ICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgRE9NIGVsZW1lbnQgdGhhdCBjb250YWlucyBjaGlsZHJlbi5cblx0XHQgKiBAdHlwZSB7SFRNTEVsZW1lbnR9XG5cdFx0ICovXG5cdFx0dGhpcy4kY2hpbGRyZW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApO1xuXHRcdHRoaXMuJGNoaWxkcmVuLmNsYXNzTGlzdC5hZGQoICdjaGlsZHJlbicgKTtcblxuXHRcdHRoaXMuZG9tRWxlbWVudC5hcHBlbmRDaGlsZCggdGhpcy4kdGl0bGUgKTtcblx0XHR0aGlzLmRvbUVsZW1lbnQuYXBwZW5kQ2hpbGQoIHRoaXMuJGNoaWxkcmVuICk7XG5cblx0XHR0aGlzLnRpdGxlKCB0aXRsZSApO1xuXG5cdFx0aWYgKCB0b3VjaFN0eWxlcyApIHtcblx0XHRcdHRoaXMuZG9tRWxlbWVudC5jbGFzc0xpc3QuYWRkKCAnYWxsb3ctdG91Y2gtc3R5bGVzJyApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5wYXJlbnQgKSB7XG5cblx0XHRcdHRoaXMucGFyZW50LmNoaWxkcmVuLnB1c2goIHRoaXMgKTtcblx0XHRcdHRoaXMucGFyZW50LmZvbGRlcnMucHVzaCggdGhpcyApO1xuXG5cdFx0XHR0aGlzLnBhcmVudC4kY2hpbGRyZW4uYXBwZW5kQ2hpbGQoIHRoaXMuZG9tRWxlbWVudCApO1xuXG5cdFx0XHQvLyBTdG9wIHRoZSBjb25zdHJ1Y3RvciBlYXJseSwgZXZlcnl0aGluZyBvbndhcmQgb25seSBhcHBsaWVzIHRvIHJvb3QgR1VJJ3Ncblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHRoaXMuZG9tRWxlbWVudC5jbGFzc0xpc3QuYWRkKCAncm9vdCcgKTtcblxuXHRcdC8vIEluamVjdCBzdHlsZXNoZWV0IGlmIHdlIGhhdmVuJ3QgZG9uZSB0aGF0IHlldFxuXHRcdGlmICggIXN0eWxlc0luamVjdGVkICYmIGluamVjdFN0eWxlcyApIHtcblx0XHRcdF9pbmplY3RTdHlsZXMoIHN0eWxlc2hlZXQgKTtcblx0XHRcdHN0eWxlc0luamVjdGVkID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGNvbnRhaW5lciApIHtcblxuXHRcdFx0Y29udGFpbmVyLmFwcGVuZENoaWxkKCB0aGlzLmRvbUVsZW1lbnQgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGF1dG9QbGFjZSApIHtcblxuXHRcdFx0dGhpcy5kb21FbGVtZW50LmNsYXNzTGlzdC5hZGQoICdhdXRvUGxhY2UnICk7XG5cdFx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCB0aGlzLmRvbUVsZW1lbnQgKTtcblxuXHRcdH1cblxuXHRcdGlmICggd2lkdGggKSB7XG5cdFx0XHR0aGlzLmRvbUVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoICctLXdpZHRoJywgd2lkdGggKyAncHgnICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fY2xvc2VGb2xkZXJzID0gY2xvc2VGb2xkZXJzO1xuXG5cdFx0Ly8gRG9uJ3QgZmlyZSBnbG9iYWwga2V5IGV2ZW50cyB3aGlsZSB0eXBpbmcgaW4gdGhlIEdVSTpcblx0XHR0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCBlID0+IGUuc3RvcFByb3BhZ2F0aW9uKCkgKTtcblx0XHR0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2tleXVwJywgZSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgY29udHJvbGxlciB0byB0aGUgR1VJLCBpbmZlcnJpbmcgY29udHJvbGxlciB0eXBlIHVzaW5nIHRoZSBgdHlwZW9mYCBvcGVyYXRvci5cblx0ICogQGV4YW1wbGVcblx0ICogZ3VpLmFkZCggb2JqZWN0LCAncHJvcGVydHknICk7XG5cdCAqIGd1aS5hZGQoIG9iamVjdCwgJ251bWJlcicsIDAsIDEwMCwgMSApO1xuXHQgKiBndWkuYWRkKCBvYmplY3QsICdvcHRpb25zJywgWyAxLCAyLCAzIF0gKTtcblx0ICpcblx0ICogQHBhcmFtIHtvYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRoZSBjb250cm9sbGVyIHdpbGwgbW9kaWZ5LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gY29udHJvbC5cblx0ICogQHBhcmFtIHtudW1iZXJ8b2JqZWN0fEFycmF5fSBbJDFdIE1pbmltdW0gdmFsdWUgZm9yIG51bWJlciBjb250cm9sbGVycywgb3IgdGhlIHNldCBvZlxuXHQgKiBzZWxlY3RhYmxlIHZhbHVlcyBmb3IgYSBkcm9wZG93bi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFttYXhdIE1heGltdW0gdmFsdWUgZm9yIG51bWJlciBjb250cm9sbGVycy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwXSBTdGVwIHZhbHVlIGZvciBudW1iZXIgY29udHJvbGxlcnMuXG5cdCAqIEByZXR1cm5zIHtDb250cm9sbGVyfVxuXHQgKi9cblx0YWRkKCBvYmplY3QsIHByb3BlcnR5LCAkMSwgbWF4LCBzdGVwICkge1xuXG5cdFx0aWYgKCBPYmplY3QoICQxICkgPT09ICQxICkge1xuXG5cdFx0XHRyZXR1cm4gbmV3IE9wdGlvbkNvbnRyb2xsZXIoIHRoaXMsIG9iamVjdCwgcHJvcGVydHksICQxICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBpbml0aWFsVmFsdWUgPSBvYmplY3RbIHByb3BlcnR5IF07XG5cblx0XHRzd2l0Y2ggKCB0eXBlb2YgaW5pdGlhbFZhbHVlICkge1xuXG5cdFx0XHRjYXNlICdudW1iZXInOlxuXG5cdFx0XHRcdHJldHVybiBuZXcgTnVtYmVyQ29udHJvbGxlciggdGhpcywgb2JqZWN0LCBwcm9wZXJ0eSwgJDEsIG1heCwgc3RlcCApO1xuXG5cdFx0XHRjYXNlICdib29sZWFuJzpcblxuXHRcdFx0XHRyZXR1cm4gbmV3IEJvb2xlYW5Db250cm9sbGVyKCB0aGlzLCBvYmplY3QsIHByb3BlcnR5ICk7XG5cblx0XHRcdGNhc2UgJ3N0cmluZyc6XG5cblx0XHRcdFx0cmV0dXJuIG5ldyBTdHJpbmdDb250cm9sbGVyKCB0aGlzLCBvYmplY3QsIHByb3BlcnR5ICk7XG5cblx0XHRcdGNhc2UgJ2Z1bmN0aW9uJzpcblxuXHRcdFx0XHRyZXR1cm4gbmV3IEZ1bmN0aW9uQ29udHJvbGxlciggdGhpcywgb2JqZWN0LCBwcm9wZXJ0eSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc29sZS5lcnJvciggYGd1aS5hZGQgZmFpbGVkXG5cdHByb3BlcnR5OmAsIHByb3BlcnR5LCBgXG5cdG9iamVjdDpgLCBvYmplY3QsIGBcblx0dmFsdWU6YCwgaW5pdGlhbFZhbHVlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgY29sb3IgY29udHJvbGxlciB0byB0aGUgR1VJLlxuXHQgKiBAZXhhbXBsZVxuXHQgKiBwYXJhbXMgPSB7XG5cdCAqIFx0Y3NzQ29sb3I6ICcjZmYwMGZmJyxcblx0ICogXHRyZ2JDb2xvcjogeyByOiAwLCBnOiAwLjIsIGI6IDAuNCB9LFxuXHQgKiBcdGN1c3RvbVJhbmdlOiBbIDAsIDEyNywgMjU1IF0sXG5cdCAqIH07XG5cdCAqXG5cdCAqIGd1aS5hZGRDb2xvciggcGFyYW1zLCAnY3NzQ29sb3InICk7XG5cdCAqIGd1aS5hZGRDb2xvciggcGFyYW1zLCAncmdiQ29sb3InICk7XG5cdCAqIGd1aS5hZGRDb2xvciggcGFyYW1zLCAnY3VzdG9tUmFuZ2UnLCAyNTUgKTtcblx0ICpcblx0ICogQHBhcmFtIHtvYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRoZSBjb250cm9sbGVyIHdpbGwgbW9kaWZ5LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gY29udHJvbC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHJnYlNjYWxlIE1heGltdW0gdmFsdWUgZm9yIGEgY29sb3IgY2hhbm5lbCB3aGVuIHVzaW5nIGFuIFJHQiBjb2xvci4gWW91IG1heVxuXHQgKiBuZWVkIHRvIHNldCB0aGlzIHRvIDI1NSBpZiB5b3VyIGNvbG9ycyBhcmUgdG9vIGJyaWdodC5cblx0ICogQHJldHVybnMge0NvbnRyb2xsZXJ9XG5cdCAqL1xuXHRhZGRDb2xvciggb2JqZWN0LCBwcm9wZXJ0eSwgcmdiU2NhbGUgPSAxICkge1xuXHRcdHJldHVybiBuZXcgQ29sb3JDb250cm9sbGVyKCB0aGlzLCBvYmplY3QsIHByb3BlcnR5LCByZ2JTY2FsZSApO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBmb2xkZXIgdG8gdGhlIEdVSSwgd2hpY2ggaXMganVzdCBhbm90aGVyIEdVSS4gVGhpcyBtZXRob2QgcmV0dXJuc1xuXHQgKiB0aGUgbmVzdGVkIEdVSSBzbyB5b3UgY2FuIGFkZCBjb250cm9sbGVycyB0byBpdC5cblx0ICogQGV4YW1wbGVcblx0ICogY29uc3QgZm9sZGVyID0gZ3VpLmFkZEZvbGRlciggJ1Bvc2l0aW9uJyApO1xuXHQgKiBmb2xkZXIuYWRkKCBwb3NpdGlvbiwgJ3gnICk7XG5cdCAqIGZvbGRlci5hZGQoIHBvc2l0aW9uLCAneScgKTtcblx0ICogZm9sZGVyLmFkZCggcG9zaXRpb24sICd6JyApO1xuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGUgTmFtZSB0byBkaXNwbGF5IGluIHRoZSBmb2xkZXIncyB0aXRsZSBiYXIuXG5cdCAqIEByZXR1cm5zIHtHVUl9XG5cdCAqL1xuXHRhZGRGb2xkZXIoIHRpdGxlICkge1xuXHRcdGNvbnN0IGZvbGRlciA9IG5ldyBHVUkoIHsgcGFyZW50OiB0aGlzLCB0aXRsZSB9ICk7XG5cdFx0aWYgKCB0aGlzLnJvb3QuX2Nsb3NlRm9sZGVycyApIGZvbGRlci5jbG9zZSgpO1xuXHRcdHJldHVybiBmb2xkZXI7XG5cdH1cblxuXHQvKipcblx0ICogUmVjYWxscyB2YWx1ZXMgdGhhdCB3ZXJlIHNhdmVkIHdpdGggYGd1aS5zYXZlKClgLlxuXHQgKiBAcGFyYW0ge29iamVjdH0gb2JqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVjdXJzaXZlIFBhc3MgZmFsc2UgdG8gZXhjbHVkZSBmb2xkZXJzIGRlc2NlbmRpbmcgZnJvbSB0aGlzIEdVSS5cblx0ICogQHJldHVybnMge3RoaXN9XG5cdCAqL1xuXHRsb2FkKCBvYmosIHJlY3Vyc2l2ZSA9IHRydWUgKSB7XG5cblx0XHRpZiAoIG9iai5jb250cm9sbGVycyApIHtcblxuXHRcdFx0dGhpcy5jb250cm9sbGVycy5mb3JFYWNoKCBjID0+IHtcblxuXHRcdFx0XHRpZiAoIGMgaW5zdGFuY2VvZiBGdW5jdGlvbkNvbnRyb2xsZXIgKSByZXR1cm47XG5cblx0XHRcdFx0aWYgKCBjLl9uYW1lIGluIG9iai5jb250cm9sbGVycyApIHtcblx0XHRcdFx0XHRjLmxvYWQoIG9iai5jb250cm9sbGVyc1sgYy5fbmFtZSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCByZWN1cnNpdmUgJiYgb2JqLmZvbGRlcnMgKSB7XG5cblx0XHRcdHRoaXMuZm9sZGVycy5mb3JFYWNoKCBmID0+IHtcblxuXHRcdFx0XHRpZiAoIGYuX3RpdGxlIGluIG9iai5mb2xkZXJzICkge1xuXHRcdFx0XHRcdGYubG9hZCggb2JqLmZvbGRlcnNbIGYuX3RpdGxlIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYW4gb2JqZWN0IG1hcHBpbmcgY29udHJvbGxlciBuYW1lcyB0byB2YWx1ZXMuIFRoZSBvYmplY3QgY2FuIGJlIHBhc3NlZCB0byBgZ3VpLmxvYWQoKWAgdG9cblx0ICogcmVjYWxsIHRoZXNlIHZhbHVlcy5cblx0ICogQGV4YW1wbGVcblx0ICoge1xuXHQgKiBcdGNvbnRyb2xsZXJzOiB7XG5cdCAqIFx0XHRwcm9wMTogMSxcblx0ICogXHRcdHByb3AyOiAndmFsdWUnLFxuXHQgKiBcdFx0Li4uXG5cdCAqIFx0fSxcblx0ICogXHRmb2xkZXJzOiB7XG5cdCAqIFx0XHRmb2xkZXJOYW1lMTogeyBjb250cm9sbGVycywgZm9sZGVycyB9LFxuXHQgKiBcdFx0Zm9sZGVyTmFtZTI6IHsgY29udHJvbGxlcnMsIGZvbGRlcnMgfVxuXHQgKiBcdFx0Li4uXG5cdCAqIFx0fVxuXHQgKiB9XG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVjdXJzaXZlIFBhc3MgZmFsc2UgdG8gZXhjbHVkZSBmb2xkZXJzIGRlc2NlbmRpbmcgZnJvbSB0aGlzIEdVSS5cblx0ICogQHJldHVybnMge29iamVjdH1cblx0ICovXG5cdHNhdmUoIHJlY3Vyc2l2ZSA9IHRydWUgKSB7XG5cblx0XHRjb25zdCBvYmogPSB7XG5cdFx0XHRjb250cm9sbGVyczoge30sXG5cdFx0XHRmb2xkZXJzOiB7fVxuXHRcdH07XG5cblx0XHR0aGlzLmNvbnRyb2xsZXJzLmZvckVhY2goIGMgPT4ge1xuXG5cdFx0XHRpZiAoIGMgaW5zdGFuY2VvZiBGdW5jdGlvbkNvbnRyb2xsZXIgKSByZXR1cm47XG5cblx0XHRcdGlmICggYy5fbmFtZSBpbiBvYmouY29udHJvbGxlcnMgKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggYENhbm5vdCBzYXZlIEdVSSB3aXRoIGR1cGxpY2F0ZSBwcm9wZXJ0eSBcIiR7Yy5fbmFtZX1cImAgKTtcblx0XHRcdH1cblxuXHRcdFx0b2JqLmNvbnRyb2xsZXJzWyBjLl9uYW1lIF0gPSBjLnNhdmUoKTtcblxuXHRcdH0gKTtcblxuXHRcdGlmICggcmVjdXJzaXZlICkge1xuXG5cdFx0XHR0aGlzLmZvbGRlcnMuZm9yRWFjaCggZiA9PiB7XG5cblx0XHRcdFx0aWYgKCBmLl90aXRsZSBpbiBvYmouZm9sZGVycyApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIGBDYW5ub3Qgc2F2ZSBHVUkgd2l0aCBkdXBsaWNhdGUgZm9sZGVyIFwiJHtmLl90aXRsZX1cImAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG9iai5mb2xkZXJzWyBmLl90aXRsZSBdID0gZi5zYXZlKCk7XG5cblx0XHRcdH0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPcGVucyBhIEdVSSBvciBmb2xkZXIuIEdVSSBhbmQgZm9sZGVycyBhcmUgb3BlbiBieSBkZWZhdWx0LlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IG9wZW4gUGFzcyBmYWxzZSB0byBjbG9zZVxuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICogQGV4YW1wbGVcblx0ICogZ3VpLm9wZW4oKTsgLy8gb3BlblxuXHQgKiBndWkub3BlbiggZmFsc2UgKTsgLy8gY2xvc2Vcblx0ICogZ3VpLm9wZW4oIGd1aS5fY2xvc2VkICk7IC8vIHRvZ2dsZVxuXHQgKi9cblx0b3Blbiggb3BlbiA9IHRydWUgKSB7XG5cblx0XHR0aGlzLl9zZXRDbG9zZWQoICFvcGVuICk7XG5cblx0XHR0aGlzLiR0aXRsZS5zZXRBdHRyaWJ1dGUoICdhcmlhLWV4cGFuZGVkJywgIXRoaXMuX2Nsb3NlZCApO1xuXHRcdHRoaXMuZG9tRWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCAnY2xvc2VkJywgdGhpcy5fY2xvc2VkICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENsb3NlcyB0aGUgR1VJLlxuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICovXG5cdGNsb3NlKCkge1xuXHRcdHJldHVybiB0aGlzLm9wZW4oIGZhbHNlICk7XG5cdH1cblxuXHRfc2V0Q2xvc2VkKCBjbG9zZWQgKSB7XG5cdFx0aWYgKCB0aGlzLl9jbG9zZWQgPT09IGNsb3NlZCApIHJldHVybjtcblx0XHR0aGlzLl9jbG9zZWQgPSBjbG9zZWQ7XG5cdFx0dGhpcy5fY2FsbE9uT3BlbkNsb3NlKCB0aGlzICk7XG5cdH1cblxuXHQvKipcblx0ICogU2hvd3MgdGhlIEdVSSBhZnRlciBpdCdzIGJlZW4gaGlkZGVuLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHNob3dcblx0ICogQHJldHVybnMge3RoaXN9XG5cdCAqIEBleGFtcGxlXG5cdCAqIGd1aS5zaG93KCk7XG5cdCAqIGd1aS5zaG93KCBmYWxzZSApOyAvLyBoaWRlXG5cdCAqIGd1aS5zaG93KCBndWkuX2hpZGRlbiApOyAvLyB0b2dnbGVcblx0ICovXG5cdHNob3coIHNob3cgPSB0cnVlICkge1xuXG5cdFx0dGhpcy5faGlkZGVuID0gIXNob3c7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IHRoaXMuX2hpZGRlbiA/ICdub25lJyA6ICcnO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBIaWRlcyB0aGUgR1VJLlxuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICovXG5cdGhpZGUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2hvdyggZmFsc2UgKTtcblx0fVxuXG5cdG9wZW5BbmltYXRlZCggb3BlbiA9IHRydWUgKSB7XG5cblx0XHQvLyBzZXQgc3RhdGUgaW1tZWRpYXRlbHlcblx0XHR0aGlzLl9zZXRDbG9zZWQoICFvcGVuICk7XG5cblx0XHR0aGlzLiR0aXRsZS5zZXRBdHRyaWJ1dGUoICdhcmlhLWV4cGFuZGVkJywgIXRoaXMuX2Nsb3NlZCApO1xuXG5cdFx0Ly8gd2FpdCBmb3IgbmV4dCBmcmFtZSB0byBtZWFzdXJlICRjaGlsZHJlblxuXHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZSggKCkgPT4ge1xuXG5cdFx0XHQvLyBleHBsaWNpdGx5IHNldCBpbml0aWFsIGhlaWdodCBmb3IgdHJhbnNpdGlvblxuXHRcdFx0Y29uc3QgaW5pdGlhbEhlaWdodCA9IHRoaXMuJGNoaWxkcmVuLmNsaWVudEhlaWdodDtcblx0XHRcdHRoaXMuJGNoaWxkcmVuLnN0eWxlLmhlaWdodCA9IGluaXRpYWxIZWlnaHQgKyAncHgnO1xuXG5cdFx0XHR0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LmFkZCggJ3RyYW5zaXRpb24nICk7XG5cblx0XHRcdGNvbnN0IG9uVHJhbnNpdGlvbkVuZCA9IGUgPT4ge1xuXHRcdFx0XHRpZiAoIGUudGFyZ2V0ICE9PSB0aGlzLiRjaGlsZHJlbiApIHJldHVybjtcblx0XHRcdFx0dGhpcy4kY2hpbGRyZW4uc3R5bGUuaGVpZ2h0ID0gJyc7XG5cdFx0XHRcdHRoaXMuZG9tRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCAndHJhbnNpdGlvbicgKTtcblx0XHRcdFx0dGhpcy4kY2hpbGRyZW4ucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3RyYW5zaXRpb25lbmQnLCBvblRyYW5zaXRpb25FbmQgKTtcblx0XHRcdH07XG5cblx0XHRcdHRoaXMuJGNoaWxkcmVuLmFkZEV2ZW50TGlzdGVuZXIoICd0cmFuc2l0aW9uZW5kJywgb25UcmFuc2l0aW9uRW5kICk7XG5cblx0XHRcdC8vIHRvZG86IHRoaXMgaXMgd3JvbmcgaWYgY2hpbGRyZW4ncyBzY3JvbGxIZWlnaHQgbWFrZXMgZm9yIGEgZ3VpIHRhbGxlciB0aGFuIG1heEhlaWdodFxuXHRcdFx0Y29uc3QgdGFyZ2V0SGVpZ2h0ID0gIW9wZW4gPyAwIDogdGhpcy4kY2hpbGRyZW4uc2Nyb2xsSGVpZ2h0O1xuXG5cdFx0XHR0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSggJ2Nsb3NlZCcsICFvcGVuICk7XG5cblx0XHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZSggKCkgPT4ge1xuXHRcdFx0XHR0aGlzLiRjaGlsZHJlbi5zdHlsZS5oZWlnaHQgPSB0YXJnZXRIZWlnaHQgKyAncHgnO1xuXHRcdFx0fSApO1xuXG5cdFx0fSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDaGFuZ2UgdGhlIHRpdGxlIG9mIHRoaXMgR1VJLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcblx0ICogQHJldHVybnMge3RoaXN9XG5cdCAqL1xuXHR0aXRsZSggdGl0bGUgKSB7XG5cdFx0LyoqXG5cdFx0ICogQ3VycmVudCB0aXRsZSBvZiB0aGUgR1VJLiBVc2UgYGd1aS50aXRsZSggJ1RpdGxlJyApYCB0byBtb2RpZnkgdGhpcyB2YWx1ZS5cblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMuX3RpdGxlID0gdGl0bGU7XG5cdFx0dGhpcy4kdGl0bGUuaW5uZXJIVE1MID0gdGl0bGU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogUmVzZXRzIGFsbCBjb250cm9sbGVycyB0byB0aGVpciBpbml0aWFsIHZhbHVlcy5cblx0ICogQHBhcmFtIHtib29sZWFufSByZWN1cnNpdmUgUGFzcyBmYWxzZSB0byBleGNsdWRlIGZvbGRlcnMgZGVzY2VuZGluZyBmcm9tIHRoaXMgR1VJLlxuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICovXG5cdHJlc2V0KCByZWN1cnNpdmUgPSB0cnVlICkge1xuXHRcdGNvbnN0IGNvbnRyb2xsZXJzID0gcmVjdXJzaXZlID8gdGhpcy5jb250cm9sbGVyc1JlY3Vyc2l2ZSgpIDogdGhpcy5jb250cm9sbGVycztcblx0XHRjb250cm9sbGVycy5mb3JFYWNoKCBjID0+IGMucmVzZXQoKSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFBhc3MgYSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbmV2ZXIgYSBjb250cm9sbGVyIGluIHRoaXMgR1VJIGNoYW5nZXMuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24oe29iamVjdDpvYmplY3QsIHByb3BlcnR5OnN0cmluZywgdmFsdWU6YW55LCBjb250cm9sbGVyOkNvbnRyb2xsZXJ9KX0gY2FsbGJhY2tcblx0ICogQHJldHVybnMge3RoaXN9XG5cdCAqIEBleGFtcGxlXG5cdCAqIGd1aS5vbkNoYW5nZSggZXZlbnQgPT4ge1xuXHQgKiBcdGV2ZW50Lm9iamVjdCAgICAgLy8gb2JqZWN0IHRoYXQgd2FzIG1vZGlmaWVkXG5cdCAqIFx0ZXZlbnQucHJvcGVydHkgICAvLyBzdHJpbmcsIG5hbWUgb2YgcHJvcGVydHlcblx0ICogXHRldmVudC52YWx1ZSAgICAgIC8vIG5ldyB2YWx1ZSBvZiBjb250cm9sbGVyXG5cdCAqIFx0ZXZlbnQuY29udHJvbGxlciAvLyBjb250cm9sbGVyIHRoYXQgd2FzIG1vZGlmaWVkXG5cdCAqIH0gKTtcblx0ICovXG5cdG9uQ2hhbmdlKCBjYWxsYmFjayApIHtcblx0XHQvKipcblx0XHQgKiBVc2VkIHRvIGFjY2VzcyB0aGUgZnVuY3Rpb24gYm91bmQgdG8gYG9uQ2hhbmdlYCBldmVudHMuIERvbid0IG1vZGlmeSB0aGlzIHZhbHVlXG5cdFx0ICogZGlyZWN0bHkuIFVzZSB0aGUgYGd1aS5vbkNoYW5nZSggY2FsbGJhY2sgKWAgbWV0aG9kIGluc3RlYWQuXG5cdFx0ICogQHR5cGUge0Z1bmN0aW9ufVxuXHRcdCAqL1xuXHRcdHRoaXMuX29uQ2hhbmdlID0gY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRfY2FsbE9uQ2hhbmdlKCBjb250cm9sbGVyICkge1xuXG5cdFx0aWYgKCB0aGlzLnBhcmVudCApIHtcblx0XHRcdHRoaXMucGFyZW50Ll9jYWxsT25DaGFuZ2UoIGNvbnRyb2xsZXIgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuX29uQ2hhbmdlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLl9vbkNoYW5nZS5jYWxsKCB0aGlzLCB7XG5cdFx0XHRcdG9iamVjdDogY29udHJvbGxlci5vYmplY3QsXG5cdFx0XHRcdHByb3BlcnR5OiBjb250cm9sbGVyLnByb3BlcnR5LFxuXHRcdFx0XHR2YWx1ZTogY29udHJvbGxlci5nZXRWYWx1ZSgpLFxuXHRcdFx0XHRjb250cm9sbGVyXG5cdFx0XHR9ICk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFBhc3MgYSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbmV2ZXIgYSBjb250cm9sbGVyIGluIHRoaXMgR1VJIGhhcyBmaW5pc2hlZCBjaGFuZ2luZy5cblx0ICogQHBhcmFtIHtmdW5jdGlvbih7b2JqZWN0Om9iamVjdCwgcHJvcGVydHk6c3RyaW5nLCB2YWx1ZTphbnksIGNvbnRyb2xsZXI6Q29udHJvbGxlcn0pfSBjYWxsYmFja1xuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICogQGV4YW1wbGVcblx0ICogZ3VpLm9uRmluaXNoQ2hhbmdlKCBldmVudCA9PiB7XG5cdCAqIFx0ZXZlbnQub2JqZWN0ICAgICAvLyBvYmplY3QgdGhhdCB3YXMgbW9kaWZpZWRcblx0ICogXHRldmVudC5wcm9wZXJ0eSAgIC8vIHN0cmluZywgbmFtZSBvZiBwcm9wZXJ0eVxuXHQgKiBcdGV2ZW50LnZhbHVlICAgICAgLy8gbmV3IHZhbHVlIG9mIGNvbnRyb2xsZXJcblx0ICogXHRldmVudC5jb250cm9sbGVyIC8vIGNvbnRyb2xsZXIgdGhhdCB3YXMgbW9kaWZpZWRcblx0ICogfSApO1xuXHQgKi9cblx0b25GaW5pc2hDaGFuZ2UoIGNhbGxiYWNrICkge1xuXHRcdC8qKlxuXHRcdCAqIFVzZWQgdG8gYWNjZXNzIHRoZSBmdW5jdGlvbiBib3VuZCB0byBgb25GaW5pc2hDaGFuZ2VgIGV2ZW50cy4gRG9uJ3QgbW9kaWZ5IHRoaXMgdmFsdWVcblx0XHQgKiBkaXJlY3RseS4gVXNlIHRoZSBgZ3VpLm9uRmluaXNoQ2hhbmdlKCBjYWxsYmFjayApYCBtZXRob2QgaW5zdGVhZC5cblx0XHQgKiBAdHlwZSB7RnVuY3Rpb259XG5cdFx0ICovXG5cdFx0dGhpcy5fb25GaW5pc2hDaGFuZ2UgPSBjYWxsYmFjaztcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdF9jYWxsT25GaW5pc2hDaGFuZ2UoIGNvbnRyb2xsZXIgKSB7XG5cblx0XHRpZiAoIHRoaXMucGFyZW50ICkge1xuXHRcdFx0dGhpcy5wYXJlbnQuX2NhbGxPbkZpbmlzaENoYW5nZSggY29udHJvbGxlciApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5fb25GaW5pc2hDaGFuZ2UgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHRoaXMuX29uRmluaXNoQ2hhbmdlLmNhbGwoIHRoaXMsIHtcblx0XHRcdFx0b2JqZWN0OiBjb250cm9sbGVyLm9iamVjdCxcblx0XHRcdFx0cHJvcGVydHk6IGNvbnRyb2xsZXIucHJvcGVydHksXG5cdFx0XHRcdHZhbHVlOiBjb250cm9sbGVyLmdldFZhbHVlKCksXG5cdFx0XHRcdGNvbnRyb2xsZXJcblx0XHRcdH0gKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogUGFzcyBhIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoaXMgR1VJIG9yIGl0cyBkZXNjZW5kYW50cyBhcmUgb3BlbmVkIG9yIGNsb3NlZC5cblx0ICogQHBhcmFtIHtmdW5jdGlvbihHVUkpfSBjYWxsYmFja1xuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICogQGV4YW1wbGVcblx0ICogZ3VpLm9uT3BlbkNsb3NlKCBjaGFuZ2VkR1VJID0+IHtcblx0ICogXHRjb25zb2xlLmxvZyggY2hhbmdlZEdVSS5fY2xvc2VkICk7XG5cdCAqIH0gKTtcblx0ICovXG5cdG9uT3BlbkNsb3NlKCBjYWxsYmFjayApIHtcblx0XHR0aGlzLl9vbk9wZW5DbG9zZSA9IGNhbGxiYWNrO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0X2NhbGxPbk9wZW5DbG9zZSggY2hhbmdlZEdVSSApIHtcblx0XHRpZiAoIHRoaXMucGFyZW50ICkge1xuXHRcdFx0dGhpcy5wYXJlbnQuX2NhbGxPbk9wZW5DbG9zZSggY2hhbmdlZEdVSSApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5fb25PcGVuQ2xvc2UgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHRoaXMuX29uT3BlbkNsb3NlLmNhbGwoIHRoaXMsIGNoYW5nZWRHVUkgKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogRGVzdHJveXMgYWxsIERPTSBlbGVtZW50cyBhbmQgZXZlbnQgbGlzdGVuZXJzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIEdVSVxuXHQgKi9cblx0ZGVzdHJveSgpIHtcblxuXHRcdGlmICggdGhpcy5wYXJlbnQgKSB7XG5cdFx0XHR0aGlzLnBhcmVudC5jaGlsZHJlbi5zcGxpY2UoIHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YoIHRoaXMgKSwgMSApO1xuXHRcdFx0dGhpcy5wYXJlbnQuZm9sZGVycy5zcGxpY2UoIHRoaXMucGFyZW50LmZvbGRlcnMuaW5kZXhPZiggdGhpcyApLCAxICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmRvbUVsZW1lbnQucGFyZW50RWxlbWVudCApIHtcblx0XHRcdHRoaXMuZG9tRWxlbWVudC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKCB0aGlzLmRvbUVsZW1lbnQgKTtcblx0XHR9XG5cblx0XHRBcnJheS5mcm9tKCB0aGlzLmNoaWxkcmVuICkuZm9yRWFjaCggYyA9PiBjLmRlc3Ryb3koKSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBhcnJheSBvZiBjb250cm9sbGVycyBjb250YWluZWQgYnkgdGhpcyBHVUkgYW5kIGl0cyBkZXNjZW5kZW50cy5cblx0ICogQHJldHVybnMge0NvbnRyb2xsZXJbXX1cblx0ICovXG5cdGNvbnRyb2xsZXJzUmVjdXJzaXZlKCkge1xuXHRcdGxldCBjb250cm9sbGVycyA9IEFycmF5LmZyb20oIHRoaXMuY29udHJvbGxlcnMgKTtcblx0XHR0aGlzLmZvbGRlcnMuZm9yRWFjaCggZiA9PiB7XG5cdFx0XHRjb250cm9sbGVycyA9IGNvbnRyb2xsZXJzLmNvbmNhdCggZi5jb250cm9sbGVyc1JlY3Vyc2l2ZSgpICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiBjb250cm9sbGVycztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGZvbGRlcnMgY29udGFpbmVkIGJ5IHRoaXMgR1VJIGFuZCBpdHMgZGVzY2VuZGVudHMuXG5cdCAqIEByZXR1cm5zIHtHVUlbXX1cblx0ICovXG5cdGZvbGRlcnNSZWN1cnNpdmUoKSB7XG5cdFx0bGV0IGZvbGRlcnMgPSBBcnJheS5mcm9tKCB0aGlzLmZvbGRlcnMgKTtcblx0XHR0aGlzLmZvbGRlcnMuZm9yRWFjaCggZiA9PiB7XG5cdFx0XHRmb2xkZXJzID0gZm9sZGVycy5jb25jYXQoIGYuZm9sZGVyc1JlY3Vyc2l2ZSgpICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiBmb2xkZXJzO1xuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgR1VJO1xuZXhwb3J0IHsgQm9vbGVhbkNvbnRyb2xsZXIsIENvbG9yQ29udHJvbGxlciwgQ29udHJvbGxlciwgRnVuY3Rpb25Db250cm9sbGVyLCBHVUksIE51bWJlckNvbnRyb2xsZXIsIE9wdGlvbkNvbnRyb2xsZXIsIFN0cmluZ0NvbnRyb2xsZXIgfTtcbiIsImZ1bmN0aW9uIGNsYW1wKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB2YWx1ZSkpO1xufVxuXG5jbGFzcyBUd2VlbiB7XG4gICAgcHVibGljIGFjY3VtdWxhdG9yOiBudW1iZXI7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgaW5kZXg6IG51bWJlcixcbiAgICAgICAgcHVibGljIGR1cmF0aW9uOiBudW1iZXIsXG4gICAgICAgIHB1YmxpYyByZXNvbHZlOiAoKSA9PiB2b2lkLFxuICAgICAgICBwdWJsaWMgY2FsbGJhY2s6IChwcm9ncmVzczogbnVtYmVyKSA9PiB2b2lkLFxuICAgICkge1xuICAgICAgICB0aGlzLmFjY3VtdWxhdG9yID0gMDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZmlyZUNhbGxiYWNrKCk6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IHByb2dyZXNzID0gY2xhbXAodGhpcy5hY2N1bXVsYXRvciAvIHRoaXMuZHVyYXRpb24pO1xuXG4gICAgICAgIHRoaXMuY2FsbGJhY2socHJvZ3Jlc3MpO1xuICAgICAgICByZXR1cm4gcHJvZ3Jlc3M7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFR3ZWVuUnVubmVyIHtcbiAgICBwcml2YXRlIGNhY2hlOiBUd2VlbltdO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNhY2hlID0gW107XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGNyZWF0ZShkdXJhdGlvbjogbnVtYmVyLCBjYWxsYmFjazogKHByb2dyZXNzOiBudW1iZXIpID0+IHZvaWQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmNhY2hlLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IHR3ZWVuID0gbmV3IFR3ZWVuKGluZGV4LCBkdXJhdGlvbiwgcmVzb2x2ZSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgdGhpcy5jYWNoZS5wdXNoKHR3ZWVuKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHRpbWVzdGVwKGR0OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuY2FjaGUubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIGNvbnN0IHR3ZWVuID0gdGhpcy5jYWNoZVtpXTtcbiAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzID0gdGhpcy5jYWNoZVtpXS5maXJlQ2FsbGJhY2soKTtcblxuICAgICAgICAgICAgaWYgKHByb2dyZXNzID49IDEpIHtcbiAgICAgICAgICAgICAgICB0d2Vlbi5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuZmlsdGVyKGVsID0+IGVsICE9PSB0d2Vlbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHR3ZWVuLmFjY3VtdWxhdG9yICs9IGR0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEdMUHJvZ3JhbSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBwdWJsaWMgcmVhZG9ubHkgdW5pZm9ybXM6IFJlY29yZDxzdHJpbmcsIGFueT47XG4gICAgcHVibGljIHJlYWRvbmx5IGdsOiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0O1xuICAgIHB1YmxpYyByZWFkb25seSBwcm9ncmFtOiBXZWJHTFByb2dyYW07XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZ2w6IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQsIHZlcnRleFNoYWRlcjogV2ViR0xTaGFkZXIsIGZyYWdtZW50U2hhZGVyOiBXZWJHTFNoYWRlcikge1xuICAgICAgICB0aGlzLmdsID0gZ2w7XG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSB7fTtcbiAgICAgICAgY29uc3QgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcbiAgICAgICAgaWYgKCFwcm9ncmFtKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuXG4gICAgICAgIGdsLmF0dGFjaFNoYWRlcih0aGlzLnByb2dyYW0sIHZlcnRleFNoYWRlcik7XG4gICAgICAgIGdsLmF0dGFjaFNoYWRlcih0aGlzLnByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcbiAgICAgICAgZ2wubGlua1Byb2dyYW0odGhpcy5wcm9ncmFtKTtcblxuICAgICAgICBpZiAoIWdsLmdldFByb2dyYW1QYXJhbWV0ZXIodGhpcy5wcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpIHtcbiAgICAgICAgICAgIHRocm93IGdsLmdldFByb2dyYW1JbmZvTG9nKHRoaXMucHJvZ3JhbSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1bmlmb3JtQ291bnQgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHRoaXMucHJvZ3JhbSwgZ2wuQUNUSVZFX1VOSUZPUk1TKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1bmlmb3JtQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdW5pZm9ybU5hbWUgPSBnbC5nZXRBY3RpdmVVbmlmb3JtKHRoaXMucHJvZ3JhbSwgaSk/Lm5hbWU7XG4gICAgICAgICAgICBpZiAodW5pZm9ybU5hbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuaWZvcm1zW3VuaWZvcm1OYW1lXSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIHVuaWZvcm1OYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBiaW5kKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICB9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5pbXBvcnQgeyBHTFByb2dyYW0gfSBmcm9tIFwiLi9HTFByb2dyYW1cIjtcblxuaW1wb3J0IGFkdmVjdGlvbkdMU0wgZnJvbSBcIi4vc2hhZGVycy9hZHZlY3Rpb24uZ2xzbFwiO1xuaW1wb3J0IGJhc2VWZXJ0ZXhHTFNMIGZyb20gXCIuL3NoYWRlcnMvYmFzZVZlcnRleC5nbHNsXCI7XG5pbXBvcnQgY2xlYXJHTFNMIGZyb20gXCIuL3NoYWRlcnMvY2xlYXIuZ2xzbFwiO1xuaW1wb3J0IGN1cmxHTFNMIGZyb20gXCIuL3NoYWRlcnMvY3VybC5nbHNsXCI7XG5pbXBvcnQgZGlzcGxheUdMU0wgZnJvbSBcIi4vc2hhZGVycy9kaXNwbGF5Lmdsc2xcIjtcbmltcG9ydCBkaXZlcmdlbmNlR0xTTCBmcm9tIFwiLi9zaGFkZXJzL2RpdmVyZ2VuY2UuZ2xzbFwiO1xuaW1wb3J0IGdyYWRpZW50U3VidHJhY3RHTFNMIGZyb20gXCIuL3NoYWRlcnMvZ3JhZGllbnRTdWJ0cmFjdC5nbHNsXCI7XG5pbXBvcnQgcHJlc3N1cmVHTFNMIGZyb20gXCIuL3NoYWRlcnMvcHJlc3N1cmUuZ2xzbFwiO1xuaW1wb3J0IHNwbGF0R0xTTCBmcm9tIFwiLi9zaGFkZXJzL3NwbGF0Lmdsc2xcIjtcbmltcG9ydCB2b3J0aWNpdHlHTFNMIGZyb20gXCIuL3NoYWRlcnMvdm9ydGljaXR5Lmdsc2xcIjtcblxuaW50ZXJmYWNlIElGbHVpZFJlbmRlcmVyIHtcbiAgICBnbDogV2ViR0wyUmVuZGVyaW5nQ29udGV4dDtcbiAgICBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xufVxuXG5pbnRlcmZhY2UgSUZyYW1lQnVmZmVyT2JqZWN0IHtcbiAgICB0ZXh0dXJlOiBXZWJHTFRleHR1cmUgfCBudWxsO1xuICAgIGZyYW1lYnVmZmVyOiBXZWJHTEZyYW1lYnVmZmVyIHwgbnVsbDtcbiAgICB0ZXh0SWQ6IG51bWJlcjtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEb3VibGVGcmFtZUJ1ZmZlck9iamVjdCB7XG4gICAgcmVhZDogSUZyYW1lQnVmZmVyT2JqZWN0O1xuICAgIHdyaXRlOiBJRnJhbWVCdWZmZXJPYmplY3Q7XG4gICAgc3dhcDogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlbmRlcmVyKCk6IElGbHVpZFJlbmRlcmVyIHtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgIE9iamVjdC5hc3NpZ24oY2FudmFzLnN0eWxlLCB7XG4gICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICAvLyBwb2ludGVyRXZlbnRzOiBcIm5vbmVcIixcbiAgICB9KTtcbiAgICBjb25zdCBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2wyXCIsIHsgYWxwaGE6IHRydWUgfSkgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dDtcbiAgICBnbC5jbGVhckNvbG9yKDAuMCwgMC4wLCAwLjAsIDEuMCk7XG4gICAgZ2wuZ2V0RXh0ZW5zaW9uKFwiRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdFwiKTtcbiAgICBnbC5nZXRFeHRlbnNpb24oXCJPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXJcIik7XG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGdsLmNyZWF0ZUJ1ZmZlcigpKTtcbiAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheShbLTEsIC0xLCAtMSwgMSwgMSwgMSwgMSwgLTFdKSwgZ2wuU1RBVElDX0RSQVcpO1xuICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGdsLmNyZWF0ZUJ1ZmZlcigpKTtcbiAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBuZXcgVWludDE2QXJyYXkoWzAsIDEsIDIsIDAsIDIsIDNdKSwgZ2wuU1RBVElDX0RSQVcpO1xuICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoMCwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcbiAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSgwKTtcbiAgICByZXR1cm4geyBjYW52YXM6IGNhbnZhcywgZ2w6IGdsIH07XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVTaGFkZXIoZ2w6IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQsIHR5cGU6IG51bWJlciwgc291cmNlOiBzdHJpbmcpOiBXZWJHTFNoYWRlciB7XG4gICAgY29uc3Qgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKHR5cGUpIGFzIFdlYkdMU2hhZGVyO1xuICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XG4gICAgZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xuXG4gICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUykpIHtcbiAgICAgICAgdGhyb3cgZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBzaGFkZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm9ncmFtcyhnbDogV2ViR0wyUmVuZGVyaW5nQ29udGV4dCk6IFJlY29yZDxzdHJpbmcsIEdMUHJvZ3JhbT4ge1xuICAgIGNvbnN0IHByb2dyYW1zOiBSZWNvcmQ8c3RyaW5nLCBHTFByb2dyYW0+ID0ge307XG5cbiAgICBjb25zdCBiYXNlVmVydGV4U2hhZGVyID0gY29tcGlsZVNoYWRlcihnbCwgZ2wuVkVSVEVYX1NIQURFUiwgYmFzZVZlcnRleEdMU0wpO1xuICAgIGNvbnN0IGNsZWFyU2hhZGVyID0gY29tcGlsZVNoYWRlcihnbCwgZ2wuRlJBR01FTlRfU0hBREVSLCBjbGVhckdMU0wpO1xuICAgIGNvbnN0IGRpc3BsYXlTaGFkZXIgPSBjb21waWxlU2hhZGVyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIGRpc3BsYXlHTFNMKTtcbiAgICBjb25zdCBzcGxhdFNoYWRlciA9IGNvbXBpbGVTaGFkZXIoZ2wsIGdsLkZSQUdNRU5UX1NIQURFUiwgc3BsYXRHTFNMKTtcbiAgICBjb25zdCBhZHZlY3Rpb25TaGFkZXIgPSBjb21waWxlU2hhZGVyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIGFkdmVjdGlvbkdMU0wpO1xuICAgIGNvbnN0IGRpdmVyZ2VuY2VTaGFkZXIgPSBjb21waWxlU2hhZGVyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIGRpdmVyZ2VuY2VHTFNMKTtcbiAgICBjb25zdCBjdXJsU2hhZGVyID0gY29tcGlsZVNoYWRlcihnbCwgZ2wuRlJBR01FTlRfU0hBREVSLCBjdXJsR0xTTCk7XG4gICAgY29uc3Qgdm9ydGljaXR5U2hhZGVyID0gY29tcGlsZVNoYWRlcihnbCwgZ2wuRlJBR01FTlRfU0hBREVSLCB2b3J0aWNpdHlHTFNMKTtcbiAgICBjb25zdCBwcmVzc3VyZVNoYWRlciA9IGNvbXBpbGVTaGFkZXIoZ2wsIGdsLkZSQUdNRU5UX1NIQURFUiwgcHJlc3N1cmVHTFNMKTtcbiAgICBjb25zdCBncmFkaWVudFN1YnRyYWN0U2hhZGVyID0gY29tcGlsZVNoYWRlcihnbCwgZ2wuRlJBR01FTlRfU0hBREVSLCBncmFkaWVudFN1YnRyYWN0R0xTTCk7XG5cbiAgICBwcm9ncmFtcy5jbGVhciA9IG5ldyBHTFByb2dyYW0oZ2wsIGJhc2VWZXJ0ZXhTaGFkZXIsIGNsZWFyU2hhZGVyKTtcbiAgICBwcm9ncmFtcy5kaXNwbGF5ID0gbmV3IEdMUHJvZ3JhbShnbCwgYmFzZVZlcnRleFNoYWRlciwgZGlzcGxheVNoYWRlcik7XG4gICAgcHJvZ3JhbXMuc3BsYXQgPSBuZXcgR0xQcm9ncmFtKGdsLCBiYXNlVmVydGV4U2hhZGVyLCBzcGxhdFNoYWRlcik7XG4gICAgcHJvZ3JhbXMuYWR2ZWN0aW9uID0gbmV3IEdMUHJvZ3JhbShnbCwgYmFzZVZlcnRleFNoYWRlciwgYWR2ZWN0aW9uU2hhZGVyKTtcbiAgICBwcm9ncmFtcy5kaXZlcmdlbmNlID0gbmV3IEdMUHJvZ3JhbShnbCwgYmFzZVZlcnRleFNoYWRlciwgZGl2ZXJnZW5jZVNoYWRlcik7XG4gICAgcHJvZ3JhbXMuY3VybCA9IG5ldyBHTFByb2dyYW0oZ2wsIGJhc2VWZXJ0ZXhTaGFkZXIsIGN1cmxTaGFkZXIpO1xuICAgIHByb2dyYW1zLnZvcnRpY2l0eSA9IG5ldyBHTFByb2dyYW0oZ2wsIGJhc2VWZXJ0ZXhTaGFkZXIsIHZvcnRpY2l0eVNoYWRlcik7XG4gICAgcHJvZ3JhbXMucHJlc3N1cmUgPSBuZXcgR0xQcm9ncmFtKGdsLCBiYXNlVmVydGV4U2hhZGVyLCBwcmVzc3VyZVNoYWRlcik7XG4gICAgcHJvZ3JhbXMuZ3JhZGllblN1YnRyYWN0ID0gbmV3IEdMUHJvZ3JhbShnbCwgYmFzZVZlcnRleFNoYWRlciwgZ3JhZGllbnRTdWJ0cmFjdFNoYWRlcik7XG5cbiAgICByZXR1cm4gcHJvZ3JhbXM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYW1lQnVmZmVyT2JqZWN0KFxuICAgIGdsOiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxuICAgIHRleHRJZDogbnVtYmVyLFxuICAgIHc6IG51bWJlcixcbiAgICBoOiBudW1iZXIsXG4gICAgaW50ZXJuYWxGb3JtYXQ6IG51bWJlcixcbiAgICBmb3JtYXQ6IG51bWJlcixcbiAgICB0eXBlOiBudW1iZXIsXG4gICAgcGFyYW06IG51bWJlcixcbik6IElGcmFtZUJ1ZmZlck9iamVjdCB7XG4gICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCArIHRleHRJZCk7XG4gICAgY29uc3QgdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgcGFyYW0pO1xuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBwYXJhbSk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBpbnRlcm5hbEZvcm1hdCwgdywgaCwgMCwgZm9ybWF0LCB0eXBlLCBudWxsKTtcblxuICAgIGNvbnN0IGZyYW1lYnVmZmVyID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcbiAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGZyYW1lYnVmZmVyKTtcbiAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChnbC5GUkFNRUJVRkZFUiwgZ2wuQ09MT1JfQVRUQUNITUVOVDAsIGdsLlRFWFRVUkVfMkQsIHRleHR1cmUsIDApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IDEgLyB3LFxuICAgICAgICBoZWlnaHQ6IDEgLyBoLFxuICAgICAgICB0ZXh0dXJlOiB0ZXh0dXJlLFxuICAgICAgICBmcmFtZWJ1ZmZlcjogZnJhbWVidWZmZXIsXG4gICAgICAgIHRleHRJZDogdGV4dElkLFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURvdWJsZUZyYW1lQnVmZmVyT2JqZWN0KFxuICAgIGdsOiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxuICAgIHRleElkOiBudW1iZXIsXG4gICAgdzogbnVtYmVyLFxuICAgIGg6IG51bWJlcixcbiAgICBpbnRlcm5hbEZvcm1hdDogbnVtYmVyLFxuICAgIGZvcm1hdDogbnVtYmVyLFxuICAgIHR5cGU6IG51bWJlcixcbiAgICBwYXJhbTogbnVtYmVyLFxuKTogSURvdWJsZUZyYW1lQnVmZmVyT2JqZWN0IHtcbiAgICBsZXQgZmJvMSA9IGNyZWF0ZUZyYW1lQnVmZmVyT2JqZWN0KGdsLCB0ZXhJZCwgdywgaCwgaW50ZXJuYWxGb3JtYXQsIGZvcm1hdCwgdHlwZSwgcGFyYW0pO1xuICAgIGxldCBmYm8yID0gY3JlYXRlRnJhbWVCdWZmZXJPYmplY3QoZ2wsIHRleElkICsgMSwgdywgaCwgaW50ZXJuYWxGb3JtYXQsIGZvcm1hdCwgdHlwZSwgcGFyYW0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0IHJlYWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmJvMTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IHdyaXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZibzI7XG4gICAgICAgIH0sXG4gICAgICAgIHN3YXA6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBmYm8xO1xuICAgICAgICAgICAgZmJvMSA9IGZibzI7XG4gICAgICAgICAgICBmYm8yID0gdGVtcDtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGV4dHVyZVdpZHRoQW5kSGVpZ2h0KGdsOiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KTogeyB0ZXh0dXJlV2lkdGg6IG51bWJlcjsgdGV4dHVyZUhlaWdodDogbnVtYmVyOyB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0ZXh0dXJlV2lkdGg6IGdsLmRyYXdpbmdCdWZmZXJXaWR0aCA+PiAxLFxuICAgICAgICB0ZXh0dXJlSGVpZ2h0OiBnbC5kcmF3aW5nQnVmZmVySGVpZ2h0ID4+IDEsXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZyYW1lYnVmZmVycyhcbiAgICBnbDogV2ViR0wyUmVuZGVyaW5nQ29udGV4dCxcbiAgICB3OiBudW1iZXIsXG4gICAgaDogbnVtYmVyLFxuKTogUmVjb3JkPHN0cmluZywgSURvdWJsZUZyYW1lQnVmZmVyT2JqZWN0PiB7XG4gICAgY29uc3QgZnJhbWVidWZmZXJzOiBSZWNvcmQ8c3RyaW5nLCBJRG91YmxlRnJhbWVCdWZmZXJPYmplY3Q+ID0ge307XG5cbiAgICBjb25zdCB0ZXhUeXBlID0gZ2wuSEFMRl9GTE9BVDtcbiAgICBjb25zdCByZ2JhID0geyBpZjogZ2wuUkdCQTE2RiwgZjogZ2wuUkdCQSB9O1xuICAgIGNvbnN0IHJnID0geyBpZjogZ2wuUkcxNkYsIGY6IGdsLlJHIH07XG4gICAgY29uc3QgciA9IHsgaWY6IGdsLlIxNkYsIGY6IGdsLlJFRCB9O1xuXG4gICAgZnJhbWVidWZmZXJzLnZlbG9jaXR5ID0gY3JlYXRlRG91YmxlRnJhbWVCdWZmZXJPYmplY3QoZ2wsIDAsIHcsIGgsIHJnLmlmLCByZy5mLCB0ZXhUeXBlLCBnbC5MSU5FQVIpO1xuICAgIGZyYW1lYnVmZmVycy5kZW5zaXR5ID0gY3JlYXRlRG91YmxlRnJhbWVCdWZmZXJPYmplY3QoZ2wsIDIsIHcsIGgsIHJnYmEuaWYsIHJnYmEuZiwgdGV4VHlwZSwgZ2wuTElORUFSKTtcbiAgICBmcmFtZWJ1ZmZlcnMuZGl2ZXJnZW5jZSA9IGNyZWF0ZURvdWJsZUZyYW1lQnVmZmVyT2JqZWN0KGdsLCA0LCB3LCBoLCByLmlmLCByLmYsIHRleFR5cGUsIGdsLk5FQVJFU1QpO1xuICAgIGZyYW1lYnVmZmVycy5jdXJsID0gY3JlYXRlRG91YmxlRnJhbWVCdWZmZXJPYmplY3QoZ2wsIDYsIHcsIGgsIHIuaWYsIHIuZiwgdGV4VHlwZSwgZ2wuTkVBUkVTVCk7XG4gICAgZnJhbWVidWZmZXJzLnByZXNzdXJlID0gY3JlYXRlRG91YmxlRnJhbWVCdWZmZXJPYmplY3QoZ2wsIDgsIHcsIGgsIHIuaWYsIHIuZiwgdGV4VHlwZSwgZ2wuTkVBUkVTVCk7XG5cbiAgICByZXR1cm4gZnJhbWVidWZmZXJzO1xufVxuIiwiaW1wb3J0IHsgdHlwZSBHYW1lIH0gZnJvbSBcIi4uL0dhbWVcIjtcblxuaW1wb3J0IHtcbiAgICBjcmVhdGVGcmFtZWJ1ZmZlcnMsXG4gICAgY3JlYXRlUHJvZ3JhbXMsXG4gICAgY3JlYXRlUmVuZGVyZXIsXG4gICAgZ2V0VGV4dHVyZVdpZHRoQW5kSGVpZ2h0LFxuICAgIHR5cGUgSURvdWJsZUZyYW1lQnVmZmVyT2JqZWN0LFxufSBmcm9tIFwiLi9mbHVpZFV0aWxzXCI7XG5pbXBvcnQgeyB0eXBlIEdMUHJvZ3JhbSB9IGZyb20gXCIuL0dMUHJvZ3JhbVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElTcGxhdCB7XG4gICAgeDogbnVtYmVyO1xuICAgIHk6IG51bWJlcjtcbiAgICBkeDogbnVtYmVyO1xuICAgIGR5OiBudW1iZXI7XG4gICAgbW92ZWQ6IGJvb2xlYW47XG4gICAgZG93bjogYm9vbGVhbjtcbiAgICBlbWl0VGltZTogbnVtYmVyO1xuICAgIGNvbG9yOiBbcjogbnVtYmVyLCBnOiBudW1iZXIsIGI6IG51bWJlcl07XG59XG5cbmludGVyZmFjZSBJRmx1aWRDb25maWcge1xuICAgIGRlbnNpdHlEaXNzaXBhdGlvbjogbnVtYmVyO1xuICAgIHZlbG9jaXR5RGlzc2lwYXRpb246IG51bWJlcjtcbiAgICBwcmVzc3VyZURpc3NpcGF0aW9uOiBudW1iZXI7XG4gICAgcHJlc3N1cmVJdGVyYXRpb25zOiBudW1iZXI7XG4gICAgY3VybDogbnVtYmVyO1xuICAgIHNwbGF0UmFkaXVzOiBudW1iZXI7XG59XG5cbmNvbnN0IGRlZmF1bHRDb25maWc6IElGbHVpZENvbmZpZyA9IHtcbiAgICBkZW5zaXR5RGlzc2lwYXRpb246IDAuOTgsXG4gICAgdmVsb2NpdHlEaXNzaXBhdGlvbjogMC45OSxcbiAgICBwcmVzc3VyZURpc3NpcGF0aW9uOiAwLjgsXG4gICAgcHJlc3N1cmVJdGVyYXRpb25zOiAyNSxcbiAgICBjdXJsOiAzMCxcbiAgICBzcGxhdFJhZGl1czogMC4wMDE1LFxufTtcblxuZXhwb3J0IGNsYXNzIEZsdWlkIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29uZmlnOiBJRmx1aWRDb25maWc7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGdhbWU6IEdhbWU7XG4gICAgcHJpdmF0ZSByZWFkb25seSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2w6IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9ncmFtczogUmVjb3JkPHN0cmluZywgR0xQcm9ncmFtPjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZyYW1lYnVmZmVyczogUmVjb3JkPHN0cmluZywgSURvdWJsZUZyYW1lQnVmZmVyT2JqZWN0PjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1vdXNlU3BsYXQ6IElTcGxhdDtcblxuICAgIHByaXZhdGUgc3BsYXRzOiBJU3BsYXRbXTtcbiAgICBwcml2YXRlIHRleHR1cmVXaWR0aDogbnVtYmVyO1xuICAgIHByaXZhdGUgdGV4dHVyZUhlaWdodDogbnVtYmVyO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGdhbWU6IEdhbWUsIGNvbmZpZz86IFBhcnRpYWw8SUZsdWlkQ29uZmlnPikge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IHsgLi4uZGVmYXVsdENvbmZpZywgLi4uY29uZmlnIH07XG4gICAgICAgIGNvbnN0IHsgY2FudmFzLCBnbCB9ID0gY3JlYXRlUmVuZGVyZXIoKTtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy5wcm9ncmFtcyA9IGNyZWF0ZVByb2dyYW1zKGdsKTtcbiAgICAgICAgdGhpcy50ZXh0dXJlSGVpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy50ZXh0dXJlV2lkdGggPSAwO1xuICAgICAgICB0aGlzLmZyYW1lYnVmZmVycyA9IHt9O1xuICAgICAgICB0aGlzLm1vdXNlU3BsYXQgPSB0aGlzLm1ha2VTcGxhdCgpO1xuICAgICAgICB0aGlzLnNwbGF0cyA9IFtdO1xuXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5jYW52YXMpO1xuICAgICAgICB0aGlzLnNldExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pbml0RnJhbWVidWZmZXJzKCk7XG4gICAgICAgIHRoaXMuc3BsYXRzID0gW107XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGVtaXRTcGxhdHMoc3BsYXRzOiBJU3BsYXRbXSwgZW1pdFRpbWUgPSAzMDAwLCB3YWl0VGltZSA9IDMwMDApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5zcGxhdHMgPSBzcGxhdHM7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5nYW1lLnR3ZWVuUnVubmVyLmNyZWF0ZShlbWl0VGltZSwgKHByb2dyZXNzOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIHNwbGF0cy5mb3JFYWNoKHNwbGF0ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3MgPCBzcGxhdC5lbWl0VGltZSkge1xuICAgICAgICAgICAgICAgICAgICBzcGxhdC5tb3ZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCB0aGlzLmdhbWUudHdlZW5SdW5uZXIuY3JlYXRlKHdhaXRUaW1lLCAoKSA9PiB7fSk7XG4gICAgfVxuXG4gICAgcHVibGljIG1ha2VTcGxhdCgpOiBJU3BsYXQge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICBkeDogMCxcbiAgICAgICAgICAgIGR5OiAwLFxuICAgICAgICAgICAgZW1pdFRpbWU6IDEsXG4gICAgICAgICAgICBtb3ZlZDogZmFsc2UsXG4gICAgICAgICAgICBkb3duOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbG9yOiBbMCwgMCwgMF0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHRpbWVzdGVwKGR0OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGUoZHQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzaXplQ2FudmFzKCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IGNhbnZhcyB9ID0gdGhpcztcbiAgICAgICAgaWYgKGNhbnZhcy53aWR0aCAhPT0gY2FudmFzLmNsaWVudFdpZHRoIHx8IGNhbnZhcy5oZWlnaHQgIT09IGNhbnZhcy5jbGllbnRIZWlnaHQpIHtcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGNhbnZhcy5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXMuY2xpZW50SGVpZ2h0O1xuICAgICAgICAgICAgY29uc3QgeyB0ZXh0dXJlV2lkdGgsIHRleHR1cmVIZWlnaHQgfSA9IGdldFRleHR1cmVXaWR0aEFuZEhlaWdodCh0aGlzLmdsKTtcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZVdpZHRoID0gdGV4dHVyZVdpZHRoO1xuICAgICAgICAgICAgdGhpcy50ZXh0dXJlSGVpZ2h0ID0gdGV4dHVyZUhlaWdodDtcbiAgICAgICAgICAgIHRoaXMuaW5pdEZyYW1lYnVmZmVycygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0RnJhbWVidWZmZXJzKCk6IHZvaWQge1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuZnJhbWVidWZmZXJzLCBjcmVhdGVGcmFtZWJ1ZmZlcnModGhpcy5nbCwgdGhpcy50ZXh0dXJlV2lkdGgsIHRoaXMudGV4dHVyZUhlaWdodCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYmxpdChkZXN0aW5hdGlvbjogV2ViR0xGcmFtZWJ1ZmZlciB8IG51bGwpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBnbCB9ID0gdGhpcztcbiAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIGdsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRVMsIDYsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNwbGF0KHg6IG51bWJlciwgeTogbnVtYmVyLCBkeDogbnVtYmVyLCBkeTogbnVtYmVyLCBjb2xvcjogbnVtYmVyW10pIHtcbiAgICAgICAgY29uc3QgeyBnbCwgcHJvZ3JhbXMsIGNhbnZhcywgZnJhbWVidWZmZXJzOiBmYiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBzcGxhdCB9ID0gcHJvZ3JhbXM7XG4gICAgICAgIHNwbGF0LmJpbmQoKTtcbiAgICAgICAgZ2wudW5pZm9ybTFpKHNwbGF0LnVuaWZvcm1zLnVUYXJnZXQsIGZiLnZlbG9jaXR5LnJlYWQudGV4dElkKTtcbiAgICAgICAgZ2wudW5pZm9ybTFmKHNwbGF0LnVuaWZvcm1zLmFzcGVjdFJhdGlvLCBjYW52YXMud2lkdGggLyBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgZ2wudW5pZm9ybTJmKHNwbGF0LnVuaWZvcm1zLnBvaW50LCB4IC8gY2FudmFzLndpZHRoLCAxLjAgLSB5IC8gY2FudmFzLmhlaWdodCk7XG4gICAgICAgIGdsLnVuaWZvcm0zZihzcGxhdC51bmlmb3Jtcy5jb2xvciwgZHgsIC1keSwgMS4wKTtcbiAgICAgICAgZ2wudW5pZm9ybTFmKHNwbGF0LnVuaWZvcm1zLnJhZGl1cywgdGhpcy5jb25maWcuc3BsYXRSYWRpdXMpO1xuICAgICAgICB0aGlzLmJsaXQoZmIudmVsb2NpdHkud3JpdGUuZnJhbWVidWZmZXIpO1xuICAgICAgICBmYi52ZWxvY2l0eS5zd2FwKCk7XG5cbiAgICAgICAgZ2wudW5pZm9ybTFpKHNwbGF0LnVuaWZvcm1zLnVUYXJnZXQsIGZiLmRlbnNpdHkucmVhZC50ZXh0SWQpO1xuICAgICAgICBnbC51bmlmb3JtM2Yoc3BsYXQudW5pZm9ybXMuY29sb3IsIGNvbG9yWzBdICogMC4zLCBjb2xvclsxXSAqIDAuMywgY29sb3JbMl0gKiAwLjMpO1xuICAgICAgICB0aGlzLmJsaXQoZmIuZGVuc2l0eS53cml0ZS5mcmFtZWJ1ZmZlcik7XG4gICAgICAgIGZiLmRlbnNpdHkuc3dhcCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlKGR0OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBnbCwgdGV4dHVyZVdpZHRoLCB0ZXh0dXJlSGVpZ2h0LCBwcm9ncmFtcywgZnJhbWVidWZmZXJzOiBmYiwgbW91c2VTcGxhdCB9ID0gdGhpcztcbiAgICAgICAgdGhpcy5yZXNpemVDYW52YXMoKTtcbiAgICAgICAgZ2wudmlld3BvcnQoMCwgMCwgdGV4dHVyZVdpZHRoLCB0ZXh0dXJlSGVpZ2h0KTtcblxuICAgICAgICBwcm9ncmFtcy5hZHZlY3Rpb24uYmluZCgpO1xuICAgICAgICBnbC51bmlmb3JtMmYocHJvZ3JhbXMuYWR2ZWN0aW9uLnVuaWZvcm1zLnRleGVsU2l6ZSwgZmIudmVsb2NpdHkucmVhZC53aWR0aCwgZmIudmVsb2NpdHkucmVhZC5oZWlnaHQpO1xuICAgICAgICBnbC51bmlmb3JtMWkocHJvZ3JhbXMuYWR2ZWN0aW9uLnVuaWZvcm1zLnVWZWxvY2l0eSwgZmIudmVsb2NpdHkucmVhZC50ZXh0SWQpO1xuICAgICAgICBnbC51bmlmb3JtMWkocHJvZ3JhbXMuYWR2ZWN0aW9uLnVuaWZvcm1zLnVTb3VyY2UsIGZiLnZlbG9jaXR5LnJlYWQudGV4dElkKTtcbiAgICAgICAgZ2wudW5pZm9ybTFmKHByb2dyYW1zLmFkdmVjdGlvbi51bmlmb3Jtcy5kdCwgZHQpO1xuICAgICAgICBnbC51bmlmb3JtMWYocHJvZ3JhbXMuYWR2ZWN0aW9uLnVuaWZvcm1zLmRpc3NpcGF0aW9uLCB0aGlzLmNvbmZpZy52ZWxvY2l0eURpc3NpcGF0aW9uKTtcbiAgICAgICAgdGhpcy5ibGl0KGZiLnZlbG9jaXR5LndyaXRlLmZyYW1lYnVmZmVyKTtcbiAgICAgICAgZmIudmVsb2NpdHkuc3dhcCgpO1xuXG4gICAgICAgIGdsLnVuaWZvcm0xaShwcm9ncmFtcy5hZHZlY3Rpb24udW5pZm9ybXMudVZlbG9jaXR5LCBmYi52ZWxvY2l0eS5yZWFkLnRleHRJZCk7XG4gICAgICAgIGdsLnVuaWZvcm0xaShwcm9ncmFtcy5hZHZlY3Rpb24udW5pZm9ybXMudVNvdXJjZSwgZmIuZGVuc2l0eS5yZWFkLnRleHRJZCk7XG4gICAgICAgIGdsLnVuaWZvcm0xZihwcm9ncmFtcy5hZHZlY3Rpb24udW5pZm9ybXMuZGlzc2lwYXRpb24sIHRoaXMuY29uZmlnLmRlbnNpdHlEaXNzaXBhdGlvbik7XG4gICAgICAgIHRoaXMuYmxpdChmYi5kZW5zaXR5LndyaXRlLmZyYW1lYnVmZmVyKTtcbiAgICAgICAgZmIuZGVuc2l0eS5zd2FwKCk7XG5cbiAgICAgICAgaWYgKG1vdXNlU3BsYXQubW92ZWQpIHtcbiAgICAgICAgICAgIG1vdXNlU3BsYXQubW92ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuc3BsYXQobW91c2VTcGxhdC54LCBtb3VzZVNwbGF0LnksIG1vdXNlU3BsYXQuZHgsIG1vdXNlU3BsYXQuZHksIG1vdXNlU3BsYXQuY29sb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zcGxhdHMuZm9yRWFjaChzcGxhdCA9PiB7XG4gICAgICAgICAgICBpZiAoc3BsYXQubW92ZWQpIHtcbiAgICAgICAgICAgICAgICBzcGxhdC5tb3ZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuc3BsYXQoc3BsYXQueCwgc3BsYXQueSwgc3BsYXQuZHgsIHNwbGF0LmR5LCBzcGxhdC5jb2xvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHByb2dyYW1zLmN1cmwuYmluZCgpO1xuICAgICAgICBnbC51bmlmb3JtMmYocHJvZ3JhbXMuY3VybC51bmlmb3Jtcy50ZXhlbFNpemUsIDEuMCAvIHRleHR1cmVXaWR0aCwgMS4wIC8gdGV4dHVyZUhlaWdodCk7XG4gICAgICAgIGdsLnVuaWZvcm0xaShwcm9ncmFtcy5jdXJsLnVuaWZvcm1zLnVWZWxvY2l0eSwgZmIudmVsb2NpdHkucmVhZC50ZXh0SWQpO1xuICAgICAgICB0aGlzLmJsaXQoZmIuY3VybC5yZWFkLmZyYW1lYnVmZmVyKTtcblxuICAgICAgICBwcm9ncmFtcy52b3J0aWNpdHkuYmluZCgpO1xuICAgICAgICBnbC51bmlmb3JtMmYocHJvZ3JhbXMudm9ydGljaXR5LnVuaWZvcm1zLnRleGVsU2l6ZSwgMS4wIC8gdGV4dHVyZVdpZHRoLCAxLjAgLyB0ZXh0dXJlSGVpZ2h0KTtcbiAgICAgICAgZ2wudW5pZm9ybTFpKHByb2dyYW1zLnZvcnRpY2l0eS51bmlmb3Jtcy51VmVsb2NpdHksIGZiLnZlbG9jaXR5LnJlYWQudGV4dElkKTtcbiAgICAgICAgZ2wudW5pZm9ybTFpKHByb2dyYW1zLnZvcnRpY2l0eS51bmlmb3Jtcy51Q3VybCwgZmIuY3VybC5yZWFkLnRleHRJZCk7XG4gICAgICAgIGdsLnVuaWZvcm0xZihwcm9ncmFtcy52b3J0aWNpdHkudW5pZm9ybXMuY3VybCwgdGhpcy5jb25maWcuY3VybCk7XG4gICAgICAgIGdsLnVuaWZvcm0xZihwcm9ncmFtcy52b3J0aWNpdHkudW5pZm9ybXMuZHQsIGR0KTtcbiAgICAgICAgdGhpcy5ibGl0KGZiLnZlbG9jaXR5LndyaXRlLmZyYW1lYnVmZmVyKTtcbiAgICAgICAgZmIudmVsb2NpdHkuc3dhcCgpO1xuXG4gICAgICAgIHByb2dyYW1zLmRpdmVyZ2VuY2UuYmluZCgpO1xuICAgICAgICBnbC51bmlmb3JtMmYocHJvZ3JhbXMuZGl2ZXJnZW5jZS51bmlmb3Jtcy50ZXhlbFNpemUsIDEuMCAvIHRleHR1cmVXaWR0aCwgMS4wIC8gdGV4dHVyZUhlaWdodCk7XG4gICAgICAgIGdsLnVuaWZvcm0xaShwcm9ncmFtcy5kaXZlcmdlbmNlLnVuaWZvcm1zLnVWZWxvY2l0eSwgZmIudmVsb2NpdHkucmVhZC50ZXh0SWQpO1xuICAgICAgICB0aGlzLmJsaXQoZmIuZGl2ZXJnZW5jZS5yZWFkLmZyYW1lYnVmZmVyKTtcblxuICAgICAgICBwcm9ncmFtcy5jbGVhci5iaW5kKCk7XG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIGZiLnByZXNzdXJlLnJlYWQudGV4dHVyZSk7XG4gICAgICAgIGdsLnVuaWZvcm0xaShwcm9ncmFtcy5jbGVhci51bmlmb3Jtcy51VGV4dHVyZSwgZmIucHJlc3N1cmUucmVhZC50ZXh0SWQpO1xuICAgICAgICBnbC51bmlmb3JtMWYocHJvZ3JhbXMuY2xlYXIudW5pZm9ybXMudmFsdWUsIHRoaXMuY29uZmlnLnByZXNzdXJlRGlzc2lwYXRpb24pO1xuICAgICAgICB0aGlzLmJsaXQoZmIucHJlc3N1cmUud3JpdGUuZnJhbWVidWZmZXIpO1xuICAgICAgICBmYi5wcmVzc3VyZS5zd2FwKCk7XG5cbiAgICAgICAgcHJvZ3JhbXMucHJlc3N1cmUuYmluZCgpO1xuICAgICAgICBnbC51bmlmb3JtMmYocHJvZ3JhbXMucHJlc3N1cmUudW5pZm9ybXMudGV4ZWxTaXplLCAxLjAgLyB0ZXh0dXJlV2lkdGgsIDEuMCAvIHRleHR1cmVIZWlnaHQpO1xuICAgICAgICBnbC51bmlmb3JtMWkocHJvZ3JhbXMucHJlc3N1cmUudW5pZm9ybXMudURpdmVyZ2VuY2UsIGZiLmRpdmVyZ2VuY2UucmVhZC50ZXh0SWQpO1xuICAgICAgICBnbC51bmlmb3JtMWkocHJvZ3JhbXMucHJlc3N1cmUudW5pZm9ybXMudVByZXNzdXJlLCBmYi5wcmVzc3VyZS5yZWFkLnRleHRJZCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb25maWcucHJlc3N1cmVJdGVyYXRpb25zOyBpKyspIHtcbiAgICAgICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIGZiLnByZXNzdXJlLnJlYWQudGV4dHVyZSk7XG4gICAgICAgICAgICB0aGlzLmJsaXQoZmIucHJlc3N1cmUud3JpdGUuZnJhbWVidWZmZXIpO1xuICAgICAgICAgICAgZmIucHJlc3N1cmUuc3dhcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvZ3JhbXMuZ3JhZGllblN1YnRyYWN0LmJpbmQoKTtcbiAgICAgICAgZ2wudW5pZm9ybTJmKHByb2dyYW1zLmdyYWRpZW5TdWJ0cmFjdC51bmlmb3Jtcy50ZXhlbFNpemUsIDEuMCAvIHRleHR1cmVXaWR0aCwgMS4wIC8gdGV4dHVyZUhlaWdodCk7XG4gICAgICAgIGdsLnVuaWZvcm0xaShwcm9ncmFtcy5ncmFkaWVuU3VidHJhY3QudW5pZm9ybXMudVByZXNzdXJlLCBmYi5wcmVzc3VyZS5yZWFkLnRleHRJZCk7XG4gICAgICAgIGdsLnVuaWZvcm0xaShwcm9ncmFtcy5ncmFkaWVuU3VidHJhY3QudW5pZm9ybXMudVZlbG9jaXR5LCBmYi52ZWxvY2l0eS5yZWFkLnRleHRJZCk7XG4gICAgICAgIHRoaXMuYmxpdChmYi52ZWxvY2l0eS53cml0ZS5mcmFtZWJ1ZmZlcik7XG4gICAgICAgIGZiLnZlbG9jaXR5LnN3YXAoKTtcblxuICAgICAgICBnbC52aWV3cG9ydCgwLCAwLCBnbC5kcmF3aW5nQnVmZmVyV2lkdGgsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuICAgICAgICBwcm9ncmFtcy5kaXNwbGF5LmJpbmQoKTtcbiAgICAgICAgZ2wudW5pZm9ybTFpKHByb2dyYW1zLmRpc3BsYXkudW5pZm9ybXMudVRleHR1cmUsIGZiLmRlbnNpdHkucmVhZC50ZXh0SWQpO1xuICAgICAgICB0aGlzLmJsaXQobnVsbCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRMaXN0ZW5lcnMoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgY2FudmFzLCBtb3VzZVNwbGF0IH0gPSB0aGlzO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBlID0+IHtcbiAgICAgICAgICAgIG1vdXNlU3BsYXQubW92ZWQgPSBtb3VzZVNwbGF0LmRvd247XG4gICAgICAgICAgICBtb3VzZVNwbGF0LmR4ID0gKGUub2Zmc2V0WCAtIG1vdXNlU3BsYXQueCkgKiAxMC4wO1xuICAgICAgICAgICAgbW91c2VTcGxhdC5keSA9IChlLm9mZnNldFkgLSBtb3VzZVNwbGF0LnkpICogMTAuMDtcbiAgICAgICAgICAgIG1vdXNlU3BsYXQueCA9IGUub2Zmc2V0WDtcbiAgICAgICAgICAgIG1vdXNlU3BsYXQueSA9IGUub2Zmc2V0WTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKCkgPT4ge1xuICAgICAgICAgICAgbW91c2VTcGxhdC5kb3duID0gdHJ1ZTtcbiAgICAgICAgICAgIG1vdXNlU3BsYXQuY29sb3IgPSBbTWF0aC5yYW5kb20oKSArIDAuMiwgTWF0aC5yYW5kb20oKSArIDAuMiwgTWF0aC5yYW5kb20oKSArIDAuMl07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBtb3VzZVNwbGF0LmRvd24gPSBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICBcInRvdWNobW92ZVwiLFxuICAgICAgICAgICAgZSA9PiB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIG1vdXNlU3BsYXQubW92ZWQgPSBtb3VzZVNwbGF0LmRvd247XG4gICAgICAgICAgICAgICAgbW91c2VTcGxhdC5keCA9IChlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggLSBtb3VzZVNwbGF0LngpICogMTAuMDtcbiAgICAgICAgICAgICAgICBtb3VzZVNwbGF0LmR5ID0gKGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSAtIG1vdXNlU3BsYXQueSkgKiAxMC4wO1xuICAgICAgICAgICAgICAgIG1vdXNlU3BsYXQueCA9IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWDtcbiAgICAgICAgICAgICAgICBtb3VzZVNwbGF0LnkgPSBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICk7XG5cbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIGUgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBtb3VzZVNwbGF0LmRvd24gPSB0cnVlO1xuICAgICAgICAgICAgbW91c2VTcGxhdC54ID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgICAgICAgbW91c2VTcGxhdC55ID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgICAgICAgbW91c2VTcGxhdC5jb2xvciA9IFtNYXRoLnJhbmRvbSgpICsgMC4yLCBNYXRoLnJhbmRvbSgpICsgMC4yLCBNYXRoLnJhbmRvbSgpICsgMC4yXTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBtb3VzZVNwbGF0LmRvd24gPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7cHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEO2F0dHJpYnV0ZSB2ZWMyIGFQb3NpdGlvbjt2YXJ5aW5nIHZlYzIgdlV2O3ZhcnlpbmcgdmVjMiB2TDt2YXJ5aW5nIHZlYzIgdlI7dmFyeWluZyB2ZWMyIHZUO3ZhcnlpbmcgdmVjMiB2Qjt1bmlmb3JtIHZlYzIgdGV4ZWxTaXplO3ZvaWQgbWFpbigpe3ZVdj1hUG9zaXRpb24qMC41KzAuNTt2TD12VXYtdmVjMih0ZXhlbFNpemUueCwwLik7dlI9dlV2K3ZlYzIodGV4ZWxTaXplLngsMC4pO3ZUPXZVdit2ZWMyKDAuLHRleGVsU2l6ZS55KTt2Qj12VXYtdmVjMigwLix0ZXhlbFNpemUueSk7Z2xfUG9zaXRpb249dmVjNChhUG9zaXRpb24sMC4sMS4pO31cIiIsImV4cG9ydCBkZWZhdWx0IFwicHJlY2lzaW9uIGhpZ2hwIGZsb2F0O3ByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDt2YXJ5aW5nIHZlYzIgdlV2O3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO3VuaWZvcm0gZmxvYXQgdmFsdWU7dm9pZCBtYWluKCl7Z2xfRnJhZ0NvbG9yPXZhbHVlKnRleHR1cmUyRCh1VGV4dHVyZSx2VXYpO31cIiIsImV4cG9ydCBkZWZhdWx0IFwicHJlY2lzaW9uIGhpZ2hwIGZsb2F0O3ByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDt2YXJ5aW5nIHZlYzIgdlV2O3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO3ZvaWQgbWFpbigpe3ZlYzMgYz10ZXh0dXJlMkQodVRleHR1cmUsdlV2KS5yZ2I7ZmxvYXQgYT1tYXgoYy5yLG1heChjLmcsYy5iKSk7Z2xfRnJhZ0NvbG9yPXZlYzQoYyxhKTt9XCIiLCJleHBvcnQgZGVmYXVsdCBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7dmFyeWluZyB2ZWMyIHZVdjt1bmlmb3JtIHNhbXBsZXIyRCB1VGFyZ2V0O3VuaWZvcm0gZmxvYXQgYXNwZWN0UmF0aW87dW5pZm9ybSB2ZWMzIGNvbG9yO3VuaWZvcm0gdmVjMiBwb2ludDt1bmlmb3JtIGZsb2F0IHJhZGl1czt2b2lkIG1haW4oKXt2ZWMyIHA9dlV2LXBvaW50Lnh5O3AueCo9YXNwZWN0UmF0aW87dmVjMyBzcGxhdD1leHAoLWRvdChwLHApL3JhZGl1cykqY29sb3I7dmVjMyBiYXNlPXRleHR1cmUyRCh1VGFyZ2V0LHZVdikueHl6O2dsX0ZyYWdDb2xvcj12ZWM0KGJhc2Urc3BsYXQsMS4pO31cIiIsImV4cG9ydCBkZWZhdWx0IFwicHJlY2lzaW9uIGhpZ2hwIGZsb2F0O3ByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDt2YXJ5aW5nIHZlYzIgdlV2O3VuaWZvcm0gc2FtcGxlcjJEIHVWZWxvY2l0eTt1bmlmb3JtIHNhbXBsZXIyRCB1U291cmNlO3VuaWZvcm0gdmVjMiB0ZXhlbFNpemU7dW5pZm9ybSBmbG9hdCBkdDt1bmlmb3JtIGZsb2F0IGRpc3NpcGF0aW9uO3ZvaWQgbWFpbigpe3ZlYzIgY29vcmQ9dlV2LWR0KnRleHR1cmUyRCh1VmVsb2NpdHksdlV2KS54eSp0ZXhlbFNpemU7Z2xfRnJhZ0NvbG9yPWRpc3NpcGF0aW9uKnRleHR1cmUyRCh1U291cmNlLGNvb3JkKTtnbF9GcmFnQ29sb3IuYT0xLjt9XCIiLCJleHBvcnQgZGVmYXVsdCBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7dmFyeWluZyB2ZWMyIHZVdjt2YXJ5aW5nIHZlYzIgdkw7dmFyeWluZyB2ZWMyIHZSO3ZhcnlpbmcgdmVjMiB2VDt2YXJ5aW5nIHZlYzIgdkI7dW5pZm9ybSBzYW1wbGVyMkQgdVZlbG9jaXR5O3ZlYzIgc2FtcGxlVmVsb2NpdHkoaW4gdmVjMiB1dil7dmVjMiBtdWx0aXBsaWVyPXZlYzIoMS4sMS4pO2lmKHV2Lng8MC4pe3V2Lng9MC47bXVsdGlwbGllci54PS0xLjt9aWYodXYueD4xLil7dXYueD0xLjttdWx0aXBsaWVyLng9LTEuO31pZih1di55PDAuKXt1di55PTAuO211bHRpcGxpZXIueT0tMS47fWlmKHV2Lnk+MS4pe3V2Lnk9MS47bXVsdGlwbGllci55PS0xLjt9cmV0dXJuIG11bHRpcGxpZXIqdGV4dHVyZTJEKHVWZWxvY2l0eSx1dikueHk7fXZvaWQgbWFpbigpe2Zsb2F0IEw9c2FtcGxlVmVsb2NpdHkodkwpLng7ZmxvYXQgUj1zYW1wbGVWZWxvY2l0eSh2UikueDtmbG9hdCBUPXNhbXBsZVZlbG9jaXR5KHZUKS55O2Zsb2F0IEI9c2FtcGxlVmVsb2NpdHkodkIpLnk7ZmxvYXQgZGl2PTAuNSooUi1MK1QtQik7Z2xfRnJhZ0NvbG9yPXZlYzQoZGl2LDAuLDAuLDEuKTt9XCIiLCJleHBvcnQgZGVmYXVsdCBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7dmFyeWluZyB2ZWMyIHZVdjt2YXJ5aW5nIHZlYzIgdkw7dmFyeWluZyB2ZWMyIHZSO3ZhcnlpbmcgdmVjMiB2VDt2YXJ5aW5nIHZlYzIgdkI7dW5pZm9ybSBzYW1wbGVyMkQgdVZlbG9jaXR5O3ZvaWQgbWFpbigpe2Zsb2F0IEw9dGV4dHVyZTJEKHVWZWxvY2l0eSx2TCkueTtmbG9hdCBSPXRleHR1cmUyRCh1VmVsb2NpdHksdlIpLnk7ZmxvYXQgVD10ZXh0dXJlMkQodVZlbG9jaXR5LHZUKS54O2Zsb2F0IEI9dGV4dHVyZTJEKHVWZWxvY2l0eSx2QikueDtmbG9hdCB2b3J0aWNpdHk9Ui1MLVQrQjtnbF9GcmFnQ29sb3I9dmVjNCh2b3J0aWNpdHksMC4sMC4sMS4pO31cIiIsImV4cG9ydCBkZWZhdWx0IFwicHJlY2lzaW9uIGhpZ2hwIGZsb2F0O3ByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDt2YXJ5aW5nIHZlYzIgdlV2O3ZhcnlpbmcgdmVjMiB2VDt2YXJ5aW5nIHZlYzIgdkI7dW5pZm9ybSBzYW1wbGVyMkQgdVZlbG9jaXR5O3VuaWZvcm0gc2FtcGxlcjJEIHVDdXJsO3VuaWZvcm0gZmxvYXQgY3VybDt1bmlmb3JtIGZsb2F0IGR0O3ZvaWQgbWFpbigpe2Zsb2F0IFQ9dGV4dHVyZTJEKHVDdXJsLHZUKS54O2Zsb2F0IEI9dGV4dHVyZTJEKHVDdXJsLHZCKS54O2Zsb2F0IEM9dGV4dHVyZTJEKHVDdXJsLHZVdikueDt2ZWMyIGZvcmNlPXZlYzIoYWJzKFQpLWFicyhCKSwwLik7Zm9yY2UqPTEuL2xlbmd0aChmb3JjZSswLjAwMDAxKSpjdXJsKkM7dmVjMiB2ZWw9dGV4dHVyZTJEKHVWZWxvY2l0eSx2VXYpLnh5O2dsX0ZyYWdDb2xvcj12ZWM0KHZlbCtmb3JjZSpkdCwwLiwxLik7fVwiIiwiZXhwb3J0IGRlZmF1bHQgXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7cHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEO3ZhcnlpbmcgdmVjMiB2VXY7dmFyeWluZyB2ZWMyIHZMO3ZhcnlpbmcgdmVjMiB2Ujt2YXJ5aW5nIHZlYzIgdlQ7dmFyeWluZyB2ZWMyIHZCO3VuaWZvcm0gc2FtcGxlcjJEIHVQcmVzc3VyZTt1bmlmb3JtIHNhbXBsZXIyRCB1RGl2ZXJnZW5jZTt2ZWMyIGJvdW5kYXJ5KGluIHZlYzIgdXYpe3V2PW1pbihtYXgodXYsMC4pLDEuKTtyZXR1cm4gdXY7fXZvaWQgbWFpbigpe2Zsb2F0IEw9dGV4dHVyZTJEKHVQcmVzc3VyZSxib3VuZGFyeSh2TCkpLng7ZmxvYXQgUj10ZXh0dXJlMkQodVByZXNzdXJlLGJvdW5kYXJ5KHZSKSkueDtmbG9hdCBUPXRleHR1cmUyRCh1UHJlc3N1cmUsYm91bmRhcnkodlQpKS54O2Zsb2F0IEI9dGV4dHVyZTJEKHVQcmVzc3VyZSxib3VuZGFyeSh2QikpLng7ZmxvYXQgQz10ZXh0dXJlMkQodVByZXNzdXJlLHZVdikueDtmbG9hdCBkaXZlcmdlbmNlPXRleHR1cmUyRCh1RGl2ZXJnZW5jZSx2VXYpLng7ZmxvYXQgcHJlc3N1cmU9KEwrUitCK1QtZGl2ZXJnZW5jZSkqMC4yNTtnbF9GcmFnQ29sb3I9dmVjNChwcmVzc3VyZSwwLiwwLiwxLik7fVwiIiwiZXhwb3J0IGRlZmF1bHQgXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7cHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEO3ZhcnlpbmcgdmVjMiB2VXY7dmFyeWluZyB2ZWMyIHZMO3ZhcnlpbmcgdmVjMiB2Ujt2YXJ5aW5nIHZlYzIgdlQ7dmFyeWluZyB2ZWMyIHZCO3VuaWZvcm0gc2FtcGxlcjJEIHVQcmVzc3VyZTt1bmlmb3JtIHNhbXBsZXIyRCB1VmVsb2NpdHk7dmVjMiBib3VuZGFyeShpbiB2ZWMyIHV2KXt1dj1taW4obWF4KHV2LDAuKSwxLik7cmV0dXJuIHV2O312b2lkIG1haW4oKXtmbG9hdCBMPXRleHR1cmUyRCh1UHJlc3N1cmUsYm91bmRhcnkodkwpKS54O2Zsb2F0IFI9dGV4dHVyZTJEKHVQcmVzc3VyZSxib3VuZGFyeSh2UikpLng7ZmxvYXQgVD10ZXh0dXJlMkQodVByZXNzdXJlLGJvdW5kYXJ5KHZUKSkueDtmbG9hdCBCPXRleHR1cmUyRCh1UHJlc3N1cmUsYm91bmRhcnkodkIpKS54O3ZlYzIgdmVsb2NpdHk9dGV4dHVyZTJEKHVWZWxvY2l0eSx2VXYpLnh5O3ZlbG9jaXR5Lnh5LT12ZWMyKFItTCxULUIpO2dsX0ZyYWdDb2xvcj12ZWM0KHZlbG9jaXR5LDAuLDEuKTt9XCIiLCJpbXBvcnQgeyBHYW1lIH0gZnJvbSBcIi4vR2FtZVwiO1xubmV3IEdhbWUoKTtcbiIsImltcG9ydCBHVUkgZnJvbSBcImxpbC1ndWlcIjtcblxuaW1wb3J0IHsgVHdlZW5SdW5uZXIgfSBmcm9tIFwiLi9Ud2VlblwiO1xuaW1wb3J0IHsgRmx1aWQsIHR5cGUgSVNwbGF0IH0gZnJvbSBcIi4vRmx1aWRcIjtcblxuZXhwb3J0IGNsYXNzIEdhbWUge1xuICAgIHB1YmxpYyByZWFkb25seSB0d2VlblJ1bm5lcjogVHdlZW5SdW5uZXI7XG4gICAgcHVibGljIGd1aTogR1VJO1xuICAgIHB1YmxpYyByZWFkb25seSBmbHVpZDogRmx1aWQ7XG5cbiAgICBwcml2YXRlIGxhc3RUaW1lOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBzcGxhdHM6IElTcGxhdFtdO1xuICAgIHByaXZhdGUgc3BsYXRzQ291bnRlcjogbnVtYmVyO1xuICAgIHByaXZhdGUgcmVzZXRDb3VudGVyOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIGVtaXRUaW1lOiBudW1iZXI7XG4gICAgcHJpdmF0ZSB3YWl0VGltZTogbnVtYmVyO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmVtaXRUaW1lID0gMzAwMDtcbiAgICAgICAgdGhpcy53YWl0VGltZSA9IDEwMDA7XG4gICAgICAgIHRoaXMubGFzdFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICB0aGlzLnNwbGF0cyA9IFtdO1xuICAgICAgICB0aGlzLnNwbGF0c0NvdW50ZXIgPSAwO1xuICAgICAgICB0aGlzLnJlc2V0Q291bnRlciA9IDA7XG5cbiAgICAgICAgdGhpcy50d2VlblJ1bm5lciA9IG5ldyBUd2VlblJ1bm5lcigpO1xuICAgICAgICB0aGlzLmZsdWlkID0gbmV3IEZsdWlkKHRoaXMpO1xuICAgICAgICB0aGlzLmd1aSA9IHRoaXMubWFrZUdVSSgpO1xuXG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIHRoaXMuYWRkU3BsYXQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZFNwbGF0KCk6IElTcGxhdCB7XG4gICAgICAgIGNvbnN0IHNwbGF0ID0gdGhpcy5mbHVpZC5tYWtlU3BsYXQoKTtcbiAgICAgICAgc3BsYXQueCA9IE1hdGgucm91bmQod2luZG93LmlubmVyV2lkdGggKiAoMC4yNSArIE1hdGgucmFuZG9tKCkgKiAwLjUpKTtcbiAgICAgICAgc3BsYXQueSA9IE1hdGgucm91bmQod2luZG93LmlubmVySGVpZ2h0ICogKDAuMjUgKyBNYXRoLnJhbmRvbSgpICogMC41KSk7XG4gICAgICAgIHNwbGF0LmR4ID0gTWF0aC5yb3VuZCgtMTAwICsgTWF0aC5yYW5kb20oKSAqIDEwMCk7XG4gICAgICAgIHNwbGF0LmR5ID0gTWF0aC5yb3VuZCgtMTAwICsgTWF0aC5yYW5kb20oKSAqIDEwMCk7XG4gICAgICAgIHNwbGF0LmNvbG9yID0gW01hdGgucmFuZG9tKCksIE1hdGgucmFuZG9tKCksIE1hdGgucmFuZG9tKCldO1xuXG4gICAgICAgIHRoaXMuYWRkU3BsYXRGb2xkZXIoc3BsYXQpO1xuICAgICAgICB0aGlzLnNwbGF0cy5wdXNoKHNwbGF0KTtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICByZXR1cm4gc3BsYXQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRTcGxhdEZvbGRlcihzcGxhdDogSVNwbGF0KSB7XG4gICAgICAgIHRoaXMuc3BsYXRzQ291bnRlcisrO1xuICAgICAgICBjb25zdCBmb2xkZXIgPSB0aGlzLmd1aS5hZGRGb2xkZXIoXCJTcGxhdCBcIiArIHRoaXMuc3BsYXRzQ291bnRlcik7XG4gICAgICAgIGZvbGRlci5hZGQoc3BsYXQsIFwieFwiKTtcbiAgICAgICAgZm9sZGVyLmFkZChzcGxhdCwgXCJ5XCIpO1xuICAgICAgICBmb2xkZXIuYWRkKHNwbGF0LCBcImR4XCIsIC0yMDAsIDIwMCk7XG4gICAgICAgIGZvbGRlci5hZGQoc3BsYXQsIFwiZHlcIiwgLTIwMCwgMjAwKTtcbiAgICAgICAgZm9sZGVyLmFkZChzcGxhdCwgXCJlbWl0VGltZVwiLCAwLCAxKTtcbiAgICAgICAgZm9sZGVyLmFkZENvbG9yKHNwbGF0LCBcImNvbG9yXCIsIDEpO1xuXG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0ge1xuICAgICAgICAgICAgcmVtb3ZlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zcGxhdHMgPSB0aGlzLnNwbGF0cy5maWx0ZXIoZWwgPT4gZWwgIT09IHNwbGF0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgZm9sZGVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgZm9sZGVyLmFkZChzZXR0aW5ncywgXCJyZW1vdmVcIik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZXNldCA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5yZXNldENvdW50ZXIrKztcbiAgICAgICAgdGhpcy5mbHVpZC5yZXNldCgpO1xuICAgICAgICB0aGlzLnJ1blNwbGF0cygpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIGFzeW5jIHJ1blNwbGF0cygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFJlc2V0Q291bnRlciA9IHRoaXMucmVzZXRDb3VudGVyO1xuICAgICAgICBhd2FpdCB0aGlzLmZsdWlkLmVtaXRTcGxhdHModGhpcy5zcGxhdHMsIHRoaXMuZW1pdFRpbWUsIHRoaXMud2FpdFRpbWUpO1xuICAgICAgICBpZiAoY3VycmVudFJlc2V0Q291bnRlciA9PT0gdGhpcy5yZXNldENvdW50ZXIpIHtcbiAgICAgICAgICAgIHRoaXMucnVuU3BsYXRzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZSA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgY29uc3QgZGVsYXRNUyA9IE1hdGgubWluKG5vdyAtIHRoaXMubGFzdFRpbWUsIDE2KTtcbiAgICAgICAgY29uc3QgZHQgPSBkZWxhdE1TIC8gMTAwMDtcbiAgICAgICAgdGhpcy50d2VlblJ1bm5lci50aW1lc3RlcChkZWxhdE1TKTtcbiAgICAgICAgdGhpcy5sYXN0VGltZSA9IG5vdztcbiAgICAgICAgdGhpcy5mbHVpZC50aW1lc3RlcChkdCk7XG5cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlKTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBtYWtlR1VJKCk6IEdVSSB7XG4gICAgICAgIGNvbnN0IGd1aSA9IG5ldyBHVUkoKTtcbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5mbHVpZC5jb25maWc7XG4gICAgICAgIGd1aS5hZGQoY29uZmlnLCBcImRlbnNpdHlEaXNzaXBhdGlvblwiLCAwLjgsIDEuMSk7XG4gICAgICAgIGd1aS5hZGQoY29uZmlnLCBcInZlbG9jaXR5RGlzc2lwYXRpb25cIiwgMC44LCAxLjEpO1xuICAgICAgICBndWkuYWRkKGNvbmZpZywgXCJwcmVzc3VyZURpc3NpcGF0aW9uXCIsIDAsIDEuMSk7XG4gICAgICAgIGd1aS5hZGQoY29uZmlnLCBcInByZXNzdXJlSXRlcmF0aW9uc1wiLCAwLCA1MCk7XG4gICAgICAgIGd1aS5hZGQoY29uZmlnLCBcImN1cmxcIiwgMCwgNTApO1xuICAgICAgICBndWkuYWRkKGNvbmZpZywgXCJzcGxhdFJhZGl1c1wiLCAwLjAwMDEsIDAuMDIpO1xuICAgICAgICBndWkuYWRkKHRoaXMsIFwiZW1pdFRpbWVcIiwgMCwgNTAwMCk7XG4gICAgICAgIGd1aS5hZGQodGhpcywgXCJ3YWl0VGltZVwiLCAwLCA1MDAwKTtcbiAgICAgICAgZ3VpLmFkZCh0aGlzLCBcInJlc2V0XCIpO1xuICAgICAgICBndWkuYWRkKHRoaXMsIFwiYWRkU3BsYXRcIik7XG4gICAgICAgIGd1aS5hZGQodGhpcywgXCJzYXZlXCIpO1xuICAgICAgICBndWkuYWRkKHRoaXMsIFwibG9hZFwiKTtcbiAgICAgICAgcmV0dXJuIGd1aTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNhdmUoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICBjb25maWc6IHRoaXMuZmx1aWQuY29uZmlnLFxuICAgICAgICAgICAgc3BsYXRzOiB0aGlzLnNwbGF0cyxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBhbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgICAgYW5jaG9yLnNldEF0dHJpYnV0ZShcImhyZWZcIiwgXCJkYXRhOnRleHQvanNvbjtjaGFyc2V0PXV0Zi04LFwiICsgZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGRhdGEpKSk7XG4gICAgICAgIGFuY2hvci5zZXRBdHRyaWJ1dGUoXCJkb3dubG9hZFwiLCBcImZsdWlkLmpzb25cIik7XG4gICAgICAgIGFuY2hvci5jbGljaygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgbG9hZCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJmaWxlXCIpO1xuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJtdWx0aXBsZVwiLCBcImZhbHNlXCIpO1xuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJhY2NlcHRcIiwgXCIuanNvblwiKTtcblxuICAgICAgICBpbnB1dC5jbGljaygpO1xuICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBpbnB1dC5maWxlcz8uWzBdO1xuICAgICAgICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBqc29uID0gYXdhaXQgZmlsZS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGpzb24pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNwbGF0cyA9IGRhdGEuc3BsYXRzO1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuZmx1aWQuY29uZmlnLCBkYXRhLmNvbmZpZyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3VpLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ndWkgPSB0aGlzLm1ha2VHVUkoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGxhdHMuZm9yRWFjaChzcGxhdCA9PiB0aGlzLmFkZFNwbGF0Rm9sZGVyKHNwbGF0KSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkNvbnRyb2xsZXIiLCJjb25zdHJ1Y3RvciIsInBhcmVudCIsIm9iamVjdCIsInByb3BlcnR5IiwiY2xhc3NOYW1lIiwid2lkZ2V0VGFnIiwidGhpcyIsIl9kaXNhYmxlZCIsIl9oaWRkZW4iLCJpbml0aWFsVmFsdWUiLCJnZXRWYWx1ZSIsImRvbUVsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCIkbmFtZSIsIm5leHROYW1lSUQiLCJpZCIsIiR3aWRnZXQiLCIkZGlzYWJsZSIsImFwcGVuZENoaWxkIiwiY2hpbGRyZW4iLCJwdXNoIiwiY29udHJvbGxlcnMiLCIkY2hpbGRyZW4iLCJfbGlzdGVuQ2FsbGJhY2siLCJiaW5kIiwibmFtZSIsIl9uYW1lIiwiaW5uZXJIVE1MIiwib25DaGFuZ2UiLCJjYWxsYmFjayIsIl9vbkNoYW5nZSIsIl9jYWxsT25DaGFuZ2UiLCJ1bmRlZmluZWQiLCJjYWxsIiwiX2NoYW5nZWQiLCJvbkZpbmlzaENoYW5nZSIsIl9vbkZpbmlzaENoYW5nZSIsIl9jYWxsT25GaW5pc2hDaGFuZ2UiLCJyZXNldCIsInNldFZhbHVlIiwiZW5hYmxlIiwiZW5hYmxlZCIsImRpc2FibGUiLCJkaXNhYmxlZCIsInRvZ2dsZSIsInRvZ2dsZUF0dHJpYnV0ZSIsInNob3ciLCJzdHlsZSIsImRpc3BsYXkiLCJoaWRlIiwib3B0aW9ucyIsImNvbnRyb2xsZXIiLCJkZXN0cm95IiwibWluIiwibWF4Iiwic3RlcCIsImRlY2ltYWxzIiwibGlzdGVuIiwiX2xpc3RlbmluZyIsIl9saXN0ZW5DYWxsYmFja0lEIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjdXJWYWx1ZSIsInNhdmUiLCJfbGlzdGVuUHJldlZhbHVlIiwidXBkYXRlRGlzcGxheSIsInZhbHVlIiwibG9hZCIsInNwbGljZSIsImluZGV4T2YiLCJyZW1vdmVDaGlsZCIsIkJvb2xlYW5Db250cm9sbGVyIiwic3VwZXIiLCIkaW5wdXQiLCJzZXRBdHRyaWJ1dGUiLCJhZGRFdmVudExpc3RlbmVyIiwiY2hlY2tlZCIsIm5vcm1hbGl6ZUNvbG9yU3RyaW5nIiwic3RyaW5nIiwibWF0Y2giLCJyZXN1bHQiLCJwYXJzZUludCIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJJTlQiLCJpc1ByaW1pdGl2ZSIsInYiLCJmcm9tSGV4U3RyaW5nIiwic3Vic3RyaW5nIiwidG9IZXhTdHJpbmciLCJBUlJBWSIsIkFycmF5IiwiaXNBcnJheSIsInRhcmdldCIsInJnYlNjYWxlIiwiaW50IiwiciIsImciLCJiIiwiT0JKRUNUIiwiT2JqZWN0IiwiRk9STUFUUyIsIkNvbG9yQ29udHJvbGxlciIsIiR0ZXh0IiwiJGRpc3BsYXkiLCJfZm9ybWF0IiwiZmluZCIsImZvcm1hdCIsIl9yZ2JTY2FsZSIsIl9pbml0aWFsVmFsdWVIZXhTdHJpbmciLCJfdGV4dEZvY3VzZWQiLCJfc2V0VmFsdWVGcm9tSGV4U3RyaW5nIiwidHJ5UGFyc2UiLCJzZWxlY3QiLCJuZXdWYWx1ZSIsImJhY2tncm91bmRDb2xvciIsIkZ1bmN0aW9uQ29udHJvbGxlciIsIiRidXR0b24iLCJlIiwicHJldmVudERlZmF1bHQiLCJwYXNzaXZlIiwiTnVtYmVyQ29udHJvbGxlciIsIl9pbml0SW5wdXQiLCJzdGVwRXhwbGljaXQiLCJfZ2V0SW1wbGljaXRTdGVwIiwiX2RlY2ltYWxzIiwiX21pbiIsIl9vblVwZGF0ZU1pbk1heCIsIl9tYXgiLCJleHBsaWNpdCIsIl9zdGVwIiwiX3N0ZXBFeHBsaWNpdCIsIl9oYXNTbGlkZXIiLCJwZXJjZW50IiwiTWF0aCIsIiRmaWxsIiwid2lkdGgiLCJfaW5wdXRGb2N1c2VkIiwidG9GaXhlZCIsImluY3JlbWVudCIsImRlbHRhIiwicGFyc2VGbG9hdCIsImlzTmFOIiwiX3NuYXBDbGFtcFNldFZhbHVlIiwiaW5pdENsaWVudFgiLCJpbml0Q2xpZW50WSIsInByZXZDbGllbnRZIiwiaW5pdFZhbHVlIiwiZHJhZ0RlbHRhIiwidGVzdGluZ0ZvclZlcnRpY2FsRHJhZyIsIm9uTW91c2VNb3ZlIiwiZHgiLCJjbGllbnRYIiwiZHkiLCJjbGllbnRZIiwiYWJzIiwiYmx1ciIsIl9zZXREcmFnZ2luZ1N0eWxlIiwib25Nb3VzZVVwIiwiX2Fycm93S2V5TXVsdGlwbGllciIsIndpbmRvdyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfc25hcCIsIl9jbGFtcCIsImNvZGUiLCJfbm9ybWFsaXplTW91c2VXaGVlbCIsIl9pbml0U2xpZGVyIiwiJHNsaWRlciIsImluc2VydEJlZm9yZSIsInNldFZhbHVlRnJvbVgiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYSIsImxlZnQiLCJyaWdodCIsImMiLCJtb3VzZU1vdmUiLCJtb3VzZVVwIiwicHJldkNsaWVudFgiLCJ0ZXN0aW5nRm9yU2Nyb2xsIiwiYmVnaW5Ub3VjaERyYWciLCJ0b3VjaGVzIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoRW5kIiwiY2FsbE9uRmluaXNoQ2hhbmdlIiwid2hlZWxGaW5pc2hDaGFuZ2VUaW1lb3V0IiwibGVuZ3RoIiwiX2hhc1Njcm9sbEJhciIsImRlbHRhWCIsImRlbHRhWSIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJhY3RpdmUiLCJheGlzIiwiYm9keSIsIl9oYXNNaW4iLCJfaGFzTWF4IiwiZmxvb3IiLCJ3aGVlbERlbHRhIiwibXVsdCIsInNoaWZ0S2V5IiwiYWx0S2V5Iiwicm91bmQiLCJ0b1ByZWNpc2lvbiIsInJvb3QiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJPcHRpb25Db250cm9sbGVyIiwiJHNlbGVjdCIsIl92YWx1ZXMiLCJ2YWx1ZXMiLCJfbmFtZXMiLCJrZXlzIiwiZm9yRWFjaCIsIiRvcHRpb24iLCJzZWxlY3RlZEluZGV4IiwicmVtb3ZlIiwiaW5kZXgiLCJTdHJpbmdDb250cm9sbGVyIiwic3R5bGVzSW5qZWN0ZWQiLCJHVUkiLCJhdXRvUGxhY2UiLCJjb250YWluZXIiLCJ0aXRsZSIsImNsb3NlRm9sZGVycyIsImluamVjdFN0eWxlcyIsInRvdWNoU3R5bGVzIiwiZm9sZGVycyIsIl9jbG9zZWQiLCIkdGl0bGUiLCJvcGVuQW5pbWF0ZWQiLCJjbGljayIsImNzc0NvbnRlbnQiLCJpbmplY3RlZCIsImJlZm9yZSIsInF1ZXJ5U2VsZWN0b3IiLCJoZWFkIiwiX2luamVjdFN0eWxlcyIsInNldFByb3BlcnR5IiwiX2Nsb3NlRm9sZGVycyIsInN0b3BQcm9wYWdhdGlvbiIsIiQxIiwiY29uc29sZSIsImVycm9yIiwiYWRkQ29sb3IiLCJhZGRGb2xkZXIiLCJmb2xkZXIiLCJjbG9zZSIsIm9iaiIsInJlY3Vyc2l2ZSIsImYiLCJfdGl0bGUiLCJFcnJvciIsIm9wZW4iLCJfc2V0Q2xvc2VkIiwiY2xvc2VkIiwiX2NhbGxPbk9wZW5DbG9zZSIsImluaXRpYWxIZWlnaHQiLCJoZWlnaHQiLCJvblRyYW5zaXRpb25FbmQiLCJ0YXJnZXRIZWlnaHQiLCJjb250cm9sbGVyc1JlY3Vyc2l2ZSIsIm9uT3BlbkNsb3NlIiwiX29uT3BlbkNsb3NlIiwiY2hhbmdlZEdVSSIsInBhcmVudEVsZW1lbnQiLCJmcm9tIiwiY29uY2F0IiwiZm9sZGVyc1JlY3Vyc2l2ZSIsIlR3ZWVuIiwiZHVyYXRpb24iLCJyZXNvbHZlIiwiYWNjdW11bGF0b3IiLCJmaXJlQ2FsbGJhY2siLCJwcm9ncmVzcyIsIlR3ZWVuUnVubmVyIiwiY2FjaGUiLCJjcmVhdGUiLCJQcm9taXNlIiwidHdlZW4iLCJ0aW1lc3RlcCIsImR0IiwiaSIsImZpbHRlciIsImVsIiwiR0xQcm9ncmFtIiwiZ2wiLCJ2ZXJ0ZXhTaGFkZXIiLCJmcmFnbWVudFNoYWRlciIsInVuaWZvcm1zIiwicHJvZ3JhbSIsImNyZWF0ZVByb2dyYW0iLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImdldFByb2dyYW1JbmZvTG9nIiwidW5pZm9ybUNvdW50IiwiQUNUSVZFX1VOSUZPUk1TIiwidW5pZm9ybU5hbWUiLCJnZXRBY3RpdmVVbmlmb3JtIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwidXNlUHJvZ3JhbSIsImNvbXBpbGVTaGFkZXIiLCJ0eXBlIiwic291cmNlIiwic2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyU291cmNlIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJnZXRTaGFkZXJJbmZvTG9nIiwiY3JlYXRlRnJhbWVCdWZmZXJPYmplY3QiLCJ0ZXh0SWQiLCJ3IiwiaCIsImludGVybmFsRm9ybWF0IiwicGFyYW0iLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJ0ZXh0dXJlIiwiY3JlYXRlVGV4dHVyZSIsImJpbmRUZXh0dXJlIiwiVEVYVFVSRV8yRCIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX01JTl9GSUxURVIiLCJURVhUVVJFX01BR19GSUxURVIiLCJURVhUVVJFX1dSQVBfUyIsIkNMQU1QX1RPX0VER0UiLCJURVhUVVJFX1dSQVBfVCIsInRleEltYWdlMkQiLCJmcmFtZWJ1ZmZlciIsImNyZWF0ZUZyYW1lYnVmZmVyIiwiYmluZEZyYW1lYnVmZmVyIiwiRlJBTUVCVUZGRVIiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRCIsIkNPTE9SX0FUVEFDSE1FTlQwIiwiY3JlYXRlRG91YmxlRnJhbWVCdWZmZXJPYmplY3QiLCJ0ZXhJZCIsImZibzEiLCJmYm8yIiwicmVhZCIsIndyaXRlIiwic3dhcCIsInRlbXAiLCJkZWZhdWx0Q29uZmlnIiwiZGVuc2l0eURpc3NpcGF0aW9uIiwidmVsb2NpdHlEaXNzaXBhdGlvbiIsInByZXNzdXJlRGlzc2lwYXRpb24iLCJwcmVzc3VyZUl0ZXJhdGlvbnMiLCJjdXJsIiwic3BsYXRSYWRpdXMiLCJGbHVpZCIsImdhbWUiLCJjb25maWciLCJjYW52YXMiLCJhc3NpZ24iLCJwb3NpdGlvbiIsInRvcCIsImdldENvbnRleHQiLCJhbHBoYSIsImNsZWFyQ29sb3IiLCJnZXRFeHRlbnNpb24iLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiY3JlYXRlQnVmZmVyIiwiYnVmZmVyRGF0YSIsIkZsb2F0MzJBcnJheSIsIlNUQVRJQ19EUkFXIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJVaW50MTZBcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJGTE9BVCIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwiY3JlYXRlUmVuZGVyZXIiLCJwcm9ncmFtcyIsImJhc2VWZXJ0ZXhTaGFkZXIiLCJWRVJURVhfU0hBREVSIiwiY2xlYXJTaGFkZXIiLCJGUkFHTUVOVF9TSEFERVIiLCJkaXNwbGF5U2hhZGVyIiwic3BsYXRTaGFkZXIiLCJhZHZlY3Rpb25TaGFkZXIiLCJkaXZlcmdlbmNlU2hhZGVyIiwiY3VybFNoYWRlciIsInZvcnRpY2l0eVNoYWRlciIsInByZXNzdXJlU2hhZGVyIiwiZ3JhZGllbnRTdWJ0cmFjdFNoYWRlciIsImNsZWFyIiwic3BsYXQiLCJhZHZlY3Rpb24iLCJkaXZlcmdlbmNlIiwidm9ydGljaXR5IiwicHJlc3N1cmUiLCJncmFkaWVuU3VidHJhY3QiLCJjcmVhdGVQcm9ncmFtcyIsInRleHR1cmVIZWlnaHQiLCJ0ZXh0dXJlV2lkdGgiLCJmcmFtZWJ1ZmZlcnMiLCJtb3VzZVNwbGF0IiwibWFrZVNwbGF0Iiwic3BsYXRzIiwic2V0TGlzdGVuZXJzIiwiaW5pdEZyYW1lYnVmZmVycyIsImVtaXRTcGxhdHMiLCJlbWl0VGltZSIsIndhaXRUaW1lIiwidHdlZW5SdW5uZXIiLCJtb3ZlZCIsIngiLCJ5IiwiZG93biIsImNvbG9yIiwidXBkYXRlIiwicmVzaXplQ2FudmFzIiwiY2xpZW50V2lkdGgiLCJkcmF3aW5nQnVmZmVyV2lkdGgiLCJkcmF3aW5nQnVmZmVySGVpZ2h0IiwidGV4VHlwZSIsIkhBTEZfRkxPQVQiLCJyZ2JhIiwiaWYiLCJSR0JBMTZGIiwiUkdCQSIsInJnIiwiUkcxNkYiLCJSRyIsIlIxNkYiLCJSRUQiLCJ2ZWxvY2l0eSIsIkxJTkVBUiIsImRlbnNpdHkiLCJORUFSRVNUIiwiY3JlYXRlRnJhbWVidWZmZXJzIiwiYmxpdCIsImRlc3RpbmF0aW9uIiwiZHJhd0VsZW1lbnRzIiwiVFJJQU5HTEVTIiwiVU5TSUdORURfU0hPUlQiLCJmYiIsInVuaWZvcm0xaSIsInVUYXJnZXQiLCJ1bmlmb3JtMWYiLCJhc3BlY3RSYXRpbyIsInVuaWZvcm0yZiIsInBvaW50IiwidW5pZm9ybTNmIiwicmFkaXVzIiwidmlld3BvcnQiLCJ0ZXhlbFNpemUiLCJ1VmVsb2NpdHkiLCJ1U291cmNlIiwiZGlzc2lwYXRpb24iLCJ1Q3VybCIsInVUZXh0dXJlIiwidURpdmVyZ2VuY2UiLCJ1UHJlc3N1cmUiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInJhbmRvbSIsInRhcmdldFRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwicmVzZXRDb3VudGVyIiwiZmx1aWQiLCJydW5TcGxhdHMiLCJub3ciLCJEYXRlIiwiZGVsYXRNUyIsImxhc3RUaW1lIiwic3BsYXRzQ291bnRlciIsImd1aSIsIm1ha2VHVUkiLCJhZGRTcGxhdCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImFkZFNwbGF0Rm9sZGVyIiwic2V0dGluZ3MiLCJjdXJyZW50UmVzZXRDb3VudGVyIiwiZGF0YSIsImFuY2hvciIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbnB1dCIsImZpbGUiLCJmaWxlcyIsImpzb24iLCJ0ZXh0IiwicGFyc2UiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9